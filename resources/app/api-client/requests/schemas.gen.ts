// This file is auto-generated by @hey-api/openapi-ts

export const $AlbumResource = {
    type: 'object',
    properties: {
        title: {
            type: 'string'
        },
        slug: {
            type: 'string'
        },
        year: {
            type: ['integer', 'null']
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        cover: {
            description: 'Cover relation',
            '$ref': '#/components/schemas/ImageResource'
        },
        artists: {
            type: 'array',
            description: 'Album artists relation',
            items: {
                '$ref': '#/components/schemas/ArtistResource'
            }
        },
        songs: {
            type: 'array',
            description: 'Songs relation',
            items: {
                '$ref': '#/components/schemas/SongResource'
            }
        },
        genres: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    slug: {
                        type: 'string'
                    },
                    name: {
                        type: 'string'
                    }
                },
                required: ['slug', 'name']
            }
        }
    },
    required: ['title', 'slug', 'year', 'createdAt', 'updatedAt'],
    title: 'AlbumResource'
} as const;

export const $AlbumWithoutSongsResource = {
    type: 'object',
    properties: {
        title: {
            type: 'string'
        },
        slug: {
            type: 'string'
        },
        year: {
            type: ['integer', 'null']
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        cover: {
            description: 'Cover relation',
            '$ref': '#/components/schemas/ImageResource'
        },
        artists: {
            description: 'Album artist relation',
            '$ref': '#/components/schemas/ArtistResource'
        }
    },
    required: ['title', 'slug', 'year', 'createdAt', 'updatedAt'],
    title: 'AlbumWithoutSongsResource'
} as const;

export const $ArtistResource = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        slug: {
            type: 'string'
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        portrait: {
            description: 'Portrait relation',
            '$ref': '#/components/schemas/ImageResource'
        }
    },
    required: ['name', 'slug', 'createdAt', 'updatedAt'],
    title: 'ArtistResource'
} as const;

export const $AuthenticateUsingPasskeyRequest = {
    type: 'object',
    properties: {
        start_authentication_response: {
            type: 'string'
        }
    },
    required: ['start_authentication_response'],
    title: 'AuthenticateUsingPasskeyRequest'
} as const;

export const $ContentChunk = {
    type: 'object',
    properties: {
        content: {
            type: 'string'
        },
        startLine: {
            type: 'integer'
        },
        endLine: {
            type: 'integer'
        },
        totalLines: {
            type: 'integer'
        },
        hasMore: {
            type: 'boolean'
        }
    },
    title: 'ContentChunk'
} as const;

export const $CreateLibraryRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            maxLength: 100
        },
        path: {
            type: 'string',
            maxLength: 1000
        },
        type: {
            '$ref': '#/components/schemas/LibraryType'
        },
        order: {
            type: 'integer'
        }
    },
    required: ['name', 'path', 'type', 'order'],
    title: 'CreateLibraryRequest'
} as const;

export const $CreatePlaylistRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            maxLength: 255
        },
        description: {
            type: ['string', 'null']
        },
        is_public: {
            type: 'boolean'
        }
    },
    required: ['name'],
    title: 'CreatePlaylistRequest'
} as const;

export const $CreateSmartPlaylistRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            maxLength: 255
        },
        description: {
            type: ['string', 'null']
        },
        is_public: {
            type: 'boolean'
        },
        rules: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    operator: {
                        type: 'string',
                        enum: ['and', 'or']
                    },
                    rules: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                field: {
                                    type: 'string'
                                },
                                operator: {
                                    type: 'string'
                                },
                                value: {
                                    type: 'string'
                                }
                            },
                            required: ['field', 'operator', 'value']
                        }
                    }
                },
                required: ['rules']
            }
        }
    },
    required: ['name', 'rules'],
    title: 'CreateSmartPlaylistRequest'
} as const;

export const $CreateUserRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            maxLength: 160
        },
        email: {
            type: 'string',
            format: 'email',
            maxLength: 254
        },
        password: {
            type: 'string',
            minLength: 1,
            maxLength: 100
        }
    },
    required: ['name', 'email', 'password'],
    title: 'CreateUserRequest'
} as const;

export const $FileInfo = {
    type: 'object',
    properties: {
        size: {
            type: 'integer'
        },
        sizeMb: {
            type: 'number'
        },
        lines: {
            type: 'integer'
        },
        avgLineLength: {
            type: 'number'
        },
        optimalThreads: {
            type: 'integer'
        },
        path: {
            type: 'string'
        }
    },
    title: 'FileInfo'
} as const;

export const $ForgotPasswordRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email'
        },
        url: {
            type: 'string'
        }
    },
    required: ['email'],
    title: 'ForgotPasswordRequest'
} as const;

export const $GenreResource = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        slug: {
            type: 'string'
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        songs: {
            type: 'array',
            description: 'Songs relation',
            items: {
                '$ref': '#/components/schemas/SongResource'
            }
        }
    },
    required: ['name', 'slug', 'createdAt', 'updatedAt'],
    title: 'GenreResource'
} as const;

export const $ImageResource = {
    type: 'object',
    properties: {
        public_id: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        extension: {
            type: 'string'
        },
        size: {
            type: 'integer'
        },
        mime_type: {
            type: 'string'
        },
        width: {
            type: 'integer'
        },
        height: {
            type: 'integer'
        },
        blurhash: {
            type: 'string'
        },
        url: {
            type: 'string'
        }
    },
    required: ['public_id', 'path', 'extension', 'size', 'mime_type', 'width', 'height', 'blurhash', 'url'],
    title: 'ImageResource'
} as const;

export const $LibraryResource = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        slug: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        type: {
            type: 'string'
        },
        order: {
            type: 'integer'
        },
        lastScan: {
            type: ['string', 'null']
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        }
    },
    required: ['name', 'slug', 'path', 'type', 'order', 'lastScan', 'createdAt', 'updatedAt'],
    title: 'LibraryResource'
} as const;

export const $LibraryType = {
    type: 'string',
    enum: ['music', 'podcast', 'audiobook', 'movie', 'tv_show'],
    title: 'LibraryType'
} as const;

export const $LogFile = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        fileName: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    title: 'LogFile'
} as const;

export const $LoginRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email'
        },
        password: {
            type: 'string'
        },
        remember: {
            type: 'boolean'
        }
    },
    required: ['email', 'password'],
    title: 'LoginRequest'
} as const;

export const $LogoutRequest = {
    type: 'object',
    properties: {
        refresh_token: {
            type: 'string'
        }
    },
    title: 'LogoutRequest'
} as const;

export const $MovieResource = {
    type: 'object',
    properties: {
        title: {
            type: 'string'
        },
        slug: {
            type: 'string'
        },
        year: {
            type: ['integer', 'null']
        },
        summary: {
            type: ['string', 'null']
        },
        created_at: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updated_at: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        videos_count: {
            type: 'string'
        }
    },
    required: ['title', 'slug', 'year', 'summary', 'created_at', 'updated_at'],
    title: 'MovieResource'
} as const;

export const $NewAccessTokenResource = {
    type: 'object',
    properties: {
        token: {
            type: 'string'
        },
        abilities: {
            type: 'string'
        },
        expiresAt: {
            type: 'string'
        }
    },
    required: ['token', 'abilities', 'expiresAt'],
    title: 'NewAccessTokenResource'
} as const;

export const $PersonalAccessTokenViewResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer'
        },
        name: {
            type: 'string'
        },
        abilities: {
            type: ['array', 'null'],
            items: {
                type: 'string'
            }
        },
        userAgent: {
            type: ['string', 'null']
        },
        clientName: {
            type: ['string', 'null']
        },
        clientVersion: {
            type: ['string', 'null']
        },
        clientType: {
            type: ['string', 'null']
        },
        deviceOperatingSystem: {
            type: ['string', 'null']
        },
        deviceName: {
            type: ['string', 'null']
        },
        lastUsedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        expiresAt: {
            type: ['string', 'null']
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        }
    },
    required: ['id', 'name', 'abilities', 'userAgent', 'clientName', 'clientVersion', 'clientType', 'deviceOperatingSystem', 'deviceName', 'lastUsedAt', 'expiresAt', 'createdAt', 'updatedAt'],
    title: 'PersonalAccessTokenViewResource'
} as const;

export const $PlaylistResource = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        description: {
            type: ['string', 'null']
        },
        isPublic: {
            type: 'string'
        },
        isCollaborative: {
            type: 'string'
        },
        isSmart: {
            type: 'string'
        },
        smartRules: {
            type: ['array', 'null'],
            items: {}
        },
        cover: {
            '$ref': '#/components/schemas/ImageResource'
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        songsCount: {
            type: 'integer'
        },
        statistics: {
            type: 'object',
            properties: {
                views: {
                    type: 'integer'
                },
                plays: {
                    type: 'integer'
                },
                shares: {
                    type: 'integer'
                },
                favorites: {
                    type: 'integer'
                }
            },
            required: ['views', 'plays', 'shares', 'favorites']
        },
        songs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SongResource'
            }
        },
        owner: {
            type: 'object',
            properties: {
                email: {
                    type: 'string'
                },
                name: {
                    type: 'string'
                }
            },
            required: ['email', 'name']
        },
        collaborators: {
            type: 'string'
        }
    },
    required: ['id', 'name', 'description', 'isPublic', 'isCollaborative', 'isSmart', 'createdAt', 'updatedAt'],
    title: 'PlaylistResource'
} as const;

export const $PlaylistStatistic = {
    type: 'object',
    properties: {
        id: {
            type: 'integer'
        },
        playlist_id: {
            type: 'integer'
        },
        views: {
            type: 'integer'
        },
        plays: {
            type: 'integer'
        },
        shares: {
            type: 'integer'
        },
        favorites: {
            type: 'integer'
        },
        created_at: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updated_at: {
            type: ['string', 'null'],
            format: 'date-time'
        }
    },
    required: ['id', 'playlist_id', 'views', 'plays', 'shares', 'favorites', 'created_at', 'updated_at'],
    title: 'PlaylistStatistic'
} as const;

export const $QueueMonitorResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer'
        },
        job_id: {
            type: 'string'
        },
        name: {
            type: ['string', 'null']
        },
        queue: {
            type: ['string', 'null']
        },
        started_at: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        started_at_exact: {
            type: ['string', 'null']
        },
        finished_at: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        finished_at_exact: {
            type: ['string', 'null']
        },
        attempt: {
            type: 'integer'
        },
        progress: {
            type: ['integer', 'null']
        },
        exception: {
            type: ['array', 'null'],
            items: {}
        },
        exception_class: {
            type: ['string', 'null']
        },
        data: {
            type: ['string', 'null']
        },
        status: {
            type: 'string'
        },
        job_uuid: {
            type: ['string', 'null']
        },
        retried: {
            type: 'boolean'
        },
        queued_at: {
            type: ['string', 'null'],
            format: 'date-time'
        }
    },
    required: ['id', 'job_id', 'name', 'queue', 'started_at', 'started_at_exact', 'finished_at', 'finished_at_exact', 'attempt', 'progress', 'exception', 'exception_class', 'data', 'status', 'job_uuid', 'retried', 'queued_at'],
    title: 'QueueMonitorResource'
} as const;

export const $RegisterRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            maxLength: 255
        },
        email: {
            type: 'string',
            format: 'email',
            maxLength: 255
        },
        password: {
            type: 'string'
        },
        password_confirmation: {
            type: 'string'
        }
    },
    required: ['name', 'email', 'password', 'password_confirmation'],
    title: 'RegisterRequest'
} as const;

export const $ResetPasswordRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email'
        },
        token: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        password_confirmation: {
            type: 'string'
        }
    },
    required: ['email', 'token', 'password', 'password_confirmation'],
    title: 'ResetPasswordRequest'
} as const;

export const $RetryJobRequest = {
    type: 'object',
    properties: {
        id: {
            type: 'integer'
        }
    },
    title: 'RetryJobRequest'
} as const;

export const $SearchResults = {
    type: 'object',
    properties: {
        results: {
            type: 'array',
            items: {}
        },
        pattern: {
            type: 'string'
        },
        caseSensitive: {
            type: 'boolean'
        },
        totalMatches: {
            type: 'integer'
        },
        searchTimeMs: {
            type: 'number'
        },
        hasMoreResults: {
            type: 'boolean'
        }
    },
    title: 'SearchResults'
} as const;

export const $SongResource = {
    type: 'object',
    properties: {
        public_id: {
            type: 'string'
        },
        title: {
            type: 'string'
        },
        year: {
            type: ['integer', 'null']
        },
        comment: {
            type: ['string', 'null']
        },
        disc: {
            type: ['integer', 'null']
        },
        length: {
            type: ['string', 'null']
        },
        durationHuman: {
            type: 'string'
        },
        lyrics: {
            type: ['string', 'null']
        },
        lyricsExist: {
            type: 'boolean'
        },
        modifiedTime: {
            type: ['integer', 'null']
        },
        path: {
            type: 'string'
        },
        track: {
            type: ['integer', 'null']
        },
        size: {
            type: 'integer'
        },
        sizeHuman: {
            type: 'string'
        },
        mimeType: {
            type: 'string'
        },
        hash: {
            type: ['string', 'null']
        },
        streamUrl: {
            type: 'string'
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        album: {
            '$ref': '#/components/schemas/AlbumWithoutSongsResource'
        },
        artists: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ArtistResource'
            }
        }
    },
    required: ['public_id', 'title', 'year', 'comment', 'disc', 'length', 'durationHuman', 'lyrics', 'lyricsExist', 'modifiedTime', 'path', 'track', 'size', 'sizeHuman', 'mimeType', 'hash', 'streamUrl', 'createdAt', 'updatedAt'],
    title: 'SongResource'
} as const;

export const $StorePasskeyRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            maxLength: 255
        },
        passkey: {
            type: 'string'
        }
    },
    required: ['name', 'passkey'],
    title: 'StorePasskeyRequest'
} as const;

export const $UpdateGenreRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 255
        }
    },
    required: ['name'],
    title: 'UpdateGenreRequest'
} as const;

export const $UpdateLibraryRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            maxLength: 100
        },
        path: {
            type: 'string',
            maxLength: 1000
        },
        type: {
            '$ref': '#/components/schemas/LibraryType'
        },
        order: {
            type: 'integer'
        }
    },
    title: 'UpdateLibraryRequest'
} as const;

export const $UpdatePlaylistRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            maxLength: 255
        },
        description: {
            type: ['string', 'null']
        },
        is_public: {
            type: 'boolean'
        }
    },
    title: 'UpdatePlaylistRequest'
} as const;

export const $UpdateSmartPlaylistRulesRequest = {
    type: 'object',
    properties: {
        rules: {
            type: 'array',
            items: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        field: {
                            type: 'string'
                        },
                        operator: {
                            type: 'string'
                        },
                        value: {
                            type: 'string'
                        }
                    },
                    required: ['field', 'operator', 'value']
                }
            }
        }
    },
    required: ['rules'],
    title: 'UpdateSmartPlaylistRulesRequest'
} as const;

export const $UpdateUserRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email',
            maxLength: 254
        },
        password: {
            type: 'string',
            maxLength: 100
        }
    },
    title: 'UpdateUserRequest'
} as const;

export const $UserResource = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        isAdmin: {
            type: 'boolean'
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        }
    },
    required: ['name', 'email', 'isAdmin', 'createdAt', 'updatedAt'],
    title: 'UserResource'
} as const;