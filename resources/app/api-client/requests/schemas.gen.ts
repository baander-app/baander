// This file is auto-generated by @hey-api/openapi-ts

export const $AlbumResourceResource = {
    type: 'object',
    properties: {
        title: {
            type: 'string'
        },
        slug: {
            type: 'string'
        },
        year: {
            type: ['integer', 'null']
        },
        directory: {
            type: 'string'
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        coverUrl: {
            type: 'string',
            description: 'Cover relation'
        },
        albumArtist: {
            description: 'Album artist relation',
            '$ref': '#/components/schemas/ArtistResource'
        },
        songs: {
            type: 'array',
            description: 'Songs relation',
            items: {
                '$ref': '#/components/schemas/SongResource'
            }
        }
    },
    required: ['title', 'slug', 'year', 'directory', 'createdAt', 'updatedAt'],
    title: 'AlbumResourceResource'
} as const;

export const $AlbumWithoutSongsResource = {
    type: 'object',
    properties: {
        title: {
            type: 'string'
        },
        slug: {
            type: 'string'
        },
        year: {
            type: ['integer', 'null']
        },
        directory: {
            type: 'string'
        },
        coverUrl: {
            type: 'string'
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        albumArtist: {
            description: 'Album artist relation',
            '$ref': '#/components/schemas/ArtistResource'
        }
    },
    required: ['title', 'slug', 'year', 'directory', 'createdAt', 'updatedAt'],
    title: 'AlbumWithoutSongsResource'
} as const;

export const $ArtistResource = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        slug: {
            type: 'string'
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        portrait: {
            description: 'Portrait relation',
            '$ref': '#/components/schemas/ImageResource'
        }
    },
    required: ['name', 'slug', 'createdAt', 'updatedAt'],
    title: 'ArtistResource'
} as const;

export const $CreateLibraryRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            maxLength: 100
        },
        path: {
            type: 'string',
            maxLength: 1000
        },
        type: {
            '$ref': '#/components/schemas/LibraryType'
        },
        order: {
            type: 'integer'
        }
    },
    required: ['name', 'path', 'type', 'order'],
    title: 'CreateLibraryRequest'
} as const;

export const $CreateUserRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            maxLength: 160
        },
        email: {
            type: 'string',
            format: 'email',
            maxLength: 254
        },
        password: {
            type: 'string',
            minLength: 1,
            maxLength: 100
        }
    },
    required: ['name', 'email', 'password'],
    title: 'CreateUserRequest'
} as const;

export const $ForgotPasswordRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email'
        },
        url: {
            type: 'string'
        }
    },
    required: ['email'],
    title: 'ForgotPasswordRequest'
} as const;

export const $GenreResource = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        slug: {
            type: 'string'
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        songs: {
            type: 'array',
            description: 'Songs relation',
            items: {
                '$ref': '#/components/schemas/SongResource'
            }
        }
    },
    required: ['name', 'slug', 'createdAt', 'updatedAt'],
    title: 'GenreResource'
} as const;

export const $ImageResource = {
    type: 'object',
    properties: {
        public_id: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        extension: {
            type: 'string'
        },
        size: {
            type: 'integer'
        },
        mime_type: {
            type: 'string'
        },
        width: {
            type: 'integer'
        },
        height: {
            type: 'integer'
        },
        url: {
            type: 'string'
        }
    },
    required: ['public_id', 'path', 'extension', 'size', 'mime_type', 'width', 'height', 'url'],
    title: 'ImageResource'
} as const;

export const $LibraryResource = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        slug: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        type: {
            type: 'string'
        },
        order: {
            type: 'integer'
        },
        lastScan: {
            type: ['string', 'null']
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        }
    },
    required: ['name', 'slug', 'path', 'type', 'order', 'lastScan', 'createdAt', 'updatedAt'],
    title: 'LibraryResource'
} as const;

export const $LibraryType = {
    type: 'string',
    enum: ['music', 'podcast', 'audiobook', 'movie', 'tv_show'],
    title: 'LibraryType'
} as const;

export const $LoginRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email'
        },
        password: {
            type: 'string'
        },
        remember: {
            type: 'boolean'
        }
    },
    required: ['email', 'password'],
    title: 'LoginRequest'
} as const;

export const $NewAccessTokenResource = {
    type: 'object',
    properties: {
        token: {
            type: 'string'
        },
        abilities: {
            type: 'string'
        },
        expiresAt: {
            type: 'string'
        }
    },
    required: ['token', 'abilities', 'expiresAt'],
    title: 'NewAccessTokenResource'
} as const;

export const $PersonalAccessTokenViewResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer'
        },
        name: {
            type: 'string'
        },
        abilities: {
            type: ['array', 'null'],
            items: {
                type: 'string'
            }
        },
        userAgent: {
            type: ['string', 'null']
        },
        clientName: {
            type: ['string', 'null']
        },
        clientVersion: {
            type: ['string', 'null']
        },
        clientType: {
            type: ['string', 'null']
        },
        deviceOperatingSystem: {
            type: ['string', 'null']
        },
        deviceName: {
            type: ['string', 'null']
        },
        lastUsedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        expiresAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        }
    },
    required: ['id', 'name', 'abilities', 'userAgent', 'clientName', 'clientVersion', 'clientType', 'deviceOperatingSystem', 'deviceName', 'lastUsedAt', 'expiresAt', 'createdAt', 'updatedAt'],
    title: 'PersonalAccessTokenViewResource'
} as const;

export const $RegisterRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email',
            maxLength: 255
        },
        password: {
            type: 'string'
        },
        password_confirmation: {
            type: 'string'
        },
        name: {
            type: 'string'
        }
    },
    required: ['email', 'password', 'password_confirmation'],
    title: 'RegisterRequest'
} as const;

export const $ResetPasswordRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email'
        },
        token: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        password_confirmation: {
            type: 'string'
        }
    },
    required: ['email', 'token', 'password', 'password_confirmation'],
    title: 'ResetPasswordRequest'
} as const;

export const $SongResource = {
    type: 'object',
    properties: {
        public_id: {
            type: 'string'
        },
        title: {
            type: 'string'
        },
        year: {
            type: ['integer', 'null']
        },
        comment: {
            type: ['string', 'null']
        },
        disc: {
            type: ['integer', 'null']
        },
        length: {
            type: ['string', 'null']
        },
        durationHuman: {
            type: 'string'
        },
        lyrics: {
            type: ['string', 'null']
        },
        modifiedTime: {
            type: ['integer', 'null']
        },
        path: {
            type: 'string'
        },
        track: {
            type: ['integer', 'null']
        },
        size: {
            type: 'integer'
        },
        sizeHuman: {
            type: 'string'
        },
        mimeType: {
            type: 'string'
        },
        hash: {
            type: ['string', 'null']
        },
        stream: {
            type: ['string', 'null']
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        album: {
            '$ref': '#/components/schemas/AlbumWithoutSongsResource'
        }
    },
    required: ['public_id', 'title', 'year', 'comment', 'disc', 'length', 'durationHuman', 'lyrics', 'modifiedTime', 'path', 'track', 'size', 'sizeHuman', 'mimeType', 'hash', 'createdAt', 'updatedAt'],
    title: 'SongResource'
} as const;

export const $UpdateGenreRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 255
        }
    },
    required: ['name'],
    title: 'UpdateGenreRequest'
} as const;

export const $UpdateLibraryRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            maxLength: 100
        },
        path: {
            type: 'string',
            maxLength: 1000
        },
        type: {
            '$ref': '#/components/schemas/LibraryType'
        },
        order: {
            type: 'integer'
        }
    },
    title: 'UpdateLibraryRequest'
} as const;

export const $UpdateUserRequest = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email',
            maxLength: 254
        },
        password: {
            type: 'string',
            maxLength: 100
        }
    },
    title: 'UpdateUserRequest'
} as const;

export const $UserResource = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        isAdmin: {
            type: 'boolean'
        },
        createdAt: {
            type: ['string', 'null'],
            format: 'date-time'
        },
        updatedAt: {
            type: ['string', 'null'],
            format: 'date-time'
        }
    },
    required: ['name', 'email', 'isAdmin', 'createdAt', 'updatedAt'],
    title: 'UserResource'
} as const;

export const $WidgetListItemResource = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: `Id of the widget.
Use this to query the schema.`,
            examples: ['https://baander.test/api/schemas/widgets/MainNavBar']
        },
        name: {
            type: 'string',
            description: 'Name of the schema.',
            examples: ['MainNavBar']
        }
    },
    required: ['id', 'name'],
    title: 'WidgetListItemResource'
} as const;