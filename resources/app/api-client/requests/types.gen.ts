// This file is auto-generated by @hey-api/openapi-ts

export type AlbumResource = {
    title: string;
    slug: string;
    year: number | null;
    directory: string;
    coverUrl?: string;
    albumArtist?: ArtistResource;
    songs?: Array<SongResource>;
    createdAt: string | null;
    updatedAt: string | null;
};

export type ArtistResource = {
    name: string;
    slug: string;
    /**
     * $this->mergeWhen($this->whenLoaded('portrait') && $this->portrait, [
     * 'portrait' => route('api.image.serve', ['image' => $this->portrait]),
     * ]),
     */
    createdAt: string | null;
    updatedAt: string | null;
};

export type CreateLibraryRequest = {
    name: string;
    path: string;
    type: LibraryType;
    order: number;
};

export type CreateUserRequest = {
    name: string;
    email: string;
    password: string;
};

export type ForgotPasswordRequest = {
    email: string;
    url?: string;
};

export type GenreResource = {
    name: string;
    slug: string;
    createdAt: string | null;
    updatedAt: string | null;
};

export type LibraryResource = {
    name: string;
    slug: string;
    path: string;
    type: string;
    order: number;
    lastScan: string | null;
    createdAt: string | null;
    updatedAt: string | null;
};

export type LibraryType = 'music' | 'podcast' | 'audiobook' | 'movie' | 'tv_show';

export type LoginRequest = {
    email: string;
    password: string;
};

export type NewAccessTokenResource = {
    token: string;
    abilities: string;
    expiresAt: string;
};

export type RegisterRequest = {
    email: string;
    password: string;
    password_confirmation: string;
    name?: string;
};

export type ResetPasswordRequest = {
    email: string;
    token: string;
    password: string;
    password_confirmation: string;
};

export type SongResource = {
    public_id: string;
    title: string;
    year: number | null;
    comment: string | null;
    disc: number | null;
    length: string | null;
    durationHuman: string;
    lyrics: string | null;
    modifiedTime: number | null;
    path: string;
    track: number | null;
    size: number;
    sizeHuman: string;
    mimeType: string;
    hash: string | null;
    stream?: string;
    createdAt: string | null;
    updatedAt: string | null;
};

export type UpdateLibraryRequest = {
    name?: string;
    path?: string;
    type?: LibraryType;
    order?: number;
};

export type UpdateUserRequest = {
    email?: string;
    password?: string;
};

export type UserResource = {
    name: string;
    email: string;
    isAdmin: boolean;
    createdAt: string;
    updatedAt: string;
};

export type WidgetListItemResource = {
    /**
     * Id of the widget.
     * Use this to query the schema.
     */
    id: string;
    /**
     * Name of the schema.
     */
    name: string;
};

export type AlbumsIndexData = {
    fields?: string;
    library: string;
    page?: number;
    perPage?: number;
    relations?: string;
};

export type AlbumsIndexResponse = {
    data: Array<AlbumResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total?: number;
        /**
         * The number of items for the current page
         */
        count?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The number of current page
         */
        currentPage?: number;
        /**
         * The number of last page
         */
        lastPage?: number;
    };
};

export type AlbumsShowData = {
    /**
     * The album slug
     */
    album: string;
    /**
     * The library slug
     */
    library: string;
};

export type AlbumsShowResponse = AlbumResource;

export type ArtistsIndexData = {
    library: string;
};

export type ArtistsIndexResponse = {
    data: Array<ArtistResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total?: number;
        /**
         * The number of items for the current page
         */
        count?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The number of current page
         */
        currentPage?: number;
        /**
         * The number of last page
         */
        lastPage?: number;
    };
};

export type ArtistsShowData = {
    /**
     * The artist slug
     */
    artist: string;
    library: string;
};

export type ArtistsShowResponse = ArtistResource;

export type AuthLoginData = {
    requestBody?: LoginRequest;
};

export type AuthLoginResponse = {
    accessToken: NewAccessTokenResource;
    refreshToken: NewAccessTokenResource;
};

export type AuthRefreshTokenData = {
    requestBody?: {
        [key: string]: unknown;
    };
};

export type AuthRefreshTokenResponse = {
    accessToken: NewAccessTokenResource;
};

export type AuthStreamTokenData = {
    requestBody?: {
        [key: string]: unknown;
    };
};

export type AuthStreamTokenResponse = {
    streamToken: NewAccessTokenResource;
};

export type AuthRegisterData = {
    requestBody?: RegisterRequest;
};

export type AuthRegisterResponse = {
    accessToken: NewAccessTokenResource;
    refreshToken: NewAccessTokenResource;
};

export type AuthForgotPasswordData = {
    requestBody?: ForgotPasswordRequest;
};

export type AuthForgotPasswordResponse = {
    message: string;
};

export type AuthResetPasswordData = {
    requestBody?: ResetPasswordRequest;
};

export type AuthResetPasswordResponse = {
    message: string;
};

export type AuthVerifyData = {
    requestBody?: {
        [key: string]: unknown;
    };
};

export type AuthVerifyResponse = UserResource;

export type GenresIndexData = {
    library: string;
    page?: number;
    perPage?: number;
};

export type GenresIndexResponse = {
    data: Array<GenreResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total?: number;
        /**
         * The number of items for the current page
         */
        count?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The number of current page
         */
        currentPage?: number;
        /**
         * The number of last page
         */
        lastPage?: number;
    };
};

export type ImageServeData = {
    /**
     * The image public id
     */
    image: string;
};

export type ImageServeResponse = string;

export type JobLibraryScanData = {
    requestBody?: {
        [key: string]: unknown;
    };
    slug: string;
};

export type JobLibraryScanResponse = {
    status: number;
    message: string;
    jobStatusId: string;
} | string;

export type LibrariesIndexData = {
    page?: number;
    perPage?: number;
};

export type LibrariesIndexResponse = {
    data: Array<LibraryResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total?: number;
        /**
         * The number of items for the current page
         */
        count?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The number of current page
         */
        currentPage?: number;
        /**
         * The number of last page
         */
        lastPage?: number;
    };
};

export type LibraryCreateData = {
    requestBody?: CreateLibraryRequest;
};

export type LibraryCreateResponse = LibraryResource;

export type LibraryUpdateData = {
    requestBody?: UpdateLibraryRequest;
};

export type LibraryUpdateResponse = LibraryResource;

export type LibraryDeleteResponse = null;

export type LogsFilesResponse = {
    fileName: string;
};

export type SongsIndexData = {
    albumArtist?: string;
    albumId?: number;
    genreIds?: string;
    /**
     * The library slug
     */
    library: string;
    page?: number;
    perPage?: number;
    title?: string;
};

export type SongsIndexResponse = {
    data: Array<SongResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total?: number;
        /**
         * The number of items for the current page
         */
        count?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The number of current page
         */
        currentPage?: number;
        /**
         * The number of last page
         */
        lastPage?: number;
    };
};

export type SongsShowData = {
    /**
     * The library slug
     */
    library: string;
    /**
     * The song public id
     */
    song: string;
};

export type SongsShowResponse = SongResource;

export type SongsStreamData = {
    library: string;
    /**
     * The song public id
     */
    song: string;
};

export type SongsStreamResponse = {
    [key: string]: unknown;
};

export type UsersIndexResponse = {
    data: Array<UserResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total?: number;
        /**
         * The number of items for the current page
         */
        count?: number;
        /**
         * The number of items per page
         */
        perPage?: number;
        /**
         * The number of current page
         */
        currentPage?: number;
        /**
         * The number of last page
         */
        lastPage?: number;
    };
};

export type UsersStoreData = {
    requestBody?: CreateUserRequest;
};

export type UsersStoreResponse = UserResource;

export type UsersUpdateData = {
    requestBody?: UpdateUserRequest;
    /**
     * The user ID
     */
    user: number;
};

export type UsersUpdateResponse = UserResource;

export type UsersShowData = {
    /**
     * The user ID
     */
    user: number;
};

export type UsersShowResponse = UserResource;

export type UsersDestroyData = {
    user: string;
};

export type UsersDestroyResponse = null;

export type UsersMeResponse = UserResource;

export type WidgetsGetWidgetData = {
    name: string;
};

export type WidgetsGetWidgetResponse = string;

export type WidgetSchemaGetWidgetsResponse = Array<WidgetListItemResource>;

export type WidgetSchemaGetWidgetData = {
    id: string;
    /**
     * Name of the schema
     */
    name: string;
};

export type WidgetSchemaGetWidgetResponse = string;

export type $OpenApiTs = {
    '/libraries/{library}/albums': {
        get: {
            req: AlbumsIndexData;
            res: {
                /**
                 * Json paginated set of `AlbumResource`
                 */
                200: {
                    data: Array<AlbumResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total?: number;
                        /**
                         * The number of items for the current page
                         */
                        count?: number;
                        /**
                         * The number of items per page
                         */
                        perPage?: number;
                        /**
                         * The number of current page
                         */
                        currentPage?: number;
                        /**
                         * The number of last page
                         */
                        lastPage?: number;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/libraries/{library}/albums/{album}': {
        get: {
            req: AlbumsShowData;
            res: {
                /**
                 * `AlbumResource`
                 */
                200: AlbumResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/libraries/{library}/artists': {
        get: {
            req: ArtistsIndexData;
            res: {
                /**
                 * Json paginated set of `ArtistResource`
                 */
                200: {
                    data: Array<ArtistResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total?: number;
                        /**
                         * The number of items for the current page
                         */
                        count?: number;
                        /**
                         * The number of items per page
                         */
                        perPage?: number;
                        /**
                         * The number of current page
                         */
                        currentPage?: number;
                        /**
                         * The number of last page
                         */
                        lastPage?: number;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/libraries/{library}/artists/{artist}': {
        get: {
            req: ArtistsShowData;
            res: {
                /**
                 * `ArtistResource`
                 */
                200: ArtistResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/auth/login': {
        post: {
            req: AuthLoginData;
            res: {
                200: {
                    accessToken: NewAccessTokenResource;
                    refreshToken: NewAccessTokenResource;
                };
                /**
                 * An error
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/auth/refreshToken': {
        post: {
            req: AuthRefreshTokenData;
            res: {
                200: {
                    accessToken: NewAccessTokenResource;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/auth/streamToken': {
        post: {
            req: AuthStreamTokenData;
            res: {
                200: {
                    streamToken: NewAccessTokenResource;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/auth/register': {
        post: {
            req: AuthRegisterData;
            res: {
                200: {
                    accessToken: NewAccessTokenResource;
                    refreshToken: NewAccessTokenResource;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/auth/forgotPassword': {
        post: {
            req: AuthForgotPasswordData;
            res: {
                200: {
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/auth/resetPassword': {
        post: {
            req: AuthResetPasswordData;
            res: {
                200: {
                    message: string;
                };
                /**
                 * An error
                 */
                400: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/auth/verify/:id/:hash': {
        post: {
            req: AuthVerifyData;
            res: {
                /**
                 * `UserResource`
                 */
                200: UserResource;
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/libraries/{library}/genres': {
        get: {
            req: GenresIndexData;
            res: {
                /**
                 * Json paginated set of `GenreResource`
                 */
                200: {
                    data: Array<GenreResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total?: number;
                        /**
                         * The number of items for the current page
                         */
                        count?: number;
                        /**
                         * The number of items per page
                         */
                        perPage?: number;
                        /**
                         * The number of current page
                         */
                        currentPage?: number;
                        /**
                         * The number of last page
                         */
                        lastPage?: number;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/images/{image}': {
        get: {
            req: ImageServeData;
            res: {
                200: string;
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/jobs/scanLibrary/{slug}': {
        post: {
            req: JobLibraryScanData;
            res: {
                200: {
    status: number;
    message: string;
    jobStatusId: string;
} | string;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/libraries': {
        get: {
            req: LibrariesIndexData;
            res: {
                /**
                 * Json paginated set of `LibraryResource`
                 */
                200: {
                    data: Array<LibraryResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total?: number;
                        /**
                         * The number of items for the current page
                         */
                        count?: number;
                        /**
                         * The number of items per page
                         */
                        perPage?: number;
                        /**
                         * The number of current page
                         */
                        currentPage?: number;
                        /**
                         * The number of last page
                         */
                        lastPage?: number;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
        post: {
            req: LibraryCreateData;
            res: {
                /**
                 * `LibraryResource`
                 */
                200: LibraryResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/libraries/:slug': {
        patch: {
            req: LibraryUpdateData;
            res: {
                /**
                 * `LibraryResource`
                 */
                200: LibraryResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
        delete: {
            res: {
                /**
                 * No content
                 */
                204: null;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/logs/files': {
        get: {
            res: {
                200: {
                    fileName: string;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/libraries/{library}/songs': {
        get: {
            req: SongsIndexData;
            res: {
                /**
                 * Json paginated set of `SongResource`
                 */
                200: {
                    data: Array<SongResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total?: number;
                        /**
                         * The number of items for the current page
                         */
                        count?: number;
                        /**
                         * The number of items per page
                         */
                        perPage?: number;
                        /**
                         * The number of current page
                         */
                        currentPage?: number;
                        /**
                         * The number of last page
                         */
                        lastPage?: number;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/libraries/{library}/songs/{song}': {
        get: {
            req: SongsShowData;
            res: {
                /**
                 * `SongResource`
                 */
                200: SongResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/libraries/{library}/songs/stream/song/{song}/direct': {
        get: {
            req: SongsStreamData;
            res: {
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/users': {
        get: {
            res: {
                /**
                 * Json paginated set of `UserResource`
                 */
                200: {
                    data: Array<UserResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total?: number;
                        /**
                         * The number of items for the current page
                         */
                        count?: number;
                        /**
                         * The number of items per page
                         */
                        perPage?: number;
                        /**
                         * The number of current page
                         */
                        currentPage?: number;
                        /**
                         * The number of last page
                         */
                        lastPage?: number;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
        post: {
            req: UsersStoreData;
            res: {
                /**
                 * `UserResource`
                 */
                200: UserResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/users/{user}': {
        patch: {
            req: UsersUpdateData;
            res: {
                /**
                 * `UserResource`
                 */
                200: UserResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
        get: {
            req: UsersShowData;
            res: {
                /**
                 * `UserResource`
                 */
                200: UserResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
        delete: {
            req: UsersDestroyData;
            res: {
                /**
                 * No content
                 */
                204: null;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/users/me': {
        get: {
            res: {
                /**
                 * `UserResource`
                 */
                200: UserResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/widgets/{name}': {
        get: {
            req: WidgetsGetWidgetData;
            res: {
                200: string;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/schemas/widgets': {
        get: {
            res: {
                /**
                 * Array of `WidgetListItemResource`
                 */
                200: Array<WidgetListItemResource>;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/schemas/widgets/{name}': {
        get: {
            req: WidgetSchemaGetWidgetData;
            res: {
                200: string;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
};