// This file is auto-generated by @hey-api/openapi-ts

export type AlbumResource = {
    title: string;
    slug: string;
    year: number | null;
    createdAt: string | null;
    updatedAt: string | null;
    /**
     * Cover relation
     */
    cover?: ImageResource;
    /**
     * Album artists relation
     */
    artists?: Array<ArtistResource>;
    /**
     * Songs relation
     */
    songs?: Array<SongResource>;
    genres?: Array<{
        slug: string;
        name: string;
    }>;
};

export type AlbumWithoutSongsResource = {
    title: string;
    slug: string;
    year: number | null;
    createdAt: string | null;
    updatedAt: string | null;
    /**
     * Cover relation
     */
    cover?: ImageResource;
    /**
     * Album artist relation
     */
    artists?: ArtistResource;
};

export type ArtistResource = {
    name: string;
    slug: string;
    createdAt: string | null;
    updatedAt: string | null;
    /**
     * Portrait relation
     */
    portrait?: ImageResource;
};

export type AuthenticateUsingPasskeyRequest = {
    start_authentication_response: string;
};

export type CreateLibraryRequest = {
    name: string;
    path: string;
    type: LibraryType;
    order: number;
};

export type CreatePlaylistRequest = {
    name: string;
    description?: string | null;
    is_public?: boolean;
};

export type CreateSmartPlaylistRequest = {
    name: string;
    description?: string | null;
    is_public?: boolean;
    rules: Array<{
        operator?: 'and' | 'or';
        rules: Array<{
            field: string;
            operator: string;
            value: string;
        }>;
    }>;
};

export type CreateUserRequest = {
    name: string;
    email: string;
    password: string;
};

export type ForgotPasswordRequest = {
    email: string;
    url?: string;
};

export type GenreResource = {
    name: string;
    slug: string;
    createdAt: string | null;
    updatedAt: string | null;
    /**
     * Songs relation
     */
    songs?: Array<SongResource>;
};

export type ImageResource = {
    public_id: string;
    path: string;
    extension: string;
    size: number;
    mime_type: string;
    width: number;
    height: number;
    blurhash: string;
    url: string;
};

export type LevelCountResource = {
    level: string;
    level_name: string;
    level_class: string;
    count: string;
    selected: string;
};

export type LibraryResource = {
    name: string;
    slug: string;
    path: string;
    type: string;
    order: number;
    lastScan: string | null;
    createdAt: string | null;
    updatedAt: string | null;
};

export type LibraryType = 'music' | 'podcast' | 'audiobook' | 'movie' | 'tv_show';

export type LogFileResource = {
    type: {
        value: string;
        name: string;
    };
    identifier: string;
    sub_folder: string;
    sub_folder_identifier: string;
    path: string;
    name: string;
    size: string;
    size_in_mb: string;
    size_formatted: string;
    download_url: string;
    earliest_timestamp: string;
    latest_timestamp: string;
    can_download: string;
    can_delete: string;
    loading: boolean;
    /**
     * helper for frontend
     */
    selected_for_deletion: boolean;
};

export type LogFolderResource = {
    identifier: string;
    path: string;
    clean_path: string;
    is_root: string;
    earliest_timestamp: string;
    latest_timestamp: string;
    download_url: string;
    files: Array<LogFileResource>;
    can_download: string;
    can_delete: string;
    loading: boolean;
};

export type LogResource = {
    index: string;
    file_identifier: string;
    file_position: string;
    level: string;
    level_name: string;
    level_class: string;
    datetime: string;
    time: string;
    message: string;
    context: string;
    extra: string;
    url: string;
};

export type LogViewerHostResource = {
    identifier: string;
    name: string;
    host: string;
    headers: string;
    auth: string;
    is_remote: string;
};

export type LoginRequest = {
    email: string;
    password: string;
    remember?: boolean;
};

export type LogoutRequest = {
    refresh_token?: string;
};

export type MovieResource = {
    title: string;
    slug: string;
    year: number | null;
    summary: string | null;
    created_at: string | null;
    updated_at: string | null;
    videos_count?: string;
};

export type NewAccessTokenResource = {
    token: string;
    abilities: string;
    expiresAt: string;
};

export type PersonalAccessTokenViewResource = {
    id: number;
    name: string;
    abilities: Array<(string)> | null;
    userAgent: string | null;
    clientName: string | null;
    clientVersion: string | null;
    clientType: string | null;
    deviceOperatingSystem: string | null;
    deviceName: string | null;
    lastUsedAt: string | null;
    expiresAt: string | null;
    createdAt: string | null;
    updatedAt: string | null;
};

export type PlaylistResource = {
    id: string;
    name: string;
    description: string | null;
    isPublic: string;
    isCollaborative: string;
    isSmart: string;
    smartRules?: Array<unknown> | null;
    cover?: ImageResource;
    createdAt: string | null;
    updatedAt: string | null;
    songsCount?: number;
    statistics?: {
        views: number;
        plays: number;
        shares: number;
        favorites: number;
    };
    songs?: Array<SongResource>;
    owner?: {
        email: string;
        name: string;
    };
    collaborators?: string;
};

export type PlaylistStatistic = {
    id: number;
    playlist_id: number;
    views: number;
    plays: number;
    shares: number;
    favorites: number;
    created_at: string | null;
    updated_at: string | null;
};

export type QueueMonitorResource = {
    id: number;
    job_id: string;
    name: string | null;
    queue: string | null;
    started_at: string | null;
    started_at_exact: string | null;
    finished_at: string | null;
    finished_at_exact: string | null;
    attempt: number;
    progress: number | null;
    exception: Array<unknown> | null;
    exception_class: string | null;
    data: string | null;
    status: string;
    job_uuid: string | null;
    retried: boolean;
    queued_at: string | null;
};

export type RegisterRequest = {
    name: string;
    email: string;
    password: string;
    password_confirmation: string;
};

export type ResetPasswordRequest = {
    email: string;
    token: string;
    password: string;
    password_confirmation: string;
};

export type RetryJobRequest = {
    id?: number;
};

export type SongResource = {
    public_id: string;
    title: string;
    year: number | null;
    comment: string | null;
    disc: number | null;
    length: string | null;
    durationHuman: string;
    lyrics: string | null;
    lyricsExist: boolean;
    modifiedTime: number | null;
    path: string;
    track: number | null;
    size: number;
    sizeHuman: string;
    mimeType: string;
    hash: string | null;
    streamUrl: string;
    createdAt: string | null;
    updatedAt: string | null;
    album?: AlbumWithoutSongsResource;
    artists?: Array<ArtistResource>;
};

export type StorePasskeyRequest = {
    name: string;
    passkey: string;
};

export type UpdateGenreRequest = {
    name: string;
};

export type UpdateLibraryRequest = {
    name?: string;
    path?: string;
    type?: LibraryType;
    order?: number;
};

export type UpdatePlaylistRequest = {
    name?: string;
    description?: string | null;
    is_public?: boolean;
};

export type UpdateSmartPlaylistRulesRequest = {
    rules: Array<Array<{
        field: string;
        operator: string;
        value: string;
    }>>;
};

export type UpdateUserRequest = {
    email?: string;
    password?: string;
};

export type UserResource = {
    name: string;
    email: string;
    isAdmin: boolean;
    createdAt: string | null;
    updatedAt: string | null;
};

export type GetApiLibrariesByLibraryAlbumsData = {
    fields?: string;
    genres?: string;
    /**
     * The library slug
     */
    library: string;
    limit?: number;
    page?: number;
    relations?: string;
};

export type GetApiLibrariesByLibraryAlbumsResponse = {
    data: Array<AlbumResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total: number;
        /**
         * The number of items for the current page
         */
        count: number;
        /**
         * The number of items per page
         */
        limit: number;
        /**
         * The number of current page
         */
        currentPage: number;
        /**
         * The number of next page
         */
        nextPage: number;
        /**
         * The number of last page
         */
        lastPage: number;
    };
    links: {
        first: string | null;
        last: string | null;
        prev: string | null;
        next: string | null;
    };
};

export type GetApiLibrariesByLibraryAlbumsByAlbumData = {
    /**
     * The album slug
     */
    album: string;
    /**
     * The library slug
     */
    library: string;
};

export type GetApiLibrariesByLibraryAlbumsByAlbumResponse = AlbumResource;

export type GetApiLibrariesByLibraryArtistsData = {
    fields?: string;
    genres?: string;
    library: string;
    limit?: number;
    page?: number;
    relations?: string;
};

export type GetApiLibrariesByLibraryArtistsResponse = {
    data: Array<ArtistResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total: number;
        /**
         * The number of items for the current page
         */
        count: number;
        /**
         * The number of items per page
         */
        limit: number;
        /**
         * The number of current page
         */
        currentPage: number;
        /**
         * The number of next page
         */
        nextPage: number;
        /**
         * The number of last page
         */
        lastPage: number;
    };
    links: {
        first: string | null;
        last: string | null;
        prev: string | null;
        next: string | null;
    };
};

export type GetApiLibrariesByLibraryArtistsByArtistData = {
    /**
     * The artist slug
     */
    artist: string;
    library: string;
};

export type GetApiLibrariesByLibraryArtistsByArtistResponse = ArtistResource;

export type PostApiAuthLoginData = {
    requestBody: LoginRequest;
};

export type PostApiAuthLoginResponse = {
    accessToken: NewAccessTokenResource;
    refreshToken: NewAccessTokenResource;
};

export type PostApiAuthRefreshTokenResponse = {
    accessToken: NewAccessTokenResource;
};

export type PostApiAuthStreamTokenResponse = {
    streamToken: NewAccessTokenResource;
};

export type PostApiAuthRegisterData = {
    requestBody: RegisterRequest;
};

export type PostApiAuthRegisterResponse = {
    accessToken: NewAccessTokenResource;
    refreshToken: NewAccessTokenResource;
};

export type PostApiAuthForgotPasswordData = {
    requestBody: ForgotPasswordRequest;
};

export type PostApiAuthForgotPasswordResponse = {
    message: string;
};

export type PostApiAuthResetPasswordData = {
    requestBody: ResetPasswordRequest;
};

export type PostApiAuthResetPasswordResponse = {
    message: 'Password reset successfully.';
};

export type PostApiAuthVerifyByIdByHashData = {
    hash: string;
    id: number;
};

export type PostApiAuthVerifyByIdByHashResponse = UserResource;

export type PostApiAuthLogoutData = {
    requestBody?: LogoutRequest & {
    refreshToken?: string;
};
};

export type PostApiAuthLogoutResponse = void;

export type GetWebauthnPasskeyResponse = {
    challenge: string;
    rpId: string;
    allowCredentials: Array<(string)>;
};

export type PostWebauthnPasskeyData = {
    requestBody: AuthenticateUsingPasskeyRequest;
};

export type PostWebauthnPasskeyResponse = {
    accessToken: NewAccessTokenResource;
    refreshToken: NewAccessTokenResource;
} | string;

export type GetWebauthnPasskeyRegisterResponse = string | {
    [key: string]: unknown;
};

export type PostWebauthnPasskeyRegisterData = {
    requestBody: StorePasskeyRequest;
};

export type PostWebauthnPasskeyRegisterResponse = {
    message: 'Passkey successfully stored';
};

export type GetHorizonApiBatchesResponse = {
    batches: Array<(string)>;
};

export type GetHorizonApiBatchesByIdData = {
    id: string;
};

export type GetHorizonApiBatchesByIdResponse = {
    batch: string;
    failedJobs: string;
};

export type PostHorizonApiBatchesRetryByIdData = {
    id: string;
};

export type PostHorizonApiBatchesRetryByIdResponse = {
    [key: string]: unknown;
};

export type GetHorizonApiJobsCompletedData = {
    startingAt?: string;
};

export type GetHorizonApiJobsCompletedResponse = {
    jobs: string;
    total: string;
};

export type GetHorizonApiStatsResponse = {
    failedJobs: string;
    jobsPerMinute: string;
    pausedMasters: string | 0;
    periods: {
        failedJobs: string;
        recentJobs: string;
    };
    processes: string;
    queueWithMaxRuntime: string;
    queueWithMaxThroughput: string;
    recentJobs: string;
    status: 'paused' | 'running' | 'inactive';
    wait: string;
};

export type GetHorizonApiJobsFailedData = {
    tag?: string;
};

export type GetHorizonApiJobsFailedResponse = {
    jobs: string;
    total: string;
};

export type GetHorizonApiJobsFailedByIdData = {
    id: string;
};

export type GetHorizonApiJobsFailedByIdResponse = unknown;

export type GetSystemLogViewerApiFilesResponse = Array<LogFileResource>;

export type GetSystemLogViewerApiFilesByFileIdentifierDownloadRequestData = {
    fileIdentifier: string;
};

export type GetSystemLogViewerApiFilesByFileIdentifierDownloadRequestResponse = {
    url: string;
};

export type PostSystemLogViewerApiFilesByFileIdentifierClearCacheData = {
    fileIdentifier: string;
};

export type PostSystemLogViewerApiFilesByFileIdentifierClearCacheResponse = {
    success: boolean;
};

export type DeleteSystemLogViewerApiFilesByFileIdentifierData = {
    fileIdentifier: string;
};

export type DeleteSystemLogViewerApiFilesByFileIdentifierResponse = {
    success: boolean;
};

export type PostSystemLogViewerApiClearCacheAllResponse = {
    success: boolean;
};

export type PostSystemLogViewerApiDeleteMultipleFilesData = {
    requestBody?: {
        files?: string;
    };
};

export type PostSystemLogViewerApiDeleteMultipleFilesResponse = {
    success: boolean;
};

export type GetSystemLogViewerApiFilesByFileIdentifierDownloadData = {
    fileIdentifier: string;
};

export type GetSystemLogViewerApiFilesByFileIdentifierDownloadResponse = string;

export type GetSystemLogViewerApiFoldersData = {
    direction?: string;
};

export type GetSystemLogViewerApiFoldersResponse = Array<LogFolderResource>;

export type GetSystemLogViewerApiFoldersByFolderIdentifierDownloadRequestData = {
    folderIdentifier: string;
};

export type GetSystemLogViewerApiFoldersByFolderIdentifierDownloadRequestResponse = {
    url: string;
};

export type PostSystemLogViewerApiFoldersByFolderIdentifierClearCacheData = {
    folderIdentifier: string;
};

export type PostSystemLogViewerApiFoldersByFolderIdentifierClearCacheResponse = {
    success: boolean;
};

export type DeleteSystemLogViewerApiFoldersByFolderIdentifierData = {
    folderIdentifier: string;
};

export type DeleteSystemLogViewerApiFoldersByFolderIdentifierResponse = {
    success: boolean;
};

export type GetSystemLogViewerApiFoldersByFolderIdentifierDownloadData = {
    folderIdentifier: string;
};

export type GetSystemLogViewerApiFoldersByFolderIdentifierDownloadResponse = string;

export type GetApiGenresData = {
    fields?: string;
    librarySlug?: string;
    limit?: number;
    page?: number;
    relations?: string;
};

export type GetApiGenresResponse = {
    data: Array<GenreResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total: number;
        /**
         * The number of items for the current page
         */
        count: number;
        /**
         * The number of items per page
         */
        limit: number;
        /**
         * The number of current page
         */
        currentPage: number;
        /**
         * The number of next page
         */
        nextPage: number;
        /**
         * The number of last page
         */
        lastPage: number;
    };
    links: {
        first: string | null;
        last: string | null;
        prev: string | null;
        next: string | null;
    };
};

export type GetApiGenresByGenreData = {
    /**
     * The genre slug
     */
    genre: string;
};

export type GetApiGenresByGenreResponse = GenreResource;

export type PatchApiGenresByGenreData = {
    /**
     * The genre slug
     */
    genre: string;
    requestBody: UpdateGenreRequest;
};

export type PatchApiGenresByGenreResponse = GenreResource;

export type DeleteApiGenresByGenreData = {
    /**
     * The genre slug
     */
    genre: string;
};

export type DeleteApiGenresByGenreResponse = void;

export type GetSystemLogViewerApiHostsResponse = Array<LogViewerHostResource>;

export type GetApiImagesByImageData = {
    /**
     * The image public id
     */
    image: string;
};

export type GetApiImagesByImageResponse = string;

export type PostApiJobsScanLibraryBySlugData = {
    slug: string;
};

export type PostApiJobsScanLibraryBySlugResponse = {
    message: 'Job started successfully';
};

export type GetHorizonApiMetricsJobsResponse = Array<unknown>;

export type GetHorizonApiMetricsJobsByIdData = {
    id: string;
};

export type GetHorizonApiMetricsJobsByIdResponse = {
    [key: string]: unknown;
};

export type GetHorizonApiJobsByIdData = {
    id: string;
};

export type GetHorizonApiJobsByIdResponse = Array<unknown>;

export type GetApiLibrariesData = {
    limit?: number;
    page?: number;
};

export type GetApiLibrariesResponse = {
    data: Array<LibraryResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total: number;
        /**
         * The number of items for the current page
         */
        count: number;
        /**
         * The number of items per page
         */
        limit: number;
        /**
         * The number of current page
         */
        currentPage: number;
        /**
         * The number of next page
         */
        nextPage: number;
        /**
         * The number of last page
         */
        lastPage: number;
    };
    links: {
        first: string | null;
        last: string | null;
        prev: string | null;
        next: string | null;
    };
};

export type PostApiLibrariesData = {
    requestBody: CreateLibraryRequest;
};

export type PostApiLibrariesResponse = LibraryResource;

export type GetApiLibrariesBySlugData = {
    slug: string;
};

export type GetApiLibrariesBySlugResponse = LibraryResource;

export type PatchApiLibrariesBySlugData = {
    requestBody?: UpdateLibraryRequest;
    slug: string;
};

export type PatchApiLibrariesBySlugResponse = LibraryResource;

export type DeleteApiLibrariesBySlugData = {
    slug: string;
};

export type DeleteApiLibrariesBySlugResponse = void;

export type GetSystemLogViewerApiLogsData = {
    direction?: string;
    excludeFileTypes?: string;
    excludeLevels?: string;
    file?: string;
    log?: string;
    perPage?: string;
    query?: string;
    shorterStackTraces?: boolean;
};

export type GetSystemLogViewerApiLogsResponse = {
    file: LogFileResource | null;
    levelCounts: Array<LevelCountResource>;
    logs: Array<LogResource>;
    columns: string | null;
    pagination: {
        current_page: string;
        first_page_url: string;
        from: string;
        last_page: string;
        last_page_url: string;
        links: string;
        links_short: string;
        next_page_url: string;
        path: string;
        per_page: string;
        prev_page_url: string;
        to: string;
        total: string;
    } | null;
    expandAutomatically: string;
    cacheRecentlyCleared: string;
    hasMoreResults: string;
    percentScanned: string;
    performance: {
        memoryUsage: string;
        requestTime: string;
        version: string;
    };
};

export type GetHorizonApiMastersResponse = {
    [key: string]: unknown;
};

export type GetHorizonApiMonitoringResponse = {
    [key: string]: unknown;
};

export type PostHorizonApiMonitoringResponse = {
    [key: string]: unknown;
};

export type GetHorizonApiMonitoringByTagData = {
    limit?: string;
    tag: string;
};

export type GetHorizonApiMonitoringByTagResponse = {
    jobs: string;
    total: string;
};

export type DeleteHorizonApiMonitoringByTagData = {
    tag: string;
};

export type DeleteHorizonApiMonitoringByTagResponse = {
    [key: string]: unknown;
};

export type GetApiLibrariesByLibraryMoviesData = {
    /**
     * The library slug
     */
    library: string;
};

export type GetApiLibrariesByLibraryMoviesResponse = {
    data: Array<MovieResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total: number;
        /**
         * The number of items for the current page
         */
        count: number;
        /**
         * The number of items per page
         */
        limit: number;
        /**
         * The number of current page
         */
        currentPage: number;
        /**
         * The number of next page
         */
        nextPage: number;
        /**
         * The number of last page
         */
        lastPage: number;
    };
    links: {
        first: string | null;
        last: string | null;
        prev: string | null;
        next: string | null;
    };
};

export type GetApiLibrariesByLibraryMoviesByMovieData = {
    /**
     * The library slug
     */
    library: string;
    /**
     * The movie slug
     */
    movie: string;
};

export type GetApiLibrariesByLibraryMoviesByMovieResponse = MovieResource;

export type GetApiOpcacheStatusResponse = {
    opcache_enabled: boolean;
    file_cache: string;
    file_cache_only: boolean;
    cache_full: boolean;
    restart_pending: boolean;
    ''?: {
        [key: string]: unknown;
    };
    memory_usage: {
        used_memory: number;
        free_memory: number;
        wasted_memory: number;
        current_wasted_percentage: number;
    };
    interned_strings_usage: {
        buffer_size: number;
        used_memory: number;
        free_memory: number;
        number_of_strings: number;
    };
    opcache_statistics: {
        num_cached_scripts: number;
        num_cached_keys: number;
        max_cached_keys: number;
        hits: number;
        start_time: number;
        last_restart_time: number;
        oom_restarts: number;
        hash_restarts: number;
        manual_restarts: number;
        misses: number;
        blacklist_misses: number;
        blacklist_miss_ratio: number;
        opcache_hit_rate: number;
    };
    jit: {
        enabled: boolean;
        on: boolean;
        kind: number;
        opt_level: number;
        opt_flags: number;
        buffer_size: number;
        buffer_free: number;
    };
};

export type GetApiOpcacheConfigResponse = {
    directives: {
        property: number | boolean | string;
    };
    version: {
        version: string;
        opcache_product_name: string;
    };
    blacklist: Array<(string)>;
};

export type PostApiOpcacheClearResponse = {
    success: boolean;
};

export type PostApiOpcacheCompileData = {
    force?: string;
};

export type PostApiOpcacheCompileResponse = {
    totalFiles: number;
    compiled: number;
};

export type GetHorizonApiJobsPendingData = {
    startingAt?: string;
};

export type GetHorizonApiJobsPendingResponse = {
    jobs: string;
    total: string;
};

export type GetApiPlaylistsResponse = {
    data: Array<PlaylistResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total: number;
        /**
         * The number of items for the current page
         */
        count: number;
        /**
         * The number of items per page
         */
        limit: number;
        /**
         * The number of current page
         */
        currentPage: number;
        /**
         * The number of next page
         */
        nextPage: number;
        /**
         * The number of last page
         */
        lastPage: number;
    };
    links: {
        first: string | null;
        last: string | null;
        prev: string | null;
        next: string | null;
    };
};

export type PostApiPlaylistsData = {
    requestBody: CreatePlaylistRequest;
};

export type PostApiPlaylistsResponse = PlaylistResource;

export type GetApiPlaylistsByPlaylistData = {
    /**
     * The playlist public id
     */
    playlist: string;
    relations?: string;
};

export type GetApiPlaylistsByPlaylistResponse = PlaylistResource;

export type PutApiPlaylistsByPlaylistData = {
    /**
     * The playlist public id
     */
    playlist: string;
    requestBody?: UpdatePlaylistRequest;
};

export type PutApiPlaylistsByPlaylistResponse = PlaylistResource;

export type DeleteApiPlaylistsByPlaylistData = {
    /**
     * The playlist public id
     */
    playlist: string;
};

export type DeleteApiPlaylistsByPlaylistResponse = void;

export type PostApiPlaylistsByPlaylistSongsBySongData = {
    /**
     * The playlist public id
     */
    playlist: string;
    /**
     * The song public id
     */
    song: string;
};

export type PostApiPlaylistsByPlaylistSongsBySongResponse = {
    message: 'Song added to playlist';
};

export type DeleteApiPlaylistsByPlaylistSongsBySongData = {
    /**
     * The playlist public id
     */
    playlist: string;
    /**
     * The song public id
     */
    song: string;
};

export type DeleteApiPlaylistsByPlaylistSongsBySongResponse = {
    message: 'Song removed from playlist';
};

export type PostApiPlaylistsByPlaylistReorderData = {
    /**
     * The playlist public id
     */
    playlist: string;
    requestBody: {
        song_ids: Array<(number)>;
    };
};

export type PostApiPlaylistsByPlaylistReorderResponse = {
    message: 'Playlist reordered';
};

export type PostApiPlaylistsByPlaylistCollaboratorsData = {
    /**
     * The playlist public id
     */
    playlist: string;
    requestBody: {
        user_id: number;
        role?: 'editor' | 'contributor';
    };
};

export type PostApiPlaylistsByPlaylistCollaboratorsResponse = {
    message: 'Collaborator added';
};

export type DeleteApiPlaylistsByPlaylistCollaboratorsByUserData = {
    /**
     * The playlist public id
     */
    playlist: string;
    /**
     * The user ID
     */
    user: number;
};

export type DeleteApiPlaylistsByPlaylistCollaboratorsByUserResponse = {
    message: 'Collaborator removed';
};

export type PostApiPlaylistsByPlaylistCloneData = {
    /**
     * The playlist public id
     */
    playlist: string;
};

export type PostApiPlaylistsByPlaylistCloneResponse = PlaylistResource;

export type GetApiPlaylistsByPlaylistStatisticsData = {
    /**
     * The playlist public id
     */
    playlist: string;
};

export type GetApiPlaylistsByPlaylistStatisticsResponse = PlaylistStatistic;

export type PostApiPlaylistsByPlaylistStatisticsRecordViewData = {
    /**
     * The playlist public id
     */
    playlist: string;
};

export type PostApiPlaylistsByPlaylistStatisticsRecordViewResponse = {
    message: 'View recorded';
};

export type PostApiPlaylistsByPlaylistStatisticsRecordPlayData = {
    /**
     * The playlist public id
     */
    playlist: string;
};

export type PostApiPlaylistsByPlaylistStatisticsRecordPlayResponse = {
    message: 'Play recorded';
};

export type PostApiPlaylistsByPlaylistStatisticsRecordShareData = {
    /**
     * The playlist public id
     */
    playlist: string;
};

export type PostApiPlaylistsByPlaylistStatisticsRecordShareResponse = {
    message: 'Share recorded';
};

export type PostApiPlaylistsByPlaylistStatisticsRecordFavoriteData = {
    /**
     * The playlist public id
     */
    playlist: string;
};

export type PostApiPlaylistsByPlaylistStatisticsRecordFavoriteResponse = {
    message: 'Favorite recorded';
};

export type PostApiPlaylistsSmartData = {
    requestBody: CreateSmartPlaylistRequest;
};

export type PostApiPlaylistsSmartResponse = PlaylistResource;

export type PutApiPlaylistsByPlaylistSmartData = {
    /**
     * The playlist public id
     */
    playlist: string;
    requestBody: UpdateSmartPlaylistRulesRequest;
};

export type PutApiPlaylistsByPlaylistSmartResponse = PlaylistResource;

export type PostApiPlaylistsByPlaylistSmartSyncData = {
    /**
     * The playlist public id
     */
    playlist: string;
};

export type PostApiPlaylistsByPlaylistSmartSyncResponse = {
    message: 'Smart playlist synced';
};

export type GetApiQueueMetricsData = {
    limit?: number;
    name?: string;
    page?: number;
    queue?: string;
    queuedFirst?: boolean;
    status?: 'running' | 'succeeded' | 'failed' | 'stale' | 'queued';
};

export type GetApiQueueMetricsResponse = {
    data: Array<QueueMonitorResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total: number;
        /**
         * The number of items for the current page
         */
        count: number;
        /**
         * The number of items per page
         */
        limit: number;
        /**
         * The number of current page
         */
        currentPage: number;
        /**
         * The number of next page
         */
        nextPage: number;
        /**
         * The number of last page
         */
        lastPage: number;
    };
    links: {
        first: string | null;
        last: string | null;
        prev: string | null;
        next: string | null;
    };
};

export type GetApiQueueMetricsQueuesResponse = Array<{
    name: string;
}>;

export type GetApiQueueMetricsMetricsData = {
    aggregateDays?: number;
};

export type GetApiQueueMetricsMetricsResponse = Array<{
    title: string;
    value: number;
    previousValue: number | null;
    format: string;
    formattedValue: string;
    formattedPreviousValue: string | null;
}>;

export type PostApiQueueMetricsRetryByIdData = {
    id: string;
    requestBody?: RetryJobRequest;
};

export type PostApiQueueMetricsRetryByIdResponse = {
    status: 'success';
    message: 'Job has been successfully retried';
} | {
    status: 'failed';
    message: 'An error occurred while executing the job';
};

export type DeleteApiQueueMetricsByIdData = {
    id: string;
};

export type DeleteApiQueueMetricsByIdResponse = void;

export type DeleteApiQueueMetricsPurgeResponse = void;

export type GetHorizonApiMetricsQueuesResponse = Array<unknown>;

export type GetHorizonApiMetricsQueuesByIdData = {
    id: string;
};

export type GetHorizonApiMetricsQueuesByIdResponse = {
    [key: string]: unknown;
};

export type PostHorizonApiJobsRetryByIdData = {
    id: string;
};

export type PostHorizonApiJobsRetryByIdResponse = {
    [key: string]: unknown;
};

export type GetApiSchemasMusicbrainzResponse = Array<Array<unknown>>;

export type GetHorizonApiJobsSilencedData = {
    startingAt?: string;
};

export type GetHorizonApiJobsSilencedResponse = {
    jobs: string;
    total: string;
};

export type GetApiLibrariesByLibrarySongsData = {
    genreNames?: string;
    genreSlugs?: string;
    /**
     * The library slug
     */
    library: string;
    limit?: number;
    page?: number;
    relations?: string;
};

export type GetApiLibrariesByLibrarySongsResponse = {
    data: Array<SongResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total: number;
        /**
         * The number of items for the current page
         */
        count: number;
        /**
         * The number of items per page
         */
        limit: number;
        /**
         * The number of current page
         */
        currentPage: number;
        /**
         * The number of next page
         */
        nextPage: number;
        /**
         * The number of last page
         */
        lastPage: number;
    };
    links: {
        first: string | null;
        last: string | null;
        prev: string | null;
        next: string | null;
    };
};

export type GetApiLibrariesByLibrarySongsByPublicIdData = {
    /**
     * The library slug
     */
    library: string;
    publicId: string;
    relations?: string;
};

export type GetApiLibrariesByLibrarySongsByPublicIdResponse = SongResource;

export type GetApiStreamSongBySongDirectData = {
    /**
     * The song public id
     */
    song: string;
};

export type GetApiStreamSongBySongDirectResponse = {
    [key: string]: unknown;
};

export type GetApiSystemInfoResponse = Array<{
    section: string;
    values: Array<{
        key: string;
        value: string | number | boolean | null;
    }>;
}>;

export type GetApiSystemInfoSysResponse = {
    memoryUsage: number;
    systemLoadAverage: Array<(number)>;
    swooleVm: {
        object_num: number;
        resource_num: number;
    };
};

export type GetApiUsersData = {
    filterModes?: string;
    filters?: string;
    globalFilter?: string;
    limit?: number;
    page?: number;
    sorting?: string;
};

export type GetApiUsersResponse = {
    data: Array<UserResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total: number;
        /**
         * The number of items for the current page
         */
        count: number;
        /**
         * The number of items per page
         */
        limit: number;
        /**
         * The number of current page
         */
        currentPage: number;
        /**
         * The number of next page
         */
        nextPage: number;
        /**
         * The number of last page
         */
        lastPage: number;
    };
    links: {
        first: string | null;
        last: string | null;
        prev: string | null;
        next: string | null;
    };
};

export type PostApiUsersData = {
    requestBody: CreateUserRequest;
};

export type PostApiUsersResponse = UserResource;

export type PatchApiUsersByUserData = {
    requestBody?: UpdateUserRequest;
    /**
     * The user ID
     */
    user: number;
};

export type PatchApiUsersByUserResponse = UserResource;

export type GetApiUsersByUserData = {
    /**
     * The user ID
     */
    user: number;
};

export type GetApiUsersByUserResponse = UserResource;

export type DeleteApiUsersByUserData = {
    user: string;
};

export type DeleteApiUsersByUserResponse = void;

export type GetApiUsersMeResponse = UserResource;

export type GetApiUsersTokensByUserData = {
    page?: number;
    perPage?: number;
    user: string;
};

export type GetApiUsersTokensByUserResponse = {
    data: Array<PersonalAccessTokenViewResource>;
    meta: {
        /**
         * Total number of items being paginated.
         */
        total: number;
        /**
         * The number of items for the current page
         */
        count: number;
        /**
         * The number of items per page
         */
        limit: number;
        /**
         * The number of current page
         */
        currentPage: number;
        /**
         * The number of next page
         */
        nextPage: number;
        /**
         * The number of last page
         */
        lastPage: number;
    };
    links: {
        first: string | null;
        last: string | null;
        prev: string | null;
        next: string | null;
    };
};

export type DeleteApiUsersTokensByTokenData = {
    /**
     * The token ID
     */
    token: number;
};

export type DeleteApiUsersTokensByTokenResponse = void;

export type GetHorizonApiWorkloadResponse = Array<unknown>;

export type $OpenApiTs = {
    '/api/libraries/{library}/albums': {
        get: {
            req: GetApiLibrariesByLibraryAlbumsData;
            res: {
                /**
                 * Paginated set of `AlbumResource`
                 */
                200: {
                    data: Array<AlbumResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total: number;
                        /**
                         * The number of items for the current page
                         */
                        count: number;
                        /**
                         * The number of items per page
                         */
                        limit: number;
                        /**
                         * The number of current page
                         */
                        currentPage: number;
                        /**
                         * The number of next page
                         */
                        nextPage: number;
                        /**
                         * The number of last page
                         */
                        lastPage: number;
                    };
                    links: {
                        first: string | null;
                        last: string | null;
                        prev: string | null;
                        next: string | null;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/libraries/{library}/albums/{album}': {
        get: {
            req: GetApiLibrariesByLibraryAlbumsByAlbumData;
            res: {
                /**
                 * `AlbumResource`
                 */
                200: AlbumResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/libraries/{library}/artists': {
        get: {
            req: GetApiLibrariesByLibraryArtistsData;
            res: {
                /**
                 * Paginated set of `ArtistResource`
                 */
                200: {
                    data: Array<ArtistResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total: number;
                        /**
                         * The number of items for the current page
                         */
                        count: number;
                        /**
                         * The number of items per page
                         */
                        limit: number;
                        /**
                         * The number of current page
                         */
                        currentPage: number;
                        /**
                         * The number of next page
                         */
                        nextPage: number;
                        /**
                         * The number of last page
                         */
                        lastPage: number;
                    };
                    links: {
                        first: string | null;
                        last: string | null;
                        prev: string | null;
                        next: string | null;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/libraries/{library}/artists/{artist}': {
        get: {
            req: GetApiLibrariesByLibraryArtistsByArtistData;
            res: {
                /**
                 * `ArtistResource`
                 */
                200: ArtistResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/auth/login': {
        post: {
            req: PostApiAuthLoginData;
            res: {
                200: {
                    accessToken: NewAccessTokenResource;
                    refreshToken: NewAccessTokenResource;
                };
                /**
                 * An error
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/auth/refreshToken': {
        post: {
            res: {
                200: {
                    accessToken: NewAccessTokenResource;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/auth/streamToken': {
        post: {
            res: {
                200: {
                    streamToken: NewAccessTokenResource;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/auth/register': {
        post: {
            req: PostApiAuthRegisterData;
            res: {
                200: {
                    accessToken: NewAccessTokenResource;
                    refreshToken: NewAccessTokenResource;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/auth/forgotPassword': {
        post: {
            req: PostApiAuthForgotPasswordData;
            res: {
                200: {
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/auth/resetPassword': {
        post: {
            req: PostApiAuthResetPasswordData;
            res: {
                200: {
                    message: 'Password reset successfully.';
                };
                /**
                 * An error
                 */
                400: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/auth/verify/{id}/{hash}': {
        post: {
            req: PostApiAuthVerifyByIdByHashData;
            res: {
                /**
                 * `UserResource`
                 */
                200: UserResource;
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/auth/logout': {
        post: {
            req: PostApiAuthLogoutData;
            res: {
                /**
                 * No content
                 */
                204: void;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/webauthn/passkey': {
        get: {
            res: {
                200: {
                    challenge: string;
                    rpId: string;
                    allowCredentials: Array<(string)>;
                };
            };
        };
        post: {
            req: PostWebauthnPasskeyData;
            res: {
                200: {
    accessToken: NewAccessTokenResource;
    refreshToken: NewAccessTokenResource;
} | string;
                401: {
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/webauthn/passkey/register': {
        get: {
            res: {
                200: string | {
    [key: string]: unknown;
};
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
        post: {
            req: PostWebauthnPasskeyRegisterData;
            res: {
                200: {
                    message: 'Passkey successfully stored';
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
                500: {
                    error: 'Could not store passkey';
                };
            };
        };
    };
    '/-/horizon/api/batches': {
        get: {
            res: {
                200: {
                    batches: Array<(string)>;
                };
            };
        };
    };
    '/-/horizon/api/batches/{id}': {
        get: {
            req: GetHorizonApiBatchesByIdData;
            res: {
                200: {
                    batch: string;
                    failedJobs: string;
                };
            };
        };
    };
    '/-/horizon/api/batches/retry/{id}': {
        post: {
            req: PostHorizonApiBatchesRetryByIdData;
            res: {
                200: {
                    [key: string]: unknown;
                };
            };
        };
    };
    '/-/horizon/api/jobs/completed': {
        get: {
            req: GetHorizonApiJobsCompletedData;
            res: {
                200: {
                    jobs: string;
                    total: string;
                };
            };
        };
    };
    '/-/horizon/api/stats': {
        get: {
            res: {
                200: {
                    failedJobs: string;
                    jobsPerMinute: string;
                    pausedMasters: string | 0;
                    periods: {
                        failedJobs: string;
                        recentJobs: string;
                    };
                    processes: string;
                    queueWithMaxRuntime: string;
                    queueWithMaxThroughput: string;
                    recentJobs: string;
                    status: 'paused' | 'running' | 'inactive';
                    wait: string;
                };
            };
        };
    };
    '/-/horizon/api/jobs/failed': {
        get: {
            req: GetHorizonApiJobsFailedData;
            res: {
                200: {
                    jobs: string;
                    total: string;
                };
            };
        };
    };
    '/-/horizon/api/jobs/failed/{id}': {
        get: {
            req: GetHorizonApiJobsFailedByIdData;
            res: {
                200: unknown;
            };
        };
    };
    '/system/log-viewer/api/files': {
        get: {
            res: {
                /**
                 * Array of `LogFileResource`
                 */
                200: Array<LogFileResource>;
            };
        };
    };
    '/system/log-viewer/api/files/{fileIdentifier}/download/request': {
        get: {
            req: GetSystemLogViewerApiFilesByFileIdentifierDownloadRequestData;
            res: {
                200: {
                    url: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/system/log-viewer/api/files/{fileIdentifier}/clear-cache': {
        post: {
            req: PostSystemLogViewerApiFilesByFileIdentifierClearCacheData;
            res: {
                200: {
                    success: boolean;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/system/log-viewer/api/files/{fileIdentifier}': {
        delete: {
            req: DeleteSystemLogViewerApiFilesByFileIdentifierData;
            res: {
                200: {
                    success: boolean;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/system/log-viewer/api/clear-cache-all': {
        post: {
            res: {
                200: {
                    success: boolean;
                };
            };
        };
    };
    '/system/log-viewer/api/delete-multiple-files': {
        post: {
            req: PostSystemLogViewerApiDeleteMultipleFilesData;
            res: {
                200: {
                    success: boolean;
                };
            };
        };
    };
    '/system/log-viewer/api/files/{fileIdentifier}/download': {
        get: {
            req: GetSystemLogViewerApiFilesByFileIdentifierDownloadData;
            res: {
                200: string;
            };
        };
    };
    '/system/log-viewer/api/folders': {
        get: {
            req: GetSystemLogViewerApiFoldersData;
            res: {
                /**
                 * Array of `LogFolderResource`
                 */
                200: Array<LogFolderResource>;
            };
        };
    };
    '/system/log-viewer/api/folders/{folderIdentifier}/download/request': {
        get: {
            req: GetSystemLogViewerApiFoldersByFolderIdentifierDownloadRequestData;
            res: {
                200: {
                    url: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/system/log-viewer/api/folders/{folderIdentifier}/clear-cache': {
        post: {
            req: PostSystemLogViewerApiFoldersByFolderIdentifierClearCacheData;
            res: {
                200: {
                    success: boolean;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/system/log-viewer/api/folders/{folderIdentifier}': {
        delete: {
            req: DeleteSystemLogViewerApiFoldersByFolderIdentifierData;
            res: {
                200: {
                    success: boolean;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/system/log-viewer/api/folders/{folderIdentifier}/download': {
        get: {
            req: GetSystemLogViewerApiFoldersByFolderIdentifierDownloadData;
            res: {
                200: string;
            };
        };
    };
    '/api/genres': {
        get: {
            req: GetApiGenresData;
            res: {
                /**
                 * Paginated set of `GenreResource`
                 */
                200: {
                    data: Array<GenreResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total: number;
                        /**
                         * The number of items for the current page
                         */
                        count: number;
                        /**
                         * The number of items per page
                         */
                        limit: number;
                        /**
                         * The number of current page
                         */
                        currentPage: number;
                        /**
                         * The number of next page
                         */
                        nextPage: number;
                        /**
                         * The number of last page
                         */
                        lastPage: number;
                    };
                    links: {
                        first: string | null;
                        last: string | null;
                        prev: string | null;
                        next: string | null;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/genres/{genre}': {
        get: {
            req: GetApiGenresByGenreData;
            res: {
                /**
                 * `GenreResource`
                 */
                200: GenreResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
        patch: {
            req: PatchApiGenresByGenreData;
            res: {
                /**
                 * `GenreResource`
                 */
                200: GenreResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
        delete: {
            req: DeleteApiGenresByGenreData;
            res: {
                /**
                 * No content
                 */
                204: void;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/system/log-viewer/api/hosts': {
        get: {
            res: {
                /**
                 * Array of `LogViewerHostResource`
                 */
                200: Array<LogViewerHostResource>;
            };
        };
    };
    '/api/images/{image}': {
        get: {
            req: GetApiImagesByImageData;
            res: {
                200: string;
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/jobs/scanLibrary/{slug}': {
        post: {
            req: PostApiJobsScanLibraryBySlugData;
            res: {
                200: {
                    message: 'Job started successfully';
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/-/horizon/api/metrics/jobs': {
        get: {
            res: {
                200: Array<unknown>;
            };
        };
    };
    '/-/horizon/api/metrics/jobs/{id}': {
        get: {
            req: GetHorizonApiMetricsJobsByIdData;
            res: {
                200: {
                    [key: string]: unknown;
                };
            };
        };
    };
    '/-/horizon/api/jobs/{id}': {
        get: {
            req: GetHorizonApiJobsByIdData;
            res: {
                200: Array<unknown>;
            };
        };
    };
    '/api/libraries': {
        get: {
            req: GetApiLibrariesData;
            res: {
                /**
                 * Paginated set of `LibraryResource`
                 */
                200: {
                    data: Array<LibraryResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total: number;
                        /**
                         * The number of items for the current page
                         */
                        count: number;
                        /**
                         * The number of items per page
                         */
                        limit: number;
                        /**
                         * The number of current page
                         */
                        currentPage: number;
                        /**
                         * The number of next page
                         */
                        nextPage: number;
                        /**
                         * The number of last page
                         */
                        lastPage: number;
                    };
                    links: {
                        first: string | null;
                        last: string | null;
                        prev: string | null;
                        next: string | null;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
        post: {
            req: PostApiLibrariesData;
            res: {
                /**
                 * `LibraryResource`
                 */
                200: LibraryResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/libraries/{slug}': {
        get: {
            req: GetApiLibrariesBySlugData;
            res: {
                /**
                 * `LibraryResource`
                 */
                200: LibraryResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
        patch: {
            req: PatchApiLibrariesBySlugData;
            res: {
                /**
                 * `LibraryResource`
                 */
                200: LibraryResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
        delete: {
            req: DeleteApiLibrariesBySlugData;
            res: {
                /**
                 * No content
                 */
                204: void;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/system/log-viewer/api/logs': {
        get: {
            req: GetSystemLogViewerApiLogsData;
            res: {
                200: {
                    file: LogFileResource | null;
                    levelCounts: Array<LevelCountResource>;
                    logs: Array<LogResource>;
                    columns: string | null;
                    pagination: {
                        current_page: string;
                        first_page_url: string;
                        from: string;
                        last_page: string;
                        last_page_url: string;
                        links: string;
                        links_short: string;
                        next_page_url: string;
                        path: string;
                        per_page: string;
                        prev_page_url: string;
                        to: string;
                        total: string;
                    } | null;
                    expandAutomatically: string;
                    cacheRecentlyCleared: string;
                    hasMoreResults: string;
                    percentScanned: string;
                    performance: {
                        memoryUsage: string;
                        requestTime: string;
                        version: string;
                    };
                };
            };
        };
    };
    '/-/horizon/api/masters': {
        get: {
            res: {
                200: {
                    [key: string]: unknown;
                };
            };
        };
    };
    '/-/horizon/api/monitoring': {
        get: {
            res: {
                200: {
                    [key: string]: unknown;
                };
            };
        };
        post: {
            res: {
                200: {
                    [key: string]: unknown;
                };
            };
        };
    };
    '/-/horizon/api/monitoring/{tag}': {
        get: {
            req: GetHorizonApiMonitoringByTagData;
            res: {
                200: {
                    jobs: string;
                    total: string;
                };
            };
        };
        delete: {
            req: DeleteHorizonApiMonitoringByTagData;
            res: {
                200: {
                    [key: string]: unknown;
                };
            };
        };
    };
    '/api/libraries/{library}/movies': {
        get: {
            req: GetApiLibrariesByLibraryMoviesData;
            res: {
                /**
                 * Paginated set of `MovieResource`
                 */
                200: {
                    data: Array<MovieResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total: number;
                        /**
                         * The number of items for the current page
                         */
                        count: number;
                        /**
                         * The number of items per page
                         */
                        limit: number;
                        /**
                         * The number of current page
                         */
                        currentPage: number;
                        /**
                         * The number of next page
                         */
                        nextPage: number;
                        /**
                         * The number of last page
                         */
                        lastPage: number;
                    };
                    links: {
                        first: string | null;
                        last: string | null;
                        prev: string | null;
                        next: string | null;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/libraries/{library}/movies/{movie}': {
        get: {
            req: GetApiLibrariesByLibraryMoviesByMovieData;
            res: {
                /**
                 * `MovieResource`
                 */
                200: MovieResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/opcache/status': {
        get: {
            res: {
                200: {
                    opcache_enabled: boolean;
                    file_cache: string;
                    file_cache_only: boolean;
                    cache_full: boolean;
                    restart_pending: boolean;
                    ''?: {
                        [key: string]: unknown;
                    };
                    memory_usage: {
                        used_memory: number;
                        free_memory: number;
                        wasted_memory: number;
                        current_wasted_percentage: number;
                    };
                    interned_strings_usage: {
                        buffer_size: number;
                        used_memory: number;
                        free_memory: number;
                        number_of_strings: number;
                    };
                    opcache_statistics: {
                        num_cached_scripts: number;
                        num_cached_keys: number;
                        max_cached_keys: number;
                        hits: number;
                        start_time: number;
                        last_restart_time: number;
                        oom_restarts: number;
                        hash_restarts: number;
                        manual_restarts: number;
                        misses: number;
                        blacklist_misses: number;
                        blacklist_miss_ratio: number;
                        opcache_hit_rate: number;
                    };
                    jit: {
                        enabled: boolean;
                        on: boolean;
                        kind: number;
                        opt_level: number;
                        opt_flags: number;
                        buffer_size: number;
                        buffer_free: number;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/opcache/config': {
        get: {
            res: {
                200: {
                    directives: {
                        property: number | boolean | string;
                    };
                    version: {
                        version: string;
                        opcache_product_name: string;
                    };
                    blacklist: Array<(string)>;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/opcache/clear': {
        post: {
            res: {
                200: {
                    success: boolean;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/opcache/compile': {
        post: {
            req: PostApiOpcacheCompileData;
            res: {
                200: {
                    totalFiles: number;
                    compiled: number;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/-/horizon/api/jobs/pending': {
        get: {
            req: GetHorizonApiJobsPendingData;
            res: {
                200: {
                    jobs: string;
                    total: string;
                };
            };
        };
    };
    '/api/playlists': {
        get: {
            res: {
                /**
                 * Paginated set of `PlaylistResource`
                 */
                200: {
                    data: Array<PlaylistResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total: number;
                        /**
                         * The number of items for the current page
                         */
                        count: number;
                        /**
                         * The number of items per page
                         */
                        limit: number;
                        /**
                         * The number of current page
                         */
                        currentPage: number;
                        /**
                         * The number of next page
                         */
                        nextPage: number;
                        /**
                         * The number of last page
                         */
                        lastPage: number;
                    };
                    links: {
                        first: string | null;
                        last: string | null;
                        prev: string | null;
                        next: string | null;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
        post: {
            req: PostApiPlaylistsData;
            res: {
                /**
                 * `PlaylistResource`
                 */
                200: PlaylistResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/playlists/{playlist}': {
        get: {
            req: GetApiPlaylistsByPlaylistData;
            res: {
                /**
                 * `PlaylistResource`
                 */
                200: PlaylistResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
        put: {
            req: PutApiPlaylistsByPlaylistData;
            res: {
                /**
                 * `PlaylistResource`
                 */
                200: PlaylistResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
        delete: {
            req: DeleteApiPlaylistsByPlaylistData;
            res: {
                /**
                 * No content
                 */
                204: void;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/playlists/{playlist}/songs/{song}': {
        post: {
            req: PostApiPlaylistsByPlaylistSongsBySongData;
            res: {
                200: {
                    message: 'Song added to playlist';
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
        delete: {
            req: DeleteApiPlaylistsByPlaylistSongsBySongData;
            res: {
                200: {
                    message: 'Song removed from playlist';
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/playlists/{playlist}/reorder': {
        post: {
            req: PostApiPlaylistsByPlaylistReorderData;
            res: {
                200: {
                    message: 'Playlist reordered';
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/playlists/{playlist}/collaborators': {
        post: {
            req: PostApiPlaylistsByPlaylistCollaboratorsData;
            res: {
                200: {
                    message: 'Collaborator added';
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/playlists/{playlist}/collaborators/{user}': {
        delete: {
            req: DeleteApiPlaylistsByPlaylistCollaboratorsByUserData;
            res: {
                200: {
                    message: 'Collaborator removed';
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/playlists/{playlist}/clone': {
        post: {
            req: PostApiPlaylistsByPlaylistCloneData;
            res: {
                /**
                 * `PlaylistResource`
                 */
                200: PlaylistResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/playlists/{playlist}/statistics': {
        get: {
            req: GetApiPlaylistsByPlaylistStatisticsData;
            res: {
                /**
                 * `PlaylistStatistic`
                 */
                200: PlaylistStatistic;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/playlists/{playlist}/statistics/record/view': {
        post: {
            req: PostApiPlaylistsByPlaylistStatisticsRecordViewData;
            res: {
                200: {
                    message: 'View recorded';
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/playlists/{playlist}/statistics/record/play': {
        post: {
            req: PostApiPlaylistsByPlaylistStatisticsRecordPlayData;
            res: {
                200: {
                    message: 'Play recorded';
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/playlists/{playlist}/statistics/record/share': {
        post: {
            req: PostApiPlaylistsByPlaylistStatisticsRecordShareData;
            res: {
                200: {
                    message: 'Share recorded';
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/playlists/{playlist}/statistics/record/favorite': {
        post: {
            req: PostApiPlaylistsByPlaylistStatisticsRecordFavoriteData;
            res: {
                200: {
                    message: 'Favorite recorded';
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/playlists/smart': {
        post: {
            req: PostApiPlaylistsSmartData;
            res: {
                /**
                 * `PlaylistResource`
                 */
                200: PlaylistResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/playlists/{playlist}/smart': {
        put: {
            req: PutApiPlaylistsByPlaylistSmartData;
            res: {
                /**
                 * `PlaylistResource`
                 */
                200: PlaylistResource;
                /**
                 * An error
                 */
                400: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/playlists/{playlist}/smart/sync': {
        post: {
            req: PostApiPlaylistsByPlaylistSmartSyncData;
            res: {
                200: {
                    message: 'Smart playlist synced';
                };
                /**
                 * An error
                 */
                400: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/queue-metrics': {
        get: {
            req: GetApiQueueMetricsData;
            res: {
                /**
                 * Paginated set of `QueueMonitorResource`
                 */
                200: {
                    data: Array<QueueMonitorResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total: number;
                        /**
                         * The number of items for the current page
                         */
                        count: number;
                        /**
                         * The number of items per page
                         */
                        limit: number;
                        /**
                         * The number of current page
                         */
                        currentPage: number;
                        /**
                         * The number of next page
                         */
                        nextPage: number;
                        /**
                         * The number of last page
                         */
                        lastPage: number;
                    };
                    links: {
                        first: string | null;
                        last: string | null;
                        prev: string | null;
                        next: string | null;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/queue-metrics/queues': {
        get: {
            res: {
                200: Array<{
                    name: string;
                }>;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/queue-metrics/metrics': {
        get: {
            req: GetApiQueueMetricsMetricsData;
            res: {
                200: Array<{
                    title: string;
                    value: number;
                    previousValue: number | null;
                    format: string;
                    formattedValue: string;
                    formattedPreviousValue: string | null;
                }>;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/queue-metrics/retry/{id}': {
        post: {
            req: PostApiQueueMetricsRetryByIdData;
            res: {
                200: {
    status: 'success';
    message: 'Job has been successfully retried';
} | {
    status: 'failed';
    message: 'An error occurred while executing the job';
};
                /**
                 * An error
                 */
                400: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/queue-metrics/{id}': {
        delete: {
            req: DeleteApiQueueMetricsByIdData;
            res: {
                /**
                 * No content
                 */
                204: void;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/queue-metrics/purge': {
        delete: {
            res: {
                /**
                 * No content
                 */
                204: void;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/-/horizon/api/metrics/queues': {
        get: {
            res: {
                200: Array<unknown>;
            };
        };
    };
    '/-/horizon/api/metrics/queues/{id}': {
        get: {
            req: GetHorizonApiMetricsQueuesByIdData;
            res: {
                200: {
                    [key: string]: unknown;
                };
            };
        };
    };
    '/-/horizon/api/jobs/retry/{id}': {
        post: {
            req: PostHorizonApiJobsRetryByIdData;
            res: {
                200: {
                    [key: string]: unknown;
                };
            };
        };
    };
    '/api/schemas/musicbrainz': {
        get: {
            res: {
                200: Array<Array<unknown>>;
            };
        };
    };
    '/-/horizon/api/jobs/silenced': {
        get: {
            req: GetHorizonApiJobsSilencedData;
            res: {
                200: {
                    jobs: string;
                    total: string;
                };
            };
        };
    };
    '/api/libraries/{library}/songs': {
        get: {
            req: GetApiLibrariesByLibrarySongsData;
            res: {
                /**
                 * Paginated set of `SongResource`
                 */
                200: {
                    data: Array<SongResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total: number;
                        /**
                         * The number of items for the current page
                         */
                        count: number;
                        /**
                         * The number of items per page
                         */
                        limit: number;
                        /**
                         * The number of current page
                         */
                        currentPage: number;
                        /**
                         * The number of next page
                         */
                        nextPage: number;
                        /**
                         * The number of last page
                         */
                        lastPage: number;
                    };
                    links: {
                        first: string | null;
                        last: string | null;
                        prev: string | null;
                        next: string | null;
                    };
                };
                /**
                 * An error
                 */
                400: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/libraries/{library}/songs/{publicId}': {
        get: {
            req: GetApiLibrariesByLibrarySongsByPublicIdData;
            res: {
                /**
                 * `SongResource`
                 */
                200: SongResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/stream/song/{song}/direct': {
        get: {
            req: GetApiStreamSongBySongDirectData;
            res: {
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/system-info': {
        get: {
            res: {
                200: Array<{
                    section: string;
                    values: Array<{
                        key: string;
                        value: string | number | boolean | null;
                    }>;
                }>;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/system-info/sys': {
        get: {
            res: {
                200: {
                    memoryUsage: number;
                    systemLoadAverage: Array<(number)>;
                    swooleVm: {
                        object_num: number;
                        resource_num: number;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/users': {
        get: {
            req: GetApiUsersData;
            res: {
                /**
                 * Paginated set of `UserResource`
                 */
                200: {
                    data: Array<UserResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total: number;
                        /**
                         * The number of items for the current page
                         */
                        count: number;
                        /**
                         * The number of items per page
                         */
                        limit: number;
                        /**
                         * The number of current page
                         */
                        currentPage: number;
                        /**
                         * The number of next page
                         */
                        nextPage: number;
                        /**
                         * The number of last page
                         */
                        lastPage: number;
                    };
                    links: {
                        first: string | null;
                        last: string | null;
                        prev: string | null;
                        next: string | null;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
        post: {
            req: PostApiUsersData;
            res: {
                /**
                 * `UserResource`
                 */
                200: UserResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/users/{user}': {
        patch: {
            req: PatchApiUsersByUserData;
            res: {
                /**
                 * `UserResource`
                 */
                200: UserResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
        get: {
            req: GetApiUsersByUserData;
            res: {
                /**
                 * `UserResource`
                 */
                200: UserResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
        delete: {
            req: DeleteApiUsersByUserData;
            res: {
                /**
                 * No content
                 */
                204: void;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/users/me': {
        get: {
            res: {
                /**
                 * `UserResource`
                 */
                200: UserResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/api/users/tokens/{user}': {
        get: {
            req: GetApiUsersTokensByUserData;
            res: {
                /**
                 * Paginated set of `PersonalAccessTokenViewResource`
                 */
                200: {
                    data: Array<PersonalAccessTokenViewResource>;
                    meta: {
                        /**
                         * Total number of items being paginated.
                         */
                        total: number;
                        /**
                         * The number of items for the current page
                         */
                        count: number;
                        /**
                         * The number of items per page
                         */
                        limit: number;
                        /**
                         * The number of current page
                         */
                        currentPage: number;
                        /**
                         * The number of next page
                         */
                        nextPage: number;
                        /**
                         * The number of last page
                         */
                        lastPage: number;
                    };
                    links: {
                        first: string | null;
                        last: string | null;
                        prev: string | null;
                        next: string | null;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/api/users/tokens/{token}': {
        delete: {
            req: DeleteApiUsersTokensByTokenData;
            res: {
                /**
                 * No content
                 */
                204: void;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/-/horizon/api/workload': {
        get: {
            res: {
                200: Array<unknown>;
            };
        };
    };
};