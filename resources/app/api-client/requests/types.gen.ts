// This file is auto-generated by @hey-api/openapi-ts

export type AlbumResource = {
    title: string;
    slug: string;
    year: number | null;
    directory: string;
    createdAt: string | null;
    updatedAt: string | null;
    /**
     * Cover relation
     */
    cover?: ImageResource;
    /**
     * Album artists relation
     */
    artists?: Array<ArtistResource>;
    /**
     * Songs relation
     */
    songs?: Array<SongResource>;
    genres?: Array<{
        slug: string;
        name: string;
    }>;
};

export type AlbumWithoutSongsResource = {
    title: string;
    slug: string;
    year: number | null;
    directory: string;
    createdAt: string | null;
    updatedAt: string | null;
    /**
     * Cover relation
     */
    cover?: ImageResource;
    /**
     * Album artist relation
     */
    artists?: ArtistResource;
};

export type ArtistResource = {
    name: string;
    slug: string;
    createdAt: string | null;
    updatedAt: string | null;
    /**
     * Portrait relation
     */
    portrait?: ImageResource;
};

export type AuthenticateUsingPasskeyRequest = {
    start_authentication_response: string;
};

export type CreateLibraryRequest = {
    name: string;
    path: string;
    type: LibraryType;
    order: number;
};

export type CreateUserRequest = {
    name: string;
    email: string;
    password: string;
};

export type ForgotPasswordRequest = {
    email: string;
    url?: string;
};

export type GenreResource = {
    name: string;
    slug: string;
    createdAt: string | null;
    updatedAt: string | null;
    /**
     * Songs relation
     */
    songs?: Array<SongResource>;
};

export type ImageResource = {
    public_id: string;
    path: string;
    extension: string;
    size: number;
    mime_type: string;
    width: number;
    height: number;
    blurhash: string;
    url: string;
};

export type LibraryResource = {
    name: string;
    slug: string;
    path: string;
    type: string;
    order: number;
    lastScan: string | null;
    createdAt: string | null;
    updatedAt: string | null;
};

export type LibraryType = 'music' | 'podcast' | 'audiobook' | 'movie' | 'tv_show';

export type LoginRequest = {
    email: string;
    password: string;
    remember?: boolean;
};

export type NewAccessTokenResource = {
    token: string;
    abilities: string;
    expiresAt: string;
};

export type PersonalAccessTokenViewResource = {
    id: number;
    name: string;
    abilities: Array<(string)> | null;
    userAgent: string | null;
    clientName: string | null;
    clientVersion: string | null;
    clientType: string | null;
    deviceOperatingSystem: string | null;
    deviceName: string | null;
    lastUsedAt: string | null;
    expiresAt: string | null;
    createdAt: string | null;
    updatedAt: string | null;
};

export type QueueMonitorResource = {
    id: number;
    job_id: string;
    name: string | null;
    queue: string | null;
    started_at: string | null;
    started_at_exact: string | null;
    finished_at: string | null;
    finished_at_exact: string | null;
    attempt: number;
    progress: number | null;
    exception: Array<(string)> | null;
    exception_class: string | null;
    data: string | null;
    status: string;
    job_uuid: string | null;
    retried: boolean;
    queued_at: string | null;
};

export type RegisterRequest = {
    email: string;
    password: string;
    password_confirmation: string;
};

export type ResetPasswordRequest = {
    email: string;
    token: string;
    password: string;
    password_confirmation: string;
};

export type RetryJobRequest = {
    id?: number;
};

export type SongResource = {
    public_id: string;
    title: string;
    year: number | null;
    comment: string | null;
    disc: number | null;
    length: string | null;
    durationHuman: string;
    lyrics: string | null;
    lyricsExist: boolean;
    modifiedTime: number | null;
    path: string;
    track: number | null;
    size: number;
    sizeHuman: string;
    mimeType: string;
    hash: string | null;
    stream?: string | null;
    librarySlug?: string;
    createdAt: string | null;
    updatedAt: string | null;
    album?: AlbumWithoutSongsResource;
    artists?: Array<ArtistResource>;
};

export type StorePasskeyRequest = {
    name: string;
    passkey: string;
};

export type UpdateGenreRequest = {
    name: string;
};

export type UpdateLibraryRequest = {
    name?: string;
    path?: string;
    type?: LibraryType;
    order?: number;
};

export type UpdateUserRequest = {
    email?: string;
    password?: string;
};

export type UserResource = {
    name: string;
    email: string;
    isAdmin: boolean;
    createdAt: string | null;
    updatedAt: string | null;
};

export type AlbumsIndexData = {
    /**
     * Comma seperated string of fields you want to select. If nothing is defined `select *` is default.
     * - title
     * - slug
     * - year
     * - directory
     */
    fields?: string;
    /**
     * _Extension_ Comma seperated list of genres
     */
    genres?: string;
    /**
     * The library slug
     */
    library: string;
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Current page
     */
    page?: number;
    /**
     * Comma seperated string of relations
     * - artists
     * - cover
     * - library
     * - songs
     */
    relations?: string;
};

export type AlbumsIndexResponse = {
    data: Array<AlbumResource>;
    /**
     * Total number of items being paginated.
     */
    total: number;
    /**
     * The number of items for the current page
     */
    count: number;
    /**
     * The number of items per page
     */
    limit: number;
    /**
     * The number of current page
     */
    currentPage: number;
    /**
     * The number of next page
     */
    nextPage: number;
    /**
     * The number of last page
     */
    lastPage: number;
};

export type AlbumsShowData = {
    /**
     * The album slug
     */
    album: string;
    /**
     * The library slug
     */
    library: string;
};

export type AlbumsShowResponse = AlbumResource;

export type ArtistsIndexData = {
    /**
     * Comma seperated string of fields you want to select. If nothing is defined `select *` is default.
     * - title
     * - slug
     */
    fields?: string;
    /**
     * _Extension_ Comma seperated list of genres
     */
    genres?: string;
    library: string;
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Current page
     */
    page?: number;
    /**
     * Comma seperated string of relations
     * - portrait
     * - songs
     */
    relations?: string;
};

export type ArtistsIndexResponse = {
    data: Array<ArtistResource>;
    /**
     * Total number of items being paginated.
     */
    total: number;
    /**
     * The number of items for the current page
     */
    count: number;
    /**
     * The number of items per page
     */
    limit: number;
    /**
     * The number of current page
     */
    currentPage: number;
    /**
     * The number of next page
     */
    nextPage: number;
    /**
     * The number of last page
     */
    lastPage: number;
};

export type ArtistsShowData = {
    /**
     * The artist slug
     */
    artist: string;
    library: string;
};

export type ArtistsShowResponse = ArtistResource;

export type AuthLoginData = {
    requestBody?: LoginRequest;
};

export type AuthLoginResponse = {
    accessToken: NewAccessTokenResource;
    refreshToken: NewAccessTokenResource;
};

export type AuthRefreshTokenResponse = {
    accessToken: NewAccessTokenResource;
};

export type AuthStreamTokenResponse = {
    streamToken: NewAccessTokenResource;
};

export type AuthRegisterData = {
    requestBody?: RegisterRequest & {
    name?: string;
};
};

export type AuthRegisterResponse = {
    accessToken: NewAccessTokenResource;
    refreshToken: NewAccessTokenResource;
};

export type AuthForgotPasswordData = {
    requestBody?: ForgotPasswordRequest;
};

export type AuthForgotPasswordResponse = {
    message: string;
};

export type AuthResetPasswordData = {
    requestBody?: ResetPasswordRequest;
};

export type AuthResetPasswordResponse = {
    message: string;
};

export type AuthVerifyResponse = UserResource;

export type AuthPasskeyOptionsResponse = {
    challenge: string;
    rpId: string;
    allowCredentials: Array<(string)>;
};

export type AuthPasskeyLoginData = {
    requestBody?: AuthenticateUsingPasskeyRequest;
};

export type AuthPasskeyLoginResponse = {
    accessToken: {
        [key: string]: unknown;
    };
    refreshToken: {
        [key: string]: unknown;
    };
} | string;

export type AuthPasskeyRegisterOptionsResponse = string | {
    [key: string]: unknown;
};

export type AuthPasskeyRegisterData = {
    requestBody?: StorePasskeyRequest;
};

export type AuthPasskeyRegisterResponse = {
    message: string;
};

export type GenresIndexData = {
    /**
     * Comma seperated string of fields you want to select. If nothing is defined `select *` is default.
     * - name
     * - slug
     */
    fields?: string;
    /**
     * Constrain the query to only fetch genres that are contained within the given library
     */
    librarySlug?: string;
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Current page
     */
    page?: number;
    /**
     * Comma seperated string of relations
     * - songs
     */
    relations?: string;
};

export type GenresIndexResponse = {
    data: Array<GenreResource>;
    /**
     * Total number of items being paginated.
     */
    total: number;
    /**
     * The number of items for the current page
     */
    count: number;
    /**
     * The number of items per page
     */
    limit: number;
    /**
     * The number of current page
     */
    currentPage: number;
    /**
     * The number of next page
     */
    nextPage: number;
    /**
     * The number of last page
     */
    lastPage: number;
};

export type GenresShowData = {
    /**
     * The genre slug
     */
    genre: string;
};

export type GenresShowResponse = GenreResource;

export type GenresUpdateData = {
    /**
     * The genre slug
     */
    genre: string;
    requestBody?: UpdateGenreRequest;
};

export type GenresUpdateResponse = GenreResource;

export type GenresDestroyData = {
    /**
     * The genre slug
     */
    genre: string;
};

export type GenresDestroyResponse = null;

export type ImageServeData = {
    /**
     * The image public id
     */
    image: string;
};

export type ImageServeResponse = string;

export type JobLibraryScanData = {
    slug: string;
};

export type JobLibraryScanResponse = {
    message: string;
};

export type LibrariesIndexData = {
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Current page
     */
    page?: number;
};

export type LibrariesIndexResponse = {
    data: Array<LibraryResource>;
    /**
     * Total number of items being paginated.
     */
    total: number;
    /**
     * The number of items for the current page
     */
    count: number;
    /**
     * The number of items per page
     */
    limit: number;
    /**
     * The number of current page
     */
    currentPage: number;
    /**
     * The number of next page
     */
    nextPage: number;
    /**
     * The number of last page
     */
    lastPage: number;
};

export type LibraryCreateData = {
    requestBody?: CreateLibraryRequest;
};

export type LibraryCreateResponse = LibraryResource;

export type LibraryUpdateData = {
    requestBody?: UpdateLibraryRequest;
};

export type LibraryUpdateResponse = LibraryResource;

export type LibraryDeleteResponse = null;

export type OpCacheGetStatusResponse = {
    opcache_enabled: boolean;
    file_cache: string;
    file_cache_only: boolean;
    cache_full: boolean;
    restart_pending: boolean;
    ''?: {
        [key: string]: unknown;
    };
    memory_usage: {
        used_memory: number;
        free_memory: number;
        wasted_memory: number;
        current_wasted_percentage: number;
    };
    interned_strings_usage: {
        buffer_size: number;
        used_memory: number;
        free_memory: number;
        number_of_strings: number;
    };
    opcache_statistics: {
        num_cached_scripts: number;
        num_cached_keys: number;
        max_cached_keys: number;
        hits: number;
        start_time: number;
        last_restart_time: number;
        oom_restarts: number;
        hash_restarts: number;
        manual_restarts: number;
        misses: number;
        blacklist_misses: number;
        blacklist_miss_ratio: number;
        opcache_hit_rate: number;
    };
    jit: {
        enabled: boolean;
        on: boolean;
        kind: number;
        opt_level: number;
        opt_flags: number;
        buffer_size: number;
        buffer_free: number;
    };
};

export type OpcacheGetConfigResponse = {
    directives: {
        property: number | boolean | string;
    };
    version: {
        version: string;
        opcache_product_name: string;
    };
    blacklist: Array<(string)>;
};

export type OpcacheClearResponse = {
    success: boolean;
};

export type OpcacheCompileData = {
    force?: string;
    requestBody?: {
        [key: string]: unknown;
    };
};

export type OpcacheCompileResponse = {
    totalFiles: number;
    compiled: number;
};

export type QueueMetricsShowData = {
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Name of the job
     */
    name?: string;
    /**
     * Current page
     */
    page?: number;
    /**
     * Name of the queue
     */
    queue?: string;
    /**
     * Order queued jobs first
     */
    queuedFirst?: boolean;
    /**
     * MonitorStatus
     * - 0=RUNNING
     * - 1=SUCCEEDED
     * - 2=FAILED
     * - 3=STALE
     * - 4=QUEUED
     */
    status?: 'running' | 'succeeded' | 'failed' | 'stale' | 'queued';
};

export type QueueMetricsShowResponse = {
    data: Array<QueueMonitorResource>;
    /**
     * Total number of items being paginated.
     */
    total: number;
    /**
     * The number of items for the current page
     */
    count: number;
    /**
     * The number of items per page
     */
    limit: number;
    /**
     * The number of current page
     */
    currentPage: number;
    /**
     * The number of next page
     */
    nextPage: number;
    /**
     * The number of last page
     */
    lastPage: number;
};

export type QueueMetricsQueuesResponse = Array<{
    name: string;
}>;

export type QueueMetricsMetricsData = {
    /**
     * Days to aggregate
     */
    aggregateDays?: number;
};

export type QueueMetricsMetricsResponse = Array<{
    title: string;
    value: number;
    previousValue: number | null;
    format: string;
    formattedValue: string;
    formattedPreviousValue: string | null;
}>;

export type QueueMetricsRetryJobData = {
    id: string;
    requestBody?: RetryJobRequest;
};

export type QueueMetricsRetryJobResponse = {
    status: string;
    message: string;
};

export type QueueMetricsDeleteData = {
    id: string;
};

export type QueueMetricsDeleteResponse = null;

export type QueueMetricsPurgeResponse = null;

export type SongsIndexData = {
    /**
     * Comma seperated list of genre names You can only search for names or slugs. Not both.
     */
    genreNames?: string;
    /**
     * Comma seperated list of genre slugs
     */
    genreSlugs?: string;
    /**
     * The library slug
     */
    library: string;
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Current page
     */
    page?: number;
    /**
     * Comma seperated string of relations
     * - album
     * - artists
     * - album.albumArtist
     * - genres
     */
    relations?: string;
};

export type SongsIndexResponse = {
    data: Array<SongResource>;
    /**
     * Total number of items being paginated.
     */
    total: number;
    /**
     * The number of items for the current page
     */
    count: number;
    /**
     * The number of items per page
     */
    limit: number;
    /**
     * The number of current page
     */
    currentPage: number;
    /**
     * The number of next page
     */
    nextPage: number;
    /**
     * The number of last page
     */
    lastPage: number;
};

export type SongsShowData = {
    /**
     * The library slug
     */
    library: string;
    publicId: string;
    /**
     * Comma seperated string of relations
     * - album
     * - artists
     * - albumArtist
     * - genres
     */
    relations?: string;
};

export type SongsShowResponse = SongResource;

export type SongsStreamData = {
    /**
     * The library slug
     */
    library: string;
    /**
     * The song public id
     */
    song: string;
};

export type SongsStreamResponse = {
    [key: string]: unknown;
};

export type SystemInfoPhpResponse = Array<{
    section: string;
    values: Array<{
        key: string;
        value: string | number | boolean | null;
    }>;
}>;

export type SystemInfoSysResponse = {
    memoryUsage: number;
    systemLoadAverage: Array<(number)>;
    swooleVm: {
        object_num: number;
        resource_num: number;
    };
};

export type UsersIndexData = {
    /**
     * JSON object
     */
    filterModes?: string;
    /**
     * JSON object
     */
    filters?: string;
    globalFilter?: string;
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Current page
     */
    page?: number;
    /**
     * JSON object
     */
    sorting?: string;
};

export type UsersIndexResponse = {
    data: Array<UserResource>;
    /**
     * Total number of items being paginated.
     */
    total: number;
    /**
     * The number of items for the current page
     */
    count: number;
    /**
     * The number of items per page
     */
    limit: number;
    /**
     * The number of current page
     */
    currentPage: number;
    /**
     * The number of next page
     */
    nextPage: number;
    /**
     * The number of last page
     */
    lastPage: number;
};

export type UsersStoreData = {
    requestBody?: CreateUserRequest;
};

export type UsersStoreResponse = UserResource;

export type UsersUpdateData = {
    requestBody?: UpdateUserRequest;
    /**
     * The user ID
     */
    user: number;
};

export type UsersUpdateResponse = UserResource;

export type UsersShowData = {
    /**
     * The user ID
     */
    user: number;
};

export type UsersShowResponse = UserResource;

export type UsersDestroyData = {
    user: string;
};

export type UsersDestroyResponse = null;

export type UsersMeResponse = UserResource;

export type UserTokenGetUserTokensData = {
    page?: number;
    perPage?: number;
    user: string;
};

export type UserTokenGetUserTokensResponse = {
    data: Array<PersonalAccessTokenViewResource>;
    /**
     * Total number of items being paginated.
     */
    total: number;
    /**
     * The number of items for the current page
     */
    count: number;
    /**
     * The number of items per page
     */
    limit: number;
    /**
     * The number of current page
     */
    currentPage: number;
    /**
     * The number of next page
     */
    nextPage: number;
    /**
     * The number of last page
     */
    lastPage: number;
};

export type UserTokenRevokeTokenData = {
    /**
     * The token ID
     */
    token: number;
};

export type UserTokenRevokeTokenResponse = null;

export type $OpenApiTs = {
    '/libraries/{library}/albums': {
        get: {
            req: AlbumsIndexData;
            res: {
                /**
                 * Json paginated set of `AlbumResource`
                 */
                200: {
                    data: Array<AlbumResource>;
                    /**
                     * Total number of items being paginated.
                     */
                    total: number;
                    /**
                     * The number of items for the current page
                     */
                    count: number;
                    /**
                     * The number of items per page
                     */
                    limit: number;
                    /**
                     * The number of current page
                     */
                    currentPage: number;
                    /**
                     * The number of next page
                     */
                    nextPage: number;
                    /**
                     * The number of last page
                     */
                    lastPage: number;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/libraries/{library}/albums/{album}': {
        get: {
            req: AlbumsShowData;
            res: {
                /**
                 * `AlbumResource`
                 */
                200: AlbumResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/libraries/{library}/artists': {
        get: {
            req: ArtistsIndexData;
            res: {
                /**
                 * Json paginated set of `ArtistResource`
                 */
                200: {
                    data: Array<ArtistResource>;
                    /**
                     * Total number of items being paginated.
                     */
                    total: number;
                    /**
                     * The number of items for the current page
                     */
                    count: number;
                    /**
                     * The number of items per page
                     */
                    limit: number;
                    /**
                     * The number of current page
                     */
                    currentPage: number;
                    /**
                     * The number of next page
                     */
                    nextPage: number;
                    /**
                     * The number of last page
                     */
                    lastPage: number;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/libraries/{library}/artists/{artist}': {
        get: {
            req: ArtistsShowData;
            res: {
                /**
                 * `ArtistResource`
                 */
                200: ArtistResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/auth/login': {
        post: {
            req: AuthLoginData;
            res: {
                200: {
                    accessToken: NewAccessTokenResource;
                    refreshToken: NewAccessTokenResource;
                };
                /**
                 * An error
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/auth/refreshToken': {
        post: {
            res: {
                200: {
                    accessToken: NewAccessTokenResource;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/auth/streamToken': {
        post: {
            res: {
                200: {
                    streamToken: NewAccessTokenResource;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/auth/register': {
        post: {
            req: AuthRegisterData;
            res: {
                200: {
                    accessToken: NewAccessTokenResource;
                    refreshToken: NewAccessTokenResource;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/auth/forgotPassword': {
        post: {
            req: AuthForgotPasswordData;
            res: {
                200: {
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/auth/resetPassword': {
        post: {
            req: AuthResetPasswordData;
            res: {
                200: {
                    message: string;
                };
                /**
                 * An error
                 */
                400: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/auth/verify/:id/:hash': {
        post: {
            res: {
                /**
                 * `UserResource`
                 */
                200: UserResource;
            };
        };
    };
    '/passkey': {
        get: {
            res: {
                200: {
                    challenge: string;
                    rpId: string;
                    allowCredentials: Array<(string)>;
                };
            };
        };
        post: {
            req: AuthPasskeyLoginData;
            res: {
                200: {
    accessToken: {
        [key: string]: unknown;
    };
    refreshToken: {
        [key: string]: unknown;
    };
} | string;
                401: {
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/passkey/register': {
        get: {
            res: {
                200: string | {
    [key: string]: unknown;
};
                /**
                 * An error
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
        post: {
            req: AuthPasskeyRegisterData;
            res: {
                200: {
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
                500: {
                    error: string;
                };
            };
        };
    };
    '/genres': {
        get: {
            req: GenresIndexData;
            res: {
                /**
                 * Json paginated set of `GenreResource`
                 */
                200: {
                    data: Array<GenreResource>;
                    /**
                     * Total number of items being paginated.
                     */
                    total: number;
                    /**
                     * The number of items for the current page
                     */
                    count: number;
                    /**
                     * The number of items per page
                     */
                    limit: number;
                    /**
                     * The number of current page
                     */
                    currentPage: number;
                    /**
                     * The number of next page
                     */
                    nextPage: number;
                    /**
                     * The number of last page
                     */
                    lastPage: number;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/genres/{genre}': {
        get: {
            req: GenresShowData;
            res: {
                /**
                 * `GenreResource`
                 */
                200: GenreResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
        patch: {
            req: GenresUpdateData;
            res: {
                /**
                 * `GenreResource`
                 */
                200: GenreResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
        delete: {
            req: GenresDestroyData;
            res: {
                /**
                 * No content
                 */
                204: null;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/images/{image}': {
        get: {
            req: ImageServeData;
            res: {
                200: string;
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/jobs/scanLibrary/{slug}': {
        post: {
            req: JobLibraryScanData;
            res: {
                200: {
                    message: string;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/libraries': {
        get: {
            req: LibrariesIndexData;
            res: {
                /**
                 * Json paginated set of `LibraryResource`
                 */
                200: {
                    data: Array<LibraryResource>;
                    /**
                     * Total number of items being paginated.
                     */
                    total: number;
                    /**
                     * The number of items for the current page
                     */
                    count: number;
                    /**
                     * The number of items per page
                     */
                    limit: number;
                    /**
                     * The number of current page
                     */
                    currentPage: number;
                    /**
                     * The number of next page
                     */
                    nextPage: number;
                    /**
                     * The number of last page
                     */
                    lastPage: number;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
        post: {
            req: LibraryCreateData;
            res: {
                /**
                 * `LibraryResource`
                 */
                200: LibraryResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/libraries/:slug': {
        patch: {
            req: LibraryUpdateData;
            res: {
                /**
                 * `LibraryResource`
                 */
                200: LibraryResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
        delete: {
            res: {
                /**
                 * No content
                 */
                204: null;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/opcache/status': {
        get: {
            res: {
                200: {
                    opcache_enabled: boolean;
                    file_cache: string;
                    file_cache_only: boolean;
                    cache_full: boolean;
                    restart_pending: boolean;
                    ''?: {
                        [key: string]: unknown;
                    };
                    memory_usage: {
                        used_memory: number;
                        free_memory: number;
                        wasted_memory: number;
                        current_wasted_percentage: number;
                    };
                    interned_strings_usage: {
                        buffer_size: number;
                        used_memory: number;
                        free_memory: number;
                        number_of_strings: number;
                    };
                    opcache_statistics: {
                        num_cached_scripts: number;
                        num_cached_keys: number;
                        max_cached_keys: number;
                        hits: number;
                        start_time: number;
                        last_restart_time: number;
                        oom_restarts: number;
                        hash_restarts: number;
                        manual_restarts: number;
                        misses: number;
                        blacklist_misses: number;
                        blacklist_miss_ratio: number;
                        opcache_hit_rate: number;
                    };
                    jit: {
                        enabled: boolean;
                        on: boolean;
                        kind: number;
                        opt_level: number;
                        opt_flags: number;
                        buffer_size: number;
                        buffer_free: number;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/opcache/config': {
        get: {
            res: {
                200: {
                    directives: {
                        property: number | boolean | string;
                    };
                    version: {
                        version: string;
                        opcache_product_name: string;
                    };
                    blacklist: Array<(string)>;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/opcache/clear': {
        post: {
            res: {
                200: {
                    success: boolean;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/opcache/compile': {
        post: {
            req: OpcacheCompileData;
            res: {
                200: {
                    totalFiles: number;
                    compiled: number;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/queue-metrics': {
        get: {
            req: QueueMetricsShowData;
            res: {
                /**
                 * Json paginated set of `QueueMonitorResource`
                 */
                200: {
                    data: Array<QueueMonitorResource>;
                    /**
                     * Total number of items being paginated.
                     */
                    total: number;
                    /**
                     * The number of items for the current page
                     */
                    count: number;
                    /**
                     * The number of items per page
                     */
                    limit: number;
                    /**
                     * The number of current page
                     */
                    currentPage: number;
                    /**
                     * The number of next page
                     */
                    nextPage: number;
                    /**
                     * The number of last page
                     */
                    lastPage: number;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/queue-metrics/queues': {
        get: {
            res: {
                200: Array<{
                    name: string;
                }>;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/queue-metrics/metrics': {
        get: {
            req: QueueMetricsMetricsData;
            res: {
                200: Array<{
                    title: string;
                    value: number;
                    previousValue: number | null;
                    format: string;
                    formattedValue: string;
                    formattedPreviousValue: string | null;
                }>;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/queue-metrics/retry/{id}': {
        post: {
            req: QueueMetricsRetryJobData;
            res: {
                200: {
    status: string;
    message: string;
};
                /**
                 * An error
                 */
                400: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/queue-metrics/{id}': {
        delete: {
            req: QueueMetricsDeleteData;
            res: {
                /**
                 * No content
                 */
                204: null;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/queue-metrics/purge': {
        delete: {
            res: {
                /**
                 * No content
                 */
                204: null;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/libraries/{library}/songs': {
        get: {
            req: SongsIndexData;
            res: {
                /**
                 * Json paginated set of `SongResource`
                 */
                200: {
                    data: Array<SongResource>;
                    /**
                     * Total number of items being paginated.
                     */
                    total: number;
                    /**
                     * The number of items for the current page
                     */
                    count: number;
                    /**
                     * The number of items per page
                     */
                    limit: number;
                    /**
                     * The number of current page
                     */
                    currentPage: number;
                    /**
                     * The number of next page
                     */
                    nextPage: number;
                    /**
                     * The number of last page
                     */
                    lastPage: number;
                };
                /**
                 * An error
                 */
                400: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/libraries/{library}/songs/{publicId}': {
        get: {
            req: SongsShowData;
            res: {
                /**
                 * `SongResource`
                 */
                200: SongResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/libraries/{library}/songs/stream/song/{song}/direct': {
        get: {
            req: SongsStreamData;
            res: {
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/system-info': {
        get: {
            res: {
                200: Array<{
                    section: string;
                    values: Array<{
                        key: string;
                        value: string | number | boolean | null;
                    }>;
                }>;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/system-info/sys': {
        get: {
            res: {
                200: {
                    memoryUsage: number;
                    systemLoadAverage: Array<(number)>;
                    swooleVm: {
                        object_num: number;
                        resource_num: number;
                    };
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/users': {
        get: {
            req: UsersIndexData;
            res: {
                /**
                 * Json paginated set of `UserResource`
                 */
                200: {
                    data: Array<UserResource>;
                    /**
                     * Total number of items being paginated.
                     */
                    total: number;
                    /**
                     * The number of items for the current page
                     */
                    count: number;
                    /**
                     * The number of items per page
                     */
                    limit: number;
                    /**
                     * The number of current page
                     */
                    currentPage: number;
                    /**
                     * The number of next page
                     */
                    nextPage: number;
                    /**
                     * The number of last page
                     */
                    lastPage: number;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
        post: {
            req: UsersStoreData;
            res: {
                /**
                 * `UserResource`
                 */
                200: UserResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/users/{user}': {
        patch: {
            req: UsersUpdateData;
            res: {
                /**
                 * `UserResource`
                 */
                200: UserResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
        get: {
            req: UsersShowData;
            res: {
                /**
                 * `UserResource`
                 */
                200: UserResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
        delete: {
            req: UsersDestroyData;
            res: {
                /**
                 * No content
                 */
                204: null;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/users/me': {
        get: {
            res: {
                /**
                 * `UserResource`
                 */
                200: UserResource;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
    '/users/tokens/{user}': {
        get: {
            req: UserTokenGetUserTokensData;
            res: {
                /**
                 * Json paginated set of `PersonalAccessTokenViewResource`
                 */
                200: {
                    data: Array<PersonalAccessTokenViewResource>;
                    /**
                     * Total number of items being paginated.
                     */
                    total: number;
                    /**
                     * The number of items for the current page
                     */
                    count: number;
                    /**
                     * The number of items per page
                     */
                    limit: number;
                    /**
                     * The number of current page
                     */
                    currentPage: number;
                    /**
                     * The number of next page
                     */
                    nextPage: number;
                    /**
                     * The number of last page
                     */
                    lastPage: number;
                };
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Authorization error
                 */
                403: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Validation error
                 */
                422: {
                    /**
                     * Errors overview.
                     */
                    message: string;
                    /**
                     * A detailed description of each field that failed validation.
                     */
                    errors: {
                        [key: string]: Array<(string)>;
                    };
                };
            };
        };
    };
    '/users/tokens/{token}': {
        delete: {
            req: UserTokenRevokeTokenData;
            res: {
                /**
                 * No content
                 */
                204: null;
                /**
                 * Unauthenticated
                 */
                401: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
                /**
                 * Not found
                 */
                404: {
                    /**
                     * Error overview.
                     */
                    message: string;
                };
            };
        };
    };
};