// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AlbumsIndexData, AlbumsIndexResponse, AlbumsShowData, AlbumsShowResponse, ArtistsIndexData, ArtistsIndexResponse, ArtistsShowData, ArtistsShowResponse, AuthLoginData, AuthLoginResponse, AuthRefreshTokenResponse, AuthStreamTokenResponse, AuthRegisterData, AuthRegisterResponse, AuthForgotPasswordData, AuthForgotPasswordResponse, AuthResetPasswordData, AuthResetPasswordResponse, AuthVerifyResponse, AuthLogoutData, AuthLogoutResponse, AuthPasskeyOptionsResponse, AuthPasskeyLoginData, AuthPasskeyLoginResponse, AuthPasskeyRegisterOptionsResponse, AuthPasskeyRegisterData, AuthPasskeyRegisterResponse, HorizonJobsBatchesIndexResponse, HorizonJobsBatchesShowData, HorizonJobsBatchesShowResponse, HorizonJobsBatchesRetryData, HorizonJobsBatchesRetryResponse, HorizonCompletedJobsIndexData, HorizonCompletedJobsIndexResponse, HorizonStatsIndexResponse, HorizonFailedJobsIndexData, HorizonFailedJobsIndexResponse, HorizonFailedJobsShowData, HorizonFailedJobsShowResponse, LogViewerFilesResponse, LogViewerFilesRequestDownloadData, LogViewerFilesRequestDownloadResponse, LogViewerFilesClearCacheData, LogViewerFilesClearCacheResponse, LogViewerFilesDeleteData, LogViewerFilesDeleteResponse, LogViewerFilesClearCacheAllResponse, LogViewerFilesDeleteMultipleFilesData, LogViewerFilesDeleteMultipleFilesResponse, LogViewerFilesDownloadData, LogViewerFilesDownloadResponse, LogViewerFoldersResponse, LogViewerFoldersRequestDownloadData, LogViewerFoldersRequestDownloadResponse, LogViewerFoldersClearCacheData, LogViewerFoldersClearCacheResponse, LogViewerFoldersDeleteData, LogViewerFoldersDeleteResponse, LogViewerFoldersDownloadData, LogViewerFoldersDownloadResponse, GenresIndexData, GenresIndexResponse, GenresShowData, GenresShowResponse, GenresUpdateData, GenresUpdateResponse, GenresDestroyData, GenresDestroyResponse, LogViewerHostsResponse, ImageServeData, ImageServeResponse, JobLibraryScanData, JobLibraryScanResponse, HorizonJobsMetricsIndexResponse, HorizonJobsMetricsShowData, HorizonJobsMetricsShowResponse, HorizonJobsShowData, HorizonJobsShowResponse, LibrariesIndexData, LibrariesIndexResponse, LibraryCreateData, LibraryCreateResponse, LibraryShowData, LibraryShowResponse, LibraryUpdateData, LibraryUpdateResponse, LibraryDeleteResponse, LogViewerLogsData, LogViewerLogsResponse, HorizonMastersIndexResponse, HorizonMonitoringIndexResponse, HorizonMonitoringStoreResponse, HorizonMonitoringTagPaginateData, HorizonMonitoringTagPaginateResponse, HorizonMonitoringTagDestroyData, HorizonMonitoringTagDestroyResponse, OpCacheGetStatusResponse, OpcacheGetConfigResponse, OpcacheClearResponse, OpcacheCompileData, OpcacheCompileResponse, HorizonPendingJobsIndexData, HorizonPendingJobsIndexResponse, QueueMetricsShowData, QueueMetricsShowResponse, QueueMetricsQueuesResponse, QueueMetricsMetricsData, QueueMetricsMetricsResponse, QueueMetricsRetryJobData, QueueMetricsRetryJobResponse, QueueMetricsDeleteData, QueueMetricsDeleteResponse, QueueMetricsPurgeResponse, HorizonQueuesMetricsIndexResponse, HorizonQueuesMetricsShowData, HorizonQueuesMetricsShowResponse, HorizonRetryJobsShowData, HorizonRetryJobsShowResponse, HorizonSilencedJobsIndexData, HorizonSilencedJobsIndexResponse, SongsIndexData, SongsIndexResponse, SongsShowData, SongsShowResponse, SongsStreamData, SongsStreamResponse, SystemInfoPhpResponse, SystemInfoSysResponse, UsersIndexData, UsersIndexResponse, UsersStoreData, UsersStoreResponse, UsersUpdateData, UsersUpdateResponse, UsersShowData, UsersShowResponse, UsersDestroyData, UsersDestroyResponse, UsersMeResponse, UserTokenGetUserTokensData, UserTokenGetUserTokensResponse, UserTokenRevokeTokenData, UserTokenRevokeTokenResponse, HorizonWorkloadIndexResponse } from './types.gen';

export class AlbumService {
    /**
     * Get a collection of albums
     * @param data The data for the request.
     * @param data.library The library slug
     * @param data.fields Comma seperated string of fields you want to select. If nothing is defined `select *` is default.
     * - title
     * - slug
     * - year
     * - directory
     * @param data.relations Comma seperated string of relations
     * - artists
     * - cover
     * - library
     * - songs
     * @param data.page Current page
     * @param data.limit Items per page
     * @param data.genres _Extension_ Comma seperated list of genres
     * @returns unknown Paginated set of `AlbumResource`
     * @throws ApiError
     */
    public static albumsIndex(data: AlbumsIndexData): CancelablePromise<AlbumsIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries/{library}/albums',
            path: {
                library: data.library
            },
            query: {
                fields: data.fields,
                relations: data.relations,
                page: data.page,
                limit: data.limit,
                genres: data.genres
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get an album
     * @param data The data for the request.
     * @param data.library The library slug
     * @param data.album The album slug
     * @returns AlbumResource `AlbumResource`
     * @throws ApiError
     */
    public static albumsShow(data: AlbumsShowData): CancelablePromise<AlbumsShowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries/{library}/albums/{album}',
            path: {
                library: data.library,
                album: data.album
            },
            errors: {
                401: 'Unauthenticated',
                404: 'Not found'
            }
        });
    }
    
}

export class ArtistService {
    /**
     * Get a collection of artists
     * @param data The data for the request.
     * @param data.library
     * @param data.fields Comma seperated string of fields you want to select. If nothing is defined `select *` is default.
     * - title
     * - slug
     * @param data.relations Comma seperated string of relations
     * - portrait
     * - songs
     * @param data.page Current page
     * @param data.limit Items per page
     * @param data.genres _Extension_ Comma seperated list of genres
     * @returns unknown Paginated set of `ArtistResource`
     * @throws ApiError
     */
    public static artistsIndex(data: ArtistsIndexData): CancelablePromise<ArtistsIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries/{library}/artists',
            path: {
                library: data.library
            },
            query: {
                fields: data.fields,
                relations: data.relations,
                page: data.page,
                limit: data.limit,
                genres: data.genres
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get an artist
     * @param data The data for the request.
     * @param data.library
     * @param data.artist The artist slug
     * @returns ArtistResource `ArtistResource`
     * @throws ApiError
     */
    public static artistsShow(data: ArtistsShowData): CancelablePromise<ArtistsShowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries/{library}/artists/{artist}',
            path: {
                library: data.library,
                artist: data.artist
            },
            errors: {
                401: 'Unauthenticated',
                404: 'Not found'
            }
        });
    }
    
}

export class AuthService {
    /**
     * Login
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static authLogin(data: AuthLoginData): CancelablePromise<AuthLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/login',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'An error',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Refresh token
     * Needs refresh token with ability "issue-access-token"
     * @returns unknown
     * @throws ApiError
     */
    public static authRefreshToken(): CancelablePromise<AuthRefreshTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/refreshToken',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Get a stream token
     * Needs refresh token with ability "issue-access-token"
     * @returns unknown
     * @throws ApiError
     */
    public static authStreamToken(): CancelablePromise<AuthStreamTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/streamToken',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Register
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static authRegister(data: AuthRegisterData = {}): CancelablePromise<AuthRegisterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/register',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Request reset password link
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static authForgotPassword(data: AuthForgotPasswordData): CancelablePromise<AuthForgotPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/forgotPassword',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static authResetPassword(data: AuthResetPasswordData): CancelablePromise<AuthResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/resetPassword',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'An error',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Verify email
     * @returns UserResource `UserResource`
     * @throws ApiError
     */
    public static authVerify(): CancelablePromise<AuthVerifyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/verify/:id/:hash'
        });
    }
    
    /**
     * Logout
     * Invalidates the current session
     * @param data The data for the request.
     * @param data.requestBody
     * @returns null No content
     * @throws ApiError
     */
    public static authLogout(data: AuthLogoutData = {}): CancelablePromise<AuthLogoutResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/logout',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get a passkey challenge
     * @returns unknown
     * @throws ApiError
     */
    public static authPasskeyOptions(): CancelablePromise<AuthPasskeyOptionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/webauthn/passkey'
        });
    }
    
    /**
     * Login with a passkey
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static authPasskeyLogin(data: AuthPasskeyLoginData): CancelablePromise<AuthPasskeyLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/webauthn/passkey',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: '',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get passkey registration options
     * @returns unknown
     * @throws ApiError
     */
    public static authPasskeyRegisterOptions(): CancelablePromise<AuthPasskeyRegisterOptionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/webauthn/passkey/register',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Register passkey
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static authPasskeyRegister(data: AuthPasskeyRegisterData): CancelablePromise<AuthPasskeyRegisterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/webauthn/passkey/register',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error',
                500: ''
            }
        });
    }
    
}

export class PasskeyService {
    /**
     * Get a passkey challenge
     * @returns unknown
     * @throws ApiError
     */
    public static authPasskeyOptions(): CancelablePromise<AuthPasskeyOptionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/webauthn/passkey'
        });
    }
    
    /**
     * Login with a passkey
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static authPasskeyLogin(data: AuthPasskeyLoginData): CancelablePromise<AuthPasskeyLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/webauthn/passkey',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: '',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get passkey registration options
     * @returns unknown
     * @throws ApiError
     */
    public static authPasskeyRegisterOptions(): CancelablePromise<AuthPasskeyRegisterOptionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/webauthn/passkey/register',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Register passkey
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static authPasskeyRegister(data: AuthPasskeyRegisterData): CancelablePromise<AuthPasskeyRegisterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/webauthn/passkey/register',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error',
                500: ''
            }
        });
    }
    
}

export class BatchesService {
    /**
     * Get all of the batches
     * @returns unknown
     * @throws ApiError
     */
    public static horizonJobsBatchesIndex(): CancelablePromise<HorizonJobsBatchesIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/batches'
        });
    }
    
    /**
     * Get the details of a batch by ID
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static horizonJobsBatchesShow(data: HorizonJobsBatchesShowData): CancelablePromise<HorizonJobsBatchesShowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/batches/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * Retry the given batch
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static horizonJobsBatchesRetry(data: HorizonJobsBatchesRetryData): CancelablePromise<HorizonJobsBatchesRetryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/-/horizon/api/batches/retry/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class CompletedJobsService {
    /**
     * Get all of the completed jobs
     * @param data The data for the request.
     * @param data.startingAt
     * @returns unknown
     * @throws ApiError
     */
    public static horizonCompletedJobsIndex(data: HorizonCompletedJobsIndexData = {}): CancelablePromise<HorizonCompletedJobsIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/jobs/completed',
            query: {
                starting_at: data.startingAt
            }
        });
    }
    
}

export class DashboardStatsService {
    /**
     * Get the key performance stats for the dashboard
     * @returns unknown
     * @throws ApiError
     */
    public static horizonStatsIndex(): CancelablePromise<HorizonStatsIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/stats'
        });
    }
    
}

export class FailedJobsService {
    /**
     * Get all of the failed jobs
     * @param data The data for the request.
     * @param data.tag
     * @returns unknown
     * @throws ApiError
     */
    public static horizonFailedJobsIndex(data: HorizonFailedJobsIndexData = {}): CancelablePromise<HorizonFailedJobsIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/jobs/failed',
            query: {
                tag: data.tag
            }
        });
    }
    
    /**
     * Get a failed job instance
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static horizonFailedJobsShow(data: HorizonFailedJobsShowData): CancelablePromise<HorizonFailedJobsShowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/jobs/failed/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class FilesService {
    /**
     * @returns LogFileResource Array of `LogFileResource`
     * @throws ApiError
     */
    public static logViewerFiles(): CancelablePromise<LogViewerFilesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/files'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.fileIdentifier
     * @returns unknown
     * @throws ApiError
     */
    public static logViewerFilesRequestDownload(data: LogViewerFilesRequestDownloadData): CancelablePromise<LogViewerFilesRequestDownloadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/files/{fileIdentifier}/download/request',
            path: {
                fileIdentifier: data.fileIdentifier
            },
            errors: {
                404: 'Not found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.fileIdentifier
     * @returns unknown
     * @throws ApiError
     */
    public static logViewerFilesClearCache(data: LogViewerFilesClearCacheData): CancelablePromise<LogViewerFilesClearCacheResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/system/log-viewer/api/files/{fileIdentifier}/clear-cache',
            path: {
                fileIdentifier: data.fileIdentifier
            },
            errors: {
                404: 'Not found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.fileIdentifier
     * @returns unknown
     * @throws ApiError
     */
    public static logViewerFilesDelete(data: LogViewerFilesDeleteData): CancelablePromise<LogViewerFilesDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/system/log-viewer/api/files/{fileIdentifier}',
            path: {
                fileIdentifier: data.fileIdentifier
            }
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static logViewerFilesClearCacheAll(): CancelablePromise<LogViewerFilesClearCacheAllResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/system/log-viewer/api/clear-cache-all'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static logViewerFilesDeleteMultipleFiles(data: LogViewerFilesDeleteMultipleFilesData = {}): CancelablePromise<LogViewerFilesDeleteMultipleFilesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/system/log-viewer/api/delete-multiple-files',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.fileIdentifier
     * @returns string
     * @throws ApiError
     */
    public static logViewerFilesDownload(data: LogViewerFilesDownloadData): CancelablePromise<LogViewerFilesDownloadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/files/{fileIdentifier}/download',
            path: {
                fileIdentifier: data.fileIdentifier
            }
        });
    }
    
}

export class FoldersService {
    /**
     * @returns LogFolderResource Array of `LogFolderResource`
     * @throws ApiError
     */
    public static logViewerFolders(): CancelablePromise<LogViewerFoldersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/folders'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.folderIdentifier
     * @returns unknown
     * @throws ApiError
     */
    public static logViewerFoldersRequestDownload(data: LogViewerFoldersRequestDownloadData): CancelablePromise<LogViewerFoldersRequestDownloadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/folders/{folderIdentifier}/download/request',
            path: {
                folderIdentifier: data.folderIdentifier
            },
            errors: {
                404: 'Not found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.folderIdentifier
     * @returns unknown
     * @throws ApiError
     */
    public static logViewerFoldersClearCache(data: LogViewerFoldersClearCacheData): CancelablePromise<LogViewerFoldersClearCacheResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/system/log-viewer/api/folders/{folderIdentifier}/clear-cache',
            path: {
                folderIdentifier: data.folderIdentifier
            },
            errors: {
                404: 'Not found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.folderIdentifier
     * @returns unknown
     * @throws ApiError
     */
    public static logViewerFoldersDelete(data: LogViewerFoldersDeleteData): CancelablePromise<LogViewerFoldersDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/system/log-viewer/api/folders/{folderIdentifier}',
            path: {
                folderIdentifier: data.folderIdentifier
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.folderIdentifier
     * @returns string
     * @throws ApiError
     */
    public static logViewerFoldersDownload(data: LogViewerFoldersDownloadData): CancelablePromise<LogViewerFoldersDownloadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/folders/{folderIdentifier}/download',
            path: {
                folderIdentifier: data.folderIdentifier
            }
        });
    }
    
}

export class GenreService {
    /**
     * Get a collection of genres
     * @param data The data for the request.
     * @param data.fields Comma seperated string of fields you want to select. If nothing is defined `select *` is default.
     * - name
     * - slug
     * @param data.relations Comma seperated string of relations
     * - songs
     * @param data.librarySlug Constrain the query to only fetch genres that are contained within the given library
     * @param data.page Current page
     * @param data.limit Items per page
     * @returns unknown Paginated set of `GenreResource`
     * @throws ApiError
     */
    public static genresIndex(data: GenresIndexData = {}): CancelablePromise<GenresIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/genres',
            query: {
                fields: data.fields,
                relations: data.relations,
                librarySlug: data.librarySlug,
                page: data.page,
                limit: data.limit
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get a genre
     * @param data The data for the request.
     * @param data.genre The genre slug
     * @returns GenreResource `GenreResource`
     * @throws ApiError
     */
    public static genresShow(data: GenresShowData): CancelablePromise<GenresShowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/genres/{genre}',
            path: {
                genre: data.genre
            },
            errors: {
                401: 'Unauthenticated',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Update a genre
     * @param data The data for the request.
     * @param data.genre The genre slug
     * @param data.requestBody
     * @returns GenreResource `GenreResource`
     * @throws ApiError
     */
    public static genresUpdate(data: GenresUpdateData): CancelablePromise<GenresUpdateResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/genres/{genre}',
            path: {
                genre: data.genre
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Delete a genre
     * @param data The data for the request.
     * @param data.genre The genre slug
     * @returns null No content
     * @throws ApiError
     */
    public static genresDestroy(data: GenresDestroyData): CancelablePromise<GenresDestroyResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/genres/{genre}',
            path: {
                genre: data.genre
            },
            errors: {
                401: 'Unauthenticated',
                404: 'Not found'
            }
        });
    }
    
}

export class HostsService {
    /**
     * @returns LogViewerHostResource Array of `LogViewerHostResource`
     * @throws ApiError
     */
    public static logViewerHosts(): CancelablePromise<LogViewerHostsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/hosts'
        });
    }
    
}

export class ImageService {
    /**
     * Get an image asset
     * @param data The data for the request.
     * @param data.image The image public id
     * @returns string
     * @throws ApiError
     */
    public static imageServe(data: ImageServeData): CancelablePromise<ImageServeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/images/{image}',
            path: {
                image: data.image
            },
            errors: {
                404: 'Not found'
            }
        });
    }
    
}

export class JobService {
    /**
     * Scan a library
     * @param data The data for the request.
     * @param data.slug
     * @returns unknown
     * @throws ApiError
     */
    public static jobLibraryScan(data: JobLibraryScanData): CancelablePromise<JobLibraryScanResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/jobs/scanLibrary/{slug}',
            path: {
                slug: data.slug
            },
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
}

export class JobMetricsService {
    /**
     * Get all of the measured jobs
     * @returns unknown
     * @throws ApiError
     */
    public static horizonJobsMetricsIndex(): CancelablePromise<HorizonJobsMetricsIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/metrics/jobs'
        });
    }
    
    /**
     * Get metrics for a given job
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static horizonJobsMetricsShow(data: HorizonJobsMetricsShowData): CancelablePromise<HorizonJobsMetricsShowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/metrics/jobs/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class JobsService {
    /**
     * Get the details of a recent job by ID
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static horizonJobsShow(data: HorizonJobsShowData): CancelablePromise<HorizonJobsShowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/jobs/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class LibraryService {
    /**
     * Get a collection of media libraries
     * @param data The data for the request.
     * @param data.page Current page
     * @param data.limit Items per page
     * @returns unknown Paginated set of `LibraryResource`
     * @throws ApiError
     */
    public static librariesIndex(data: LibrariesIndexData = {}): CancelablePromise<LibrariesIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries',
            query: {
                page: data.page,
                limit: data.limit
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Create a library
     * @param data The data for the request.
     * @param data.requestBody
     * @returns LibraryResource `LibraryResource`
     * @throws ApiError
     */
    public static libraryCreate(data: LibraryCreateData): CancelablePromise<LibraryCreateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/libraries',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Show library
     * @param data The data for the request.
     * @param data.slug
     * @returns LibraryResource `LibraryResource`
     * @throws ApiError
     */
    public static libraryShow(data: LibraryShowData): CancelablePromise<LibraryShowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries/{slug}',
            path: {
                slug: data.slug
            },
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Update a library specified by the provided slug
     * @param data The data for the request.
     * @param data.slug
     * @param data.requestBody
     * @returns LibraryResource `LibraryResource`
     * @throws ApiError
     */
    public static libraryUpdate(data: LibraryUpdateData): CancelablePromise<LibraryUpdateResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/libraries/{slug}',
            path: {
                slug: data.slug
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Delete a library
     * @returns null No content
     * @throws ApiError
     */
    public static libraryDelete(): CancelablePromise<LibraryDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/libraries/:slug',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
}

export class LogsService {
    /**
     * @param data The data for the request.
     * @param data.file
     * @param data.query
     * @param data.direction
     * @param data.log
     * @param data.excludeLevels
     * @param data.excludeFileTypes
     * @param data.perPage
     * @param data.shorterStackTraces
     * @returns unknown
     * @throws ApiError
     */
    public static logViewerLogs(data: LogViewerLogsData = {}): CancelablePromise<LogViewerLogsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/logs',
            query: {
                file: data.file,
                query: data.query,
                direction: data.direction,
                log: data.log,
                exclude_levels: data.excludeLevels,
                exclude_file_types: data.excludeFileTypes,
                per_page: data.perPage,
                shorter_stack_traces: data.shorterStackTraces
            }
        });
    }
    
}

export class MasterSupervisorService {
    /**
     * Get all of the master supervisors and their underlying supervisors
     * @returns unknown
     * @throws ApiError
     */
    public static horizonMastersIndex(): CancelablePromise<HorizonMastersIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/masters'
        });
    }
    
}

export class MonitoringService {
    /**
     * Get all of the monitored tags and their job counts
     * @returns unknown
     * @throws ApiError
     */
    public static horizonMonitoringIndex(): CancelablePromise<HorizonMonitoringIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/monitoring'
        });
    }
    
    /**
     * Start monitoring the given tag
     * @returns unknown
     * @throws ApiError
     */
    public static horizonMonitoringStore(): CancelablePromise<HorizonMonitoringStoreResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/-/horizon/api/monitoring'
        });
    }
    
    /**
     * Paginate the jobs for a given tag
     * @param data The data for the request.
     * @param data.tag
     * @param data.tag
     * @param data.limit
     * @returns unknown
     * @throws ApiError
     */
    public static horizonMonitoringTagPaginate(data: HorizonMonitoringTagPaginateData): CancelablePromise<HorizonMonitoringTagPaginateResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/monitoring/{tag}',
            path: {
                tag: data.tag
            },
            query: {
                tag: data.tag,
                limit: data.limit
            }
        });
    }
    
    /**
     * Stop monitoring the given tag
     * @param data The data for the request.
     * @param data.tag
     * @returns unknown
     * @throws ApiError
     */
    public static horizonMonitoringTagDestroy(data: HorizonMonitoringTagDestroyData): CancelablePromise<HorizonMonitoringTagDestroyResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/-/horizon/api/monitoring/{tag}',
            path: {
                tag: data.tag
            }
        });
    }
    
}

export class OpCacheService {
    /**
     * Get status
     * @returns unknown
     * @throws ApiError
     */
    public static opCacheGetStatus(): CancelablePromise<OpCacheGetStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/opcache/status',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Get config
     * @returns unknown
     * @throws ApiError
     */
    public static opcacheGetConfig(): CancelablePromise<OpcacheGetConfigResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/opcache/config',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Clear
     * @returns unknown
     * @throws ApiError
     */
    public static opcacheClear(): CancelablePromise<OpcacheClearResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/opcache/clear',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Compile cache
     * @param data The data for the request.
     * @param data.force
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static opcacheCompile(data: OpcacheCompileData = {}): CancelablePromise<OpcacheCompileResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/opcache/compile',
            query: {
                force: data.force
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
}

export class PendingJobsService {
    /**
     * Get all of the pending jobs
     * @param data The data for the request.
     * @param data.startingAt
     * @returns unknown
     * @throws ApiError
     */
    public static horizonPendingJobsIndex(data: HorizonPendingJobsIndexData = {}): CancelablePromise<HorizonPendingJobsIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/jobs/pending',
            query: {
                starting_at: data.startingAt
            }
        });
    }
    
}

export class QueueService {
    /**
     * Get a collection of monitor entries
     * @param data The data for the request.
     * @param data.page Current page
     * @param data.limit Items per page
     * @param data.status MonitorStatus
     * - 0=RUNNING
     * - 1=SUCCEEDED
     * - 2=FAILED
     * - 3=STALE
     * - 4=QUEUED
     * @param data.queue Name of the queue
     * @param data.name Name of the job
     * @param data.queuedFirst Order queued jobs first
     * @returns unknown Paginated set of `QueueMonitorResource`
     * @throws ApiError
     */
    public static queueMetricsShow(data: QueueMetricsShowData = {}): CancelablePromise<QueueMetricsShowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/queue-metrics',
            query: {
                page: data.page,
                limit: data.limit,
                status: data.status,
                queue: data.queue,
                name: data.name,
                queuedFirst: data.queuedFirst
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get a list of queue names
     * @returns unknown
     * @throws ApiError
     */
    public static queueMetricsQueues(): CancelablePromise<QueueMetricsQueuesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/queue-metrics/queues',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Get a metrics collection
     * @param data The data for the request.
     * @param data.aggregateDays Days to aggregate
     * @returns unknown
     * @throws ApiError
     */
    public static queueMetricsMetrics(data: QueueMetricsMetricsData = {}): CancelablePromise<QueueMetricsMetricsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/queue-metrics/metrics',
            query: {
                aggregateDays: data.aggregateDays
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Retry a job
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static queueMetricsRetryJob(data: QueueMetricsRetryJobData): CancelablePromise<QueueMetricsRetryJobResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/queue-metrics/retry/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'An error',
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Delete by id
     * @param data The data for the request.
     * @param data.id
     * @returns null No content
     * @throws ApiError
     */
    public static queueMetricsDelete(data: QueueMetricsDeleteData): CancelablePromise<QueueMetricsDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/queue-metrics/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Purge all records
     * @returns null No content
     * @throws ApiError
     */
    public static queueMetricsPurge(): CancelablePromise<QueueMetricsPurgeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/queue-metrics/purge',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
}

export class QueueMetricsService {
    /**
     * Get all of the measured queues
     * @returns unknown
     * @throws ApiError
     */
    public static horizonQueuesMetricsIndex(): CancelablePromise<HorizonQueuesMetricsIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/metrics/queues'
        });
    }
    
    /**
     * Get metrics for a given queue
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static horizonQueuesMetricsShow(data: HorizonQueuesMetricsShowData): CancelablePromise<HorizonQueuesMetricsShowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/metrics/queues/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class RetryService {
    /**
     * Retry a failed job
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static horizonRetryJobsShow(data: HorizonRetryJobsShowData): CancelablePromise<HorizonRetryJobsShowResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/-/horizon/api/jobs/retry/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class SilencedJobsService {
    /**
     * Get all of the silenced jobs
     * @param data The data for the request.
     * @param data.startingAt
     * @returns unknown
     * @throws ApiError
     */
    public static horizonSilencedJobsIndex(data: HorizonSilencedJobsIndexData = {}): CancelablePromise<HorizonSilencedJobsIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/jobs/silenced',
            query: {
                starting_at: data.startingAt
            }
        });
    }
    
}

export class SongService {
    /**
     * Get a collection of songs
     * @param data The data for the request.
     * @param data.library The library slug
     * @param data.page Current page
     * @param data.limit Items per page
     * @param data.genreNames Comma seperated list of genre names You can only search for names or slugs. Not both.
     * @param data.genreSlugs Comma seperated list of genre slugs
     * @param data.relations Comma seperated string of relations
     * - album
     * - artists
     * - album.albumArtist
     * - genres
     * @returns unknown Paginated set of `SongResource`
     * @throws ApiError
     */
    public static songsIndex(data: SongsIndexData): CancelablePromise<SongsIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries/{library}/songs',
            path: {
                library: data.library
            },
            query: {
                page: data.page,
                limit: data.limit,
                genreNames: data.genreNames,
                genreSlugs: data.genreSlugs,
                relations: data.relations
            },
            errors: {
                400: 'An error',
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get a song by public id
     * @param data The data for the request.
     * @param data.library The library slug
     * @param data.publicId
     * @param data.relations Comma seperated string of relations
     * - album
     * - artists
     * - albumArtist
     * - genres
     * @returns SongResource `SongResource`
     * @throws ApiError
     */
    public static songsShow(data: SongsShowData): CancelablePromise<SongsShowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries/{library}/songs/{publicId}',
            path: {
                library: data.library,
                publicId: data.publicId
            },
            query: {
                relations: data.relations
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Direct stream the song
     * Requires token with "access-stream"
     * @param data The data for the request.
     * @param data.library The library slug
     * @param data.song The song public id
     * @returns unknown
     * @throws ApiError
     */
    public static songsStream(data: SongsStreamData): CancelablePromise<SongsStreamResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries/{library}/songs/stream/song/{song}/direct',
            path: {
                library: data.library,
                song: data.song
            },
            errors: {
                401: 'Unauthenticated',
                404: 'Not found'
            }
        });
    }
    
}

export class SystemInfoService {
    /**
     * Get php info
     * @returns unknown
     * @throws ApiError
     */
    public static systemInfoPhp(): CancelablePromise<SystemInfoPhpResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/system-info',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static systemInfoSys(): CancelablePromise<SystemInfoSysResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/system-info/sys',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
}

export class UserService {
    /**
     * Get a collection of users
     * @param data The data for the request.
     * @param data.page Current page
     * @param data.limit Items per page
     * @param data.globalFilter
     * @param data.filters JSON object
     * @param data.filterModes JSON object
     * @param data.sorting JSON object
     * @returns unknown Paginated set of `UserResource`
     * @throws ApiError
     */
    public static usersIndex(data: UsersIndexData = {}): CancelablePromise<UsersIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users',
            query: {
                page: data.page,
                limit: data.limit,
                globalFilter: data.globalFilter,
                filters: data.filters,
                filterModes: data.filterModes,
                sorting: data.sorting
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Create user
     * This is endpoint allows administrators to create users
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserResource `UserResource`
     * @throws ApiError
     */
    public static usersStore(data: UsersStoreData): CancelablePromise<UsersStoreResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/users',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Update a user
     * @param data The data for the request.
     * @param data.user The user ID
     * @param data.requestBody
     * @returns UserResource `UserResource`
     * @throws ApiError
     */
    public static usersUpdate(data: UsersUpdateData): CancelablePromise<UsersUpdateResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/users/{user}',
            path: {
                user: data.user
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get small user detail info
     * @param data The data for the request.
     * @param data.user The user ID
     * @returns UserResource `UserResource`
     * @throws ApiError
     */
    public static usersShow(data: UsersShowData): CancelablePromise<UsersShowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/{user}',
            path: {
                user: data.user
            },
            errors: {
                401: 'Unauthenticated',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Delete a user
     * @param data The data for the request.
     * @param data.user
     * @returns null No content
     * @throws ApiError
     */
    public static usersDestroy(data: UsersDestroyData): CancelablePromise<UsersDestroyResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/users/{user}',
            path: {
                user: data.user
            },
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Get the authenticated user
     * @returns UserResource `UserResource`
     * @throws ApiError
     */
    public static usersMe(): CancelablePromise<UsersMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/me',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
}

export class UserTokenService {
    /**
     * Get a collection of tokens
     * @param data The data for the request.
     * @param data.user
     * @param data.page
     * @param data.perPage
     * @returns unknown Paginated set of `PersonalAccessTokenViewResource`
     * @throws ApiError
     */
    public static userTokenGetUserTokens(data: UserTokenGetUserTokensData): CancelablePromise<UserTokenGetUserTokensResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/tokens/{user}',
            path: {
                user: data.user
            },
            query: {
                page: data.page,
                perPage: data.perPage
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Revoke a given token
     * @param data The data for the request.
     * @param data.token The token ID
     * @returns null No content
     * @throws ApiError
     */
    public static userTokenRevokeToken(data: UserTokenRevokeTokenData): CancelablePromise<UserTokenRevokeTokenResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/users/tokens/{token}',
            path: {
                token: data.token
            },
            errors: {
                401: 'Unauthenticated',
                404: 'Not found'
            }
        });
    }
    
}

export class WorkloadService {
    /**
     * Get the current queue workload for the application
     * @returns unknown
     * @throws ApiError
     */
    public static horizonWorkloadIndex(): CancelablePromise<HorizonWorkloadIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/workload'
        });
    }
    
}