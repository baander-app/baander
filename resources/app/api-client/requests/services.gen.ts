// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetApiLibrariesByLibraryAlbumsData, GetApiLibrariesByLibraryAlbumsResponse, GetApiLibrariesByLibraryAlbumsByAlbumData, GetApiLibrariesByLibraryAlbumsByAlbumResponse, GetApiLibrariesByLibraryArtistsData, GetApiLibrariesByLibraryArtistsResponse, GetApiLibrariesByLibraryArtistsByArtistData, GetApiLibrariesByLibraryArtistsByArtistResponse, PostApiAuthLoginData, PostApiAuthLoginResponse, PostApiAuthRefreshTokenResponse, PostApiAuthStreamTokenResponse, PostApiAuthRegisterData, PostApiAuthRegisterResponse, PostApiAuthForgotPasswordData, PostApiAuthForgotPasswordResponse, PostApiAuthResetPasswordData, PostApiAuthResetPasswordResponse, PostApiAuthVerifyByIdByHashData, PostApiAuthVerifyByIdByHashResponse, PostApiAuthLogoutData, PostApiAuthLogoutResponse, GetWebauthnPasskeyResponse, PostWebauthnPasskeyData, PostWebauthnPasskeyResponse, GetWebauthnPasskeyRegisterResponse, PostWebauthnPasskeyRegisterData, PostWebauthnPasskeyRegisterResponse, GetHorizonApiBatchesResponse, GetHorizonApiBatchesByIdData, GetHorizonApiBatchesByIdResponse, PostHorizonApiBatchesRetryByIdData, PostHorizonApiBatchesRetryByIdResponse, GetHorizonApiJobsCompletedData, GetHorizonApiJobsCompletedResponse, GetHorizonApiStatsResponse, GetHorizonApiJobsFailedData, GetHorizonApiJobsFailedResponse, GetHorizonApiJobsFailedByIdData, GetHorizonApiJobsFailedByIdResponse, GetSystemLogViewerApiFilesResponse, GetSystemLogViewerApiFilesByFileIdentifierDownloadRequestData, GetSystemLogViewerApiFilesByFileIdentifierDownloadRequestResponse, PostSystemLogViewerApiFilesByFileIdentifierClearCacheData, PostSystemLogViewerApiFilesByFileIdentifierClearCacheResponse, DeleteSystemLogViewerApiFilesByFileIdentifierData, DeleteSystemLogViewerApiFilesByFileIdentifierResponse, PostSystemLogViewerApiClearCacheAllResponse, PostSystemLogViewerApiDeleteMultipleFilesData, PostSystemLogViewerApiDeleteMultipleFilesResponse, GetSystemLogViewerApiFilesByFileIdentifierDownloadData, GetSystemLogViewerApiFilesByFileIdentifierDownloadResponse, GetSystemLogViewerApiFoldersData, GetSystemLogViewerApiFoldersResponse, GetSystemLogViewerApiFoldersByFolderIdentifierDownloadRequestData, GetSystemLogViewerApiFoldersByFolderIdentifierDownloadRequestResponse, PostSystemLogViewerApiFoldersByFolderIdentifierClearCacheData, PostSystemLogViewerApiFoldersByFolderIdentifierClearCacheResponse, DeleteSystemLogViewerApiFoldersByFolderIdentifierData, DeleteSystemLogViewerApiFoldersByFolderIdentifierResponse, GetSystemLogViewerApiFoldersByFolderIdentifierDownloadData, GetSystemLogViewerApiFoldersByFolderIdentifierDownloadResponse, GetApiGenresData, GetApiGenresResponse, GetApiGenresByGenreData, GetApiGenresByGenreResponse, PatchApiGenresByGenreData, PatchApiGenresByGenreResponse, DeleteApiGenresByGenreData, DeleteApiGenresByGenreResponse, GetSystemLogViewerApiHostsResponse, GetApiImagesByImageData, GetApiImagesByImageResponse, PostApiJobsScanLibraryBySlugData, PostApiJobsScanLibraryBySlugResponse, GetHorizonApiMetricsJobsResponse, GetHorizonApiMetricsJobsByIdData, GetHorizonApiMetricsJobsByIdResponse, GetHorizonApiJobsByIdData, GetHorizonApiJobsByIdResponse, GetApiLibrariesData, GetApiLibrariesResponse, PostApiLibrariesData, PostApiLibrariesResponse, GetApiLibrariesBySlugData, GetApiLibrariesBySlugResponse, PatchApiLibrariesBySlugData, PatchApiLibrariesBySlugResponse, DeleteApiLibrariesBySlugData, DeleteApiLibrariesBySlugResponse, GetSystemLogViewerApiLogsData, GetSystemLogViewerApiLogsResponse, GetHorizonApiMastersResponse, GetHorizonApiMonitoringResponse, PostHorizonApiMonitoringResponse, GetHorizonApiMonitoringByTagData, GetHorizonApiMonitoringByTagResponse, DeleteHorizonApiMonitoringByTagData, DeleteHorizonApiMonitoringByTagResponse, GetApiOpcacheStatusResponse, GetApiOpcacheConfigResponse, PostApiOpcacheClearResponse, PostApiOpcacheCompileData, PostApiOpcacheCompileResponse, GetHorizonApiJobsPendingData, GetHorizonApiJobsPendingResponse, GetApiPlaylistsResponse, PostApiPlaylistsData, PostApiPlaylistsResponse, GetApiPlaylistsByPlaylistData, GetApiPlaylistsByPlaylistResponse, PutApiPlaylistsByPlaylistData, PutApiPlaylistsByPlaylistResponse, DeleteApiPlaylistsByPlaylistData, DeleteApiPlaylistsByPlaylistResponse, PostApiPlaylistsByPlaylistSongsBySongData, PostApiPlaylistsByPlaylistSongsBySongResponse, DeleteApiPlaylistsByPlaylistSongsBySongData, DeleteApiPlaylistsByPlaylistSongsBySongResponse, PostApiPlaylistsByPlaylistReorderData, PostApiPlaylistsByPlaylistReorderResponse, PostApiPlaylistsByPlaylistCollaboratorsData, PostApiPlaylistsByPlaylistCollaboratorsResponse, DeleteApiPlaylistsByPlaylistCollaboratorsByUserData, DeleteApiPlaylistsByPlaylistCollaboratorsByUserResponse, PostApiPlaylistsByPlaylistCloneData, PostApiPlaylistsByPlaylistCloneResponse, GetApiPlaylistsByPlaylistStatisticsData, GetApiPlaylistsByPlaylistStatisticsResponse, PostApiPlaylistsByPlaylistStatisticsRecordViewData, PostApiPlaylistsByPlaylistStatisticsRecordViewResponse, PostApiPlaylistsByPlaylistStatisticsRecordPlayData, PostApiPlaylistsByPlaylistStatisticsRecordPlayResponse, PostApiPlaylistsByPlaylistStatisticsRecordShareData, PostApiPlaylistsByPlaylistStatisticsRecordShareResponse, PostApiPlaylistsByPlaylistStatisticsRecordFavoriteData, PostApiPlaylistsByPlaylistStatisticsRecordFavoriteResponse, PostApiPlaylistsSmartData, PostApiPlaylistsSmartResponse, PutApiPlaylistsByPlaylistSmartData, PutApiPlaylistsByPlaylistSmartResponse, PostApiPlaylistsByPlaylistSmartSyncData, PostApiPlaylistsByPlaylistSmartSyncResponse, GetApiQueueMetricsData, GetApiQueueMetricsResponse, GetApiQueueMetricsQueuesResponse, GetApiQueueMetricsMetricsData, GetApiQueueMetricsMetricsResponse, PostApiQueueMetricsRetryByIdData, PostApiQueueMetricsRetryByIdResponse, DeleteApiQueueMetricsByIdData, DeleteApiQueueMetricsByIdResponse, DeleteApiQueueMetricsPurgeResponse, GetHorizonApiMetricsQueuesResponse, GetHorizonApiMetricsQueuesByIdData, GetHorizonApiMetricsQueuesByIdResponse, PostHorizonApiJobsRetryByIdData, PostHorizonApiJobsRetryByIdResponse, GetApiSchemasMusicbrainzResponse, GetHorizonApiJobsSilencedData, GetHorizonApiJobsSilencedResponse, GetApiLibrariesByLibrarySongsData, GetApiLibrariesByLibrarySongsResponse, GetApiLibrariesByLibrarySongsByPublicIdData, GetApiLibrariesByLibrarySongsByPublicIdResponse, GetApiStreamSongBySongDirectData, GetApiStreamSongBySongDirectResponse, GetApiSystemInfoResponse, GetApiSystemInfoSysResponse, GetApiUsersData, GetApiUsersResponse, PostApiUsersData, PostApiUsersResponse, PatchApiUsersByUserData, PatchApiUsersByUserResponse, GetApiUsersByUserData, GetApiUsersByUserResponse, DeleteApiUsersByUserData, DeleteApiUsersByUserResponse, GetApiUsersMeResponse, GetApiUsersTokensByUserData, GetApiUsersTokensByUserResponse, DeleteApiUsersTokensByTokenData, DeleteApiUsersTokensByTokenResponse, GetHorizonApiWorkloadResponse } from './types.gen';

export class AlbumService {
    /**
     * Get a collection of albums
     * @param data The data for the request.
     * @param data.library The library slug
     * @param data.fields
     * @param data.relations
     * @param data.page
     * @param data.limit
     * @param data.genres
     * @returns unknown Paginated set of `AlbumResource`
     * @throws ApiError
     */
    public static getApiLibrariesByLibraryAlbums(data: GetApiLibrariesByLibraryAlbumsData): CancelablePromise<GetApiLibrariesByLibraryAlbumsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries/{library}/albums',
            path: {
                library: data.library
            },
            query: {
                fields: data.fields,
                relations: data.relations,
                page: data.page,
                limit: data.limit,
                genres: data.genres
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get an album
     * @param data The data for the request.
     * @param data.library The library slug
     * @param data.album The album slug
     * @returns AlbumResource `AlbumResource`
     * @throws ApiError
     */
    public static getApiLibrariesByLibraryAlbumsByAlbum(data: GetApiLibrariesByLibraryAlbumsByAlbumData): CancelablePromise<GetApiLibrariesByLibraryAlbumsByAlbumResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries/{library}/albums/{album}',
            path: {
                library: data.library,
                album: data.album
            },
            errors: {
                401: 'Unauthenticated',
                404: 'Not found'
            }
        });
    }
    
}

export class ArtistService {
    /**
     * Get a collection of artists
     * @param data The data for the request.
     * @param data.library
     * @param data.fields
     * @param data.relations
     * @param data.page
     * @param data.limit
     * @param data.genres
     * @returns unknown Paginated set of `ArtistResource`
     * @throws ApiError
     */
    public static getApiLibrariesByLibraryArtists(data: GetApiLibrariesByLibraryArtistsData): CancelablePromise<GetApiLibrariesByLibraryArtistsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries/{library}/artists',
            path: {
                library: data.library
            },
            query: {
                fields: data.fields,
                relations: data.relations,
                page: data.page,
                limit: data.limit,
                genres: data.genres
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get an artist
     * @param data The data for the request.
     * @param data.library
     * @param data.artist The artist slug
     * @returns ArtistResource `ArtistResource`
     * @throws ApiError
     */
    public static getApiLibrariesByLibraryArtistsByArtist(data: GetApiLibrariesByLibraryArtistsByArtistData): CancelablePromise<GetApiLibrariesByLibraryArtistsByArtistResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries/{library}/artists/{artist}',
            path: {
                library: data.library,
                artist: data.artist
            },
            errors: {
                401: 'Unauthenticated',
                404: 'Not found'
            }
        });
    }
    
}

export class AuthService {
    /**
     * Login
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static postApiAuthLogin(data: PostApiAuthLoginData): CancelablePromise<PostApiAuthLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/login',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'An error',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Refresh token
     * Needs refresh token with ability "issue-access-token"
     * @returns unknown
     * @throws ApiError
     */
    public static postApiAuthRefreshToken(): CancelablePromise<PostApiAuthRefreshTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/refreshToken',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Get a stream token
     * Needs refresh token with ability "issue-access-token"
     * @returns unknown
     * @throws ApiError
     */
    public static postApiAuthStreamToken(): CancelablePromise<PostApiAuthStreamTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/streamToken',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Register
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static postApiAuthRegister(data: PostApiAuthRegisterData): CancelablePromise<PostApiAuthRegisterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/register',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Request reset password link
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static postApiAuthForgotPassword(data: PostApiAuthForgotPasswordData): CancelablePromise<PostApiAuthForgotPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/forgotPassword',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static postApiAuthResetPassword(data: PostApiAuthResetPasswordData): CancelablePromise<PostApiAuthResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/resetPassword',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'An error',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Verify email
     * @param data The data for the request.
     * @param data.id
     * @param data.hash
     * @returns UserResource `UserResource`
     * @throws ApiError
     */
    public static postApiAuthVerifyByIdByHash(data: PostApiAuthVerifyByIdByHashData): CancelablePromise<PostApiAuthVerifyByIdByHashResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/verify/{id}/{hash}',
            path: {
                id: data.id,
                hash: data.hash
            },
            errors: {
                404: 'Not found'
            }
        });
    }
    
    /**
     * Logout
     * Invalidates the current session
     * @param data The data for the request.
     * @param data.requestBody
     * @returns void No content
     * @throws ApiError
     */
    public static postApiAuthLogout(data: PostApiAuthLogoutData = {}): CancelablePromise<PostApiAuthLogoutResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/logout',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get a passkey challenge
     * @returns unknown
     * @throws ApiError
     */
    public static getWebauthnPasskey(): CancelablePromise<GetWebauthnPasskeyResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/webauthn/passkey'
        });
    }
    
    /**
     * Login with a passkey
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static postWebauthnPasskey(data: PostWebauthnPasskeyData): CancelablePromise<PostWebauthnPasskeyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/webauthn/passkey',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: '',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get passkey registration options
     * @returns unknown
     * @throws ApiError
     */
    public static getWebauthnPasskeyRegister(): CancelablePromise<GetWebauthnPasskeyRegisterResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/webauthn/passkey/register',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Register passkey
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static postWebauthnPasskeyRegister(data: PostWebauthnPasskeyRegisterData): CancelablePromise<PostWebauthnPasskeyRegisterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/webauthn/passkey/register',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error',
                500: ''
            }
        });
    }
    
}

export class PasskeyService {
    /**
     * Get a passkey challenge
     * @returns unknown
     * @throws ApiError
     */
    public static getWebauthnPasskey(): CancelablePromise<GetWebauthnPasskeyResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/webauthn/passkey'
        });
    }
    
    /**
     * Login with a passkey
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static postWebauthnPasskey(data: PostWebauthnPasskeyData): CancelablePromise<PostWebauthnPasskeyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/webauthn/passkey',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: '',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get passkey registration options
     * @returns unknown
     * @throws ApiError
     */
    public static getWebauthnPasskeyRegister(): CancelablePromise<GetWebauthnPasskeyRegisterResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/webauthn/passkey/register',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Register passkey
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static postWebauthnPasskeyRegister(data: PostWebauthnPasskeyRegisterData): CancelablePromise<PostWebauthnPasskeyRegisterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/webauthn/passkey/register',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error',
                500: ''
            }
        });
    }
    
}

export class BatchesService {
    /**
     * Get all of the batches
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiBatches(): CancelablePromise<GetHorizonApiBatchesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/batches'
        });
    }
    
    /**
     * Get the details of a batch by ID
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiBatchesById(data: GetHorizonApiBatchesByIdData): CancelablePromise<GetHorizonApiBatchesByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/batches/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * Retry the given batch
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static postHorizonApiBatchesRetryById(data: PostHorizonApiBatchesRetryByIdData): CancelablePromise<PostHorizonApiBatchesRetryByIdResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/-/horizon/api/batches/retry/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class CompletedJobsService {
    /**
     * Get all of the completed jobs
     * @param data The data for the request.
     * @param data.startingAt
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiJobsCompleted(data: GetHorizonApiJobsCompletedData = {}): CancelablePromise<GetHorizonApiJobsCompletedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/jobs/completed',
            query: {
                starting_at: data.startingAt
            }
        });
    }
    
}

export class DashboardStatsService {
    /**
     * Get the key performance stats for the dashboard
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiStats(): CancelablePromise<GetHorizonApiStatsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/stats'
        });
    }
    
}

export class FailedJobsService {
    /**
     * Get all of the failed jobs
     * @param data The data for the request.
     * @param data.tag
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiJobsFailed(data: GetHorizonApiJobsFailedData = {}): CancelablePromise<GetHorizonApiJobsFailedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/jobs/failed',
            query: {
                tag: data.tag
            }
        });
    }
    
    /**
     * Get a failed job instance
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiJobsFailedById(data: GetHorizonApiJobsFailedByIdData): CancelablePromise<GetHorizonApiJobsFailedByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/jobs/failed/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class FilesService {
    /**
     * @returns LogFileResource Array of `LogFileResource`
     * @throws ApiError
     */
    public static getSystemLogViewerApiFiles(): CancelablePromise<GetSystemLogViewerApiFilesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/files'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.fileIdentifier
     * @returns unknown
     * @throws ApiError
     */
    public static getSystemLogViewerApiFilesByFileIdentifierDownloadRequest(data: GetSystemLogViewerApiFilesByFileIdentifierDownloadRequestData): CancelablePromise<GetSystemLogViewerApiFilesByFileIdentifierDownloadRequestResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/files/{fileIdentifier}/download/request',
            path: {
                fileIdentifier: data.fileIdentifier
            },
            errors: {
                403: 'Authorization error',
                404: 'Not found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.fileIdentifier
     * @returns unknown
     * @throws ApiError
     */
    public static postSystemLogViewerApiFilesByFileIdentifierClearCache(data: PostSystemLogViewerApiFilesByFileIdentifierClearCacheData): CancelablePromise<PostSystemLogViewerApiFilesByFileIdentifierClearCacheResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/system/log-viewer/api/files/{fileIdentifier}/clear-cache',
            path: {
                fileIdentifier: data.fileIdentifier
            },
            errors: {
                404: 'Not found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.fileIdentifier
     * @returns unknown
     * @throws ApiError
     */
    public static deleteSystemLogViewerApiFilesByFileIdentifier(data: DeleteSystemLogViewerApiFilesByFileIdentifierData): CancelablePromise<DeleteSystemLogViewerApiFilesByFileIdentifierResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/system/log-viewer/api/files/{fileIdentifier}',
            path: {
                fileIdentifier: data.fileIdentifier
            },
            errors: {
                403: 'Authorization error'
            }
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static postSystemLogViewerApiClearCacheAll(): CancelablePromise<PostSystemLogViewerApiClearCacheAllResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/system/log-viewer/api/clear-cache-all'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static postSystemLogViewerApiDeleteMultipleFiles(data: PostSystemLogViewerApiDeleteMultipleFilesData = {}): CancelablePromise<PostSystemLogViewerApiDeleteMultipleFilesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/system/log-viewer/api/delete-multiple-files',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.fileIdentifier
     * @returns string
     * @throws ApiError
     */
    public static getSystemLogViewerApiFilesByFileIdentifierDownload(data: GetSystemLogViewerApiFilesByFileIdentifierDownloadData): CancelablePromise<GetSystemLogViewerApiFilesByFileIdentifierDownloadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/files/{fileIdentifier}/download',
            path: {
                fileIdentifier: data.fileIdentifier
            }
        });
    }
    
}

export class FoldersService {
    /**
     * @param data The data for the request.
     * @param data.direction
     * @returns LogFolderResource Array of `LogFolderResource`
     * @throws ApiError
     */
    public static getSystemLogViewerApiFolders(data: GetSystemLogViewerApiFoldersData = {}): CancelablePromise<GetSystemLogViewerApiFoldersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/folders',
            query: {
                direction: data.direction
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.folderIdentifier
     * @returns unknown
     * @throws ApiError
     */
    public static getSystemLogViewerApiFoldersByFolderIdentifierDownloadRequest(data: GetSystemLogViewerApiFoldersByFolderIdentifierDownloadRequestData): CancelablePromise<GetSystemLogViewerApiFoldersByFolderIdentifierDownloadRequestResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/folders/{folderIdentifier}/download/request',
            path: {
                folderIdentifier: data.folderIdentifier
            },
            errors: {
                403: 'Authorization error',
                404: 'Not found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.folderIdentifier
     * @returns unknown
     * @throws ApiError
     */
    public static postSystemLogViewerApiFoldersByFolderIdentifierClearCache(data: PostSystemLogViewerApiFoldersByFolderIdentifierClearCacheData): CancelablePromise<PostSystemLogViewerApiFoldersByFolderIdentifierClearCacheResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/system/log-viewer/api/folders/{folderIdentifier}/clear-cache',
            path: {
                folderIdentifier: data.folderIdentifier
            },
            errors: {
                404: 'Not found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.folderIdentifier
     * @returns unknown
     * @throws ApiError
     */
    public static deleteSystemLogViewerApiFoldersByFolderIdentifier(data: DeleteSystemLogViewerApiFoldersByFolderIdentifierData): CancelablePromise<DeleteSystemLogViewerApiFoldersByFolderIdentifierResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/system/log-viewer/api/folders/{folderIdentifier}',
            path: {
                folderIdentifier: data.folderIdentifier
            },
            errors: {
                403: 'Authorization error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.folderIdentifier
     * @returns string
     * @throws ApiError
     */
    public static getSystemLogViewerApiFoldersByFolderIdentifierDownload(data: GetSystemLogViewerApiFoldersByFolderIdentifierDownloadData): CancelablePromise<GetSystemLogViewerApiFoldersByFolderIdentifierDownloadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/folders/{folderIdentifier}/download',
            path: {
                folderIdentifier: data.folderIdentifier
            }
        });
    }
    
}

export class GenreService {
    /**
     * Get a collection of genres
     * @param data The data for the request.
     * @param data.fields
     * @param data.relations
     * @param data.librarySlug
     * @param data.page
     * @param data.limit
     * @returns unknown Paginated set of `GenreResource`
     * @throws ApiError
     */
    public static getApiGenres(data: GetApiGenresData = {}): CancelablePromise<GetApiGenresResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/genres',
            query: {
                fields: data.fields,
                relations: data.relations,
                librarySlug: data.librarySlug,
                page: data.page,
                limit: data.limit
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get a genre
     * @param data The data for the request.
     * @param data.genre The genre slug
     * @returns GenreResource `GenreResource`
     * @throws ApiError
     */
    public static getApiGenresByGenre(data: GetApiGenresByGenreData): CancelablePromise<GetApiGenresByGenreResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/genres/{genre}',
            path: {
                genre: data.genre
            },
            errors: {
                401: 'Unauthenticated',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Update a genre
     * @param data The data for the request.
     * @param data.genre The genre slug
     * @param data.requestBody
     * @returns GenreResource `GenreResource`
     * @throws ApiError
     */
    public static patchApiGenresByGenre(data: PatchApiGenresByGenreData): CancelablePromise<PatchApiGenresByGenreResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/genres/{genre}',
            path: {
                genre: data.genre
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Delete a genre
     * @param data The data for the request.
     * @param data.genre The genre slug
     * @returns void No content
     * @throws ApiError
     */
    public static deleteApiGenresByGenre(data: DeleteApiGenresByGenreData): CancelablePromise<DeleteApiGenresByGenreResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/genres/{genre}',
            path: {
                genre: data.genre
            },
            errors: {
                401: 'Unauthenticated',
                404: 'Not found'
            }
        });
    }
    
}

export class HostsService {
    /**
     * @returns LogViewerHostResource Array of `LogViewerHostResource`
     * @throws ApiError
     */
    public static getSystemLogViewerApiHosts(): CancelablePromise<GetSystemLogViewerApiHostsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/hosts'
        });
    }
    
}

export class ImageService {
    /**
     * Get an image asset
     * @param data The data for the request.
     * @param data.image The image public id
     * @returns string
     * @throws ApiError
     */
    public static getApiImagesByImage(data: GetApiImagesByImageData): CancelablePromise<GetApiImagesByImageResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/images/{image}',
            path: {
                image: data.image
            },
            errors: {
                404: 'Not found'
            }
        });
    }
    
}

export class JobService {
    /**
     * Scan a library
     * @param data The data for the request.
     * @param data.slug
     * @returns unknown
     * @throws ApiError
     */
    public static postApiJobsScanLibraryBySlug(data: PostApiJobsScanLibraryBySlugData): CancelablePromise<PostApiJobsScanLibraryBySlugResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/jobs/scanLibrary/{slug}',
            path: {
                slug: data.slug
            },
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
}

export class JobMetricsService {
    /**
     * Get all of the measured jobs
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiMetricsJobs(): CancelablePromise<GetHorizonApiMetricsJobsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/metrics/jobs'
        });
    }
    
    /**
     * Get metrics for a given job
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiMetricsJobsById(data: GetHorizonApiMetricsJobsByIdData): CancelablePromise<GetHorizonApiMetricsJobsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/metrics/jobs/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class JobsService {
    /**
     * Get the details of a recent job by ID
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiJobsById(data: GetHorizonApiJobsByIdData): CancelablePromise<GetHorizonApiJobsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/jobs/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class LibraryService {
    /**
     * Get a collection of media libraries
     * @param data The data for the request.
     * @param data.page
     * @param data.limit
     * @returns unknown Paginated set of `LibraryResource`
     * @throws ApiError
     */
    public static getApiLibraries(data: GetApiLibrariesData = {}): CancelablePromise<GetApiLibrariesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries',
            query: {
                page: data.page,
                limit: data.limit
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Create a library
     * @param data The data for the request.
     * @param data.requestBody
     * @returns LibraryResource `LibraryResource`
     * @throws ApiError
     */
    public static postApiLibraries(data: PostApiLibrariesData): CancelablePromise<PostApiLibrariesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/libraries',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Show library
     * @param data The data for the request.
     * @param data.slug
     * @returns LibraryResource `LibraryResource`
     * @throws ApiError
     */
    public static getApiLibrariesBySlug(data: GetApiLibrariesBySlugData): CancelablePromise<GetApiLibrariesBySlugResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries/{slug}',
            path: {
                slug: data.slug
            },
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Update a library specified by the provided slug
     * @param data The data for the request.
     * @param data.slug
     * @param data.requestBody
     * @returns LibraryResource `LibraryResource`
     * @throws ApiError
     */
    public static patchApiLibrariesBySlug(data: PatchApiLibrariesBySlugData): CancelablePromise<PatchApiLibrariesBySlugResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/libraries/{slug}',
            path: {
                slug: data.slug
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Delete a library
     * @param data The data for the request.
     * @param data.slug
     * @returns void No content
     * @throws ApiError
     */
    public static deleteApiLibrariesBySlug(data: DeleteApiLibrariesBySlugData): CancelablePromise<DeleteApiLibrariesBySlugResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/libraries/{slug}',
            path: {
                slug: data.slug
            },
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
}

export class LogsService {
    /**
     * @param data The data for the request.
     * @param data.file
     * @param data.query
     * @param data.direction
     * @param data.log
     * @param data.excludeLevels
     * @param data.excludeFileTypes
     * @param data.perPage
     * @param data.shorterStackTraces
     * @returns unknown
     * @throws ApiError
     */
    public static getSystemLogViewerApiLogs(data: GetSystemLogViewerApiLogsData = {}): CancelablePromise<GetSystemLogViewerApiLogsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/system/log-viewer/api/logs',
            query: {
                file: data.file,
                query: data.query,
                direction: data.direction,
                log: data.log,
                exclude_levels: data.excludeLevels,
                exclude_file_types: data.excludeFileTypes,
                per_page: data.perPage,
                shorter_stack_traces: data.shorterStackTraces
            }
        });
    }
    
}

export class MasterSupervisorService {
    /**
     * Get all of the master supervisors and their underlying supervisors
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiMasters(): CancelablePromise<GetHorizonApiMastersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/masters'
        });
    }
    
}

export class MonitoringService {
    /**
     * Get all of the monitored tags and their job counts
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiMonitoring(): CancelablePromise<GetHorizonApiMonitoringResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/monitoring'
        });
    }
    
    /**
     * Start monitoring the given tag
     * @returns unknown
     * @throws ApiError
     */
    public static postHorizonApiMonitoring(): CancelablePromise<PostHorizonApiMonitoringResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/-/horizon/api/monitoring'
        });
    }
    
    /**
     * Paginate the jobs for a given tag
     * @param data The data for the request.
     * @param data.tag
     * @param data.limit
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiMonitoringByTag(data: GetHorizonApiMonitoringByTagData): CancelablePromise<GetHorizonApiMonitoringByTagResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/monitoring/{tag}',
            path: {
                tag: data.tag
            },
            query: {
                limit: data.limit
            }
        });
    }
    
    /**
     * Stop monitoring the given tag
     * @param data The data for the request.
     * @param data.tag
     * @returns unknown
     * @throws ApiError
     */
    public static deleteHorizonApiMonitoringByTag(data: DeleteHorizonApiMonitoringByTagData): CancelablePromise<DeleteHorizonApiMonitoringByTagResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/-/horizon/api/monitoring/{tag}',
            path: {
                tag: data.tag
            }
        });
    }
    
}

export class OpCacheService {
    /**
     * Get status
     * @returns unknown
     * @throws ApiError
     */
    public static getApiOpcacheStatus(): CancelablePromise<GetApiOpcacheStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/opcache/status',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Get config
     * @returns unknown
     * @throws ApiError
     */
    public static getApiOpcacheConfig(): CancelablePromise<GetApiOpcacheConfigResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/opcache/config',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Clear
     * @returns unknown
     * @throws ApiError
     */
    public static postApiOpcacheClear(): CancelablePromise<PostApiOpcacheClearResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/opcache/clear',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Compile cache
     * @param data The data for the request.
     * @param data.force
     * @returns unknown
     * @throws ApiError
     */
    public static postApiOpcacheCompile(data: PostApiOpcacheCompileData = {}): CancelablePromise<PostApiOpcacheCompileResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/opcache/compile',
            query: {
                force: data.force
            },
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
}

export class PendingJobsService {
    /**
     * Get all of the pending jobs
     * @param data The data for the request.
     * @param data.startingAt
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiJobsPending(data: GetHorizonApiJobsPendingData = {}): CancelablePromise<GetHorizonApiJobsPendingResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/jobs/pending',
            query: {
                starting_at: data.startingAt
            }
        });
    }
    
}

export class PlaylistService {
    /**
     * Get a collection of playlists
     * @returns unknown Paginated set of `PlaylistResource`
     * @throws ApiError
     */
    public static getApiPlaylists(): CancelablePromise<GetApiPlaylistsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/playlists',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Create a playlist
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PlaylistResource `PlaylistResource`
     * @throws ApiError
     */
    public static postApiPlaylists(data: PostApiPlaylistsData): CancelablePromise<PostApiPlaylistsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/playlists',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Show a playlist
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @param data.relations
     * @returns PlaylistResource `PlaylistResource`
     * @throws ApiError
     */
    public static getApiPlaylistsByPlaylist(data: GetApiPlaylistsByPlaylistData): CancelablePromise<GetApiPlaylistsByPlaylistResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/playlists/{playlist}',
            path: {
                playlist: data.playlist
            },
            query: {
                relations: data.relations
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Update a playlist
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @param data.requestBody
     * @returns PlaylistResource `PlaylistResource`
     * @throws ApiError
     */
    public static putApiPlaylistsByPlaylist(data: PutApiPlaylistsByPlaylistData): CancelablePromise<PutApiPlaylistsByPlaylistResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/playlists/{playlist}',
            path: {
                playlist: data.playlist
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Delete a playlist
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @returns void No content
     * @throws ApiError
     */
    public static deleteApiPlaylistsByPlaylist(data: DeleteApiPlaylistsByPlaylistData): CancelablePromise<DeleteApiPlaylistsByPlaylistResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/playlists/{playlist}',
            path: {
                playlist: data.playlist
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Add a song
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @param data.song The song public id
     * @returns unknown
     * @throws ApiError
     */
    public static postApiPlaylistsByPlaylistSongsBySong(data: PostApiPlaylistsByPlaylistSongsBySongData): CancelablePromise<PostApiPlaylistsByPlaylistSongsBySongResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/playlists/{playlist}/songs/{song}',
            path: {
                playlist: data.playlist,
                song: data.song
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Remove a song
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @param data.song The song public id
     * @returns unknown
     * @throws ApiError
     */
    public static deleteApiPlaylistsByPlaylistSongsBySong(data: DeleteApiPlaylistsByPlaylistSongsBySongData): CancelablePromise<DeleteApiPlaylistsByPlaylistSongsBySongResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/playlists/{playlist}/songs/{song}',
            path: {
                playlist: data.playlist,
                song: data.song
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Reorder songs
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static postApiPlaylistsByPlaylistReorder(data: PostApiPlaylistsByPlaylistReorderData): CancelablePromise<PostApiPlaylistsByPlaylistReorderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/playlists/{playlist}/reorder',
            path: {
                playlist: data.playlist
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Add collaborator
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static postApiPlaylistsByPlaylistCollaborators(data: PostApiPlaylistsByPlaylistCollaboratorsData): CancelablePromise<PostApiPlaylistsByPlaylistCollaboratorsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/playlists/{playlist}/collaborators',
            path: {
                playlist: data.playlist
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Remove collaborator
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @param data.user The user ID
     * @returns unknown
     * @throws ApiError
     */
    public static deleteApiPlaylistsByPlaylistCollaboratorsByUser(data: DeleteApiPlaylistsByPlaylistCollaboratorsByUserData): CancelablePromise<DeleteApiPlaylistsByPlaylistCollaboratorsByUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/playlists/{playlist}/collaborators/{user}',
            path: {
                playlist: data.playlist,
                user: data.user
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Clone playlist
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @returns PlaylistResource `PlaylistResource`
     * @throws ApiError
     */
    public static postApiPlaylistsByPlaylistClone(data: PostApiPlaylistsByPlaylistCloneData): CancelablePromise<PostApiPlaylistsByPlaylistCloneResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/playlists/{playlist}/clone',
            path: {
                playlist: data.playlist
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Get statistics
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @returns PlaylistStatistic `PlaylistStatistic`
     * @throws ApiError
     */
    public static getApiPlaylistsByPlaylistStatistics(data: GetApiPlaylistsByPlaylistStatisticsData): CancelablePromise<GetApiPlaylistsByPlaylistStatisticsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/playlists/{playlist}/statistics',
            path: {
                playlist: data.playlist
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Statistics - Record view
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @returns unknown
     * @throws ApiError
     */
    public static postApiPlaylistsByPlaylistStatisticsRecordView(data: PostApiPlaylistsByPlaylistStatisticsRecordViewData): CancelablePromise<PostApiPlaylistsByPlaylistStatisticsRecordViewResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/playlists/{playlist}/statistics/record/view',
            path: {
                playlist: data.playlist
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Statistics - Record play
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @returns unknown
     * @throws ApiError
     */
    public static postApiPlaylistsByPlaylistStatisticsRecordPlay(data: PostApiPlaylistsByPlaylistStatisticsRecordPlayData): CancelablePromise<PostApiPlaylistsByPlaylistStatisticsRecordPlayResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/playlists/{playlist}/statistics/record/play',
            path: {
                playlist: data.playlist
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Share
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @returns unknown
     * @throws ApiError
     */
    public static postApiPlaylistsByPlaylistStatisticsRecordShare(data: PostApiPlaylistsByPlaylistStatisticsRecordShareData): CancelablePromise<PostApiPlaylistsByPlaylistStatisticsRecordShareResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/playlists/{playlist}/statistics/record/share',
            path: {
                playlist: data.playlist
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Favorite
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @returns unknown
     * @throws ApiError
     */
    public static postApiPlaylistsByPlaylistStatisticsRecordFavorite(data: PostApiPlaylistsByPlaylistStatisticsRecordFavoriteData): CancelablePromise<PostApiPlaylistsByPlaylistStatisticsRecordFavoriteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/playlists/{playlist}/statistics/record/favorite',
            path: {
                playlist: data.playlist
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Smart playlist - Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PlaylistResource `PlaylistResource`
     * @throws ApiError
     */
    public static postApiPlaylistsSmart(data: PostApiPlaylistsSmartData): CancelablePromise<PostApiPlaylistsSmartResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/playlists/smart',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Smart playlist - Update rules
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @param data.requestBody
     * @returns PlaylistResource `PlaylistResource`
     * @throws ApiError
     */
    public static putApiPlaylistsByPlaylistSmart(data: PutApiPlaylistsByPlaylistSmartData): CancelablePromise<PutApiPlaylistsByPlaylistSmartResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/playlists/{playlist}/smart',
            path: {
                playlist: data.playlist
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'An error',
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Smart playlist - Sync
     * @param data The data for the request.
     * @param data.playlist The playlist public id
     * @returns unknown
     * @throws ApiError
     */
    public static postApiPlaylistsByPlaylistSmartSync(data: PostApiPlaylistsByPlaylistSmartSyncData): CancelablePromise<PostApiPlaylistsByPlaylistSmartSyncResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/playlists/{playlist}/smart/sync',
            path: {
                playlist: data.playlist
            },
            errors: {
                400: 'An error',
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found'
            }
        });
    }
    
}

export class QueueService {
    /**
     * Get a collection of monitor entries
     * @param data The data for the request.
     * @param data.page
     * @param data.limit
     * @param data.status
     * @param data.queue
     * @param data.name
     * @param data.queuedFirst
     * @returns unknown Paginated set of `QueueMonitorResource`
     * @throws ApiError
     */
    public static getApiQueueMetrics(data: GetApiQueueMetricsData = {}): CancelablePromise<GetApiQueueMetricsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/queue-metrics',
            query: {
                page: data.page,
                limit: data.limit,
                status: data.status,
                queue: data.queue,
                name: data.name,
                queuedFirst: data.queuedFirst
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get a list of queue names
     * @returns unknown
     * @throws ApiError
     */
    public static getApiQueueMetricsQueues(): CancelablePromise<GetApiQueueMetricsQueuesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/queue-metrics/queues',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Get a metrics collection
     * @param data The data for the request.
     * @param data.aggregateDays
     * @returns unknown
     * @throws ApiError
     */
    public static getApiQueueMetricsMetrics(data: GetApiQueueMetricsMetricsData = {}): CancelablePromise<GetApiQueueMetricsMetricsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/queue-metrics/metrics',
            query: {
                aggregateDays: data.aggregateDays
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Retry a job
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static postApiQueueMetricsRetryById(data: PostApiQueueMetricsRetryByIdData): CancelablePromise<PostApiQueueMetricsRetryByIdResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/queue-metrics/retry/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'An error',
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Delete by id
     * @param data The data for the request.
     * @param data.id
     * @returns void No content
     * @throws ApiError
     */
    public static deleteApiQueueMetricsById(data: DeleteApiQueueMetricsByIdData): CancelablePromise<DeleteApiQueueMetricsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/queue-metrics/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Purge all records
     * @returns void No content
     * @throws ApiError
     */
    public static deleteApiQueueMetricsPurge(): CancelablePromise<DeleteApiQueueMetricsPurgeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/queue-metrics/purge',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
}

export class QueueMetricsService {
    /**
     * Get all of the measured queues
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiMetricsQueues(): CancelablePromise<GetHorizonApiMetricsQueuesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/metrics/queues'
        });
    }
    
    /**
     * Get metrics for a given queue
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiMetricsQueuesById(data: GetHorizonApiMetricsQueuesByIdData): CancelablePromise<GetHorizonApiMetricsQueuesByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/metrics/queues/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class RetryService {
    /**
     * Retry a failed job
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static postHorizonApiJobsRetryById(data: PostHorizonApiJobsRetryByIdData): CancelablePromise<PostHorizonApiJobsRetryByIdResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/-/horizon/api/jobs/retry/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class SchemaService {
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static getApiSchemasMusicbrainz(): CancelablePromise<GetApiSchemasMusicbrainzResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/schemas/musicbrainz'
        });
    }
    
}

export class SilencedJobsService {
    /**
     * Get all of the silenced jobs
     * @param data The data for the request.
     * @param data.startingAt
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiJobsSilenced(data: GetHorizonApiJobsSilencedData = {}): CancelablePromise<GetHorizonApiJobsSilencedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/jobs/silenced',
            query: {
                starting_at: data.startingAt
            }
        });
    }
    
}

export class SongService {
    /**
     * Get a collection of songs
     * @param data The data for the request.
     * @param data.library The library slug
     * @param data.page
     * @param data.limit
     * @param data.genreNames
     * @param data.genreSlugs
     * @param data.relations
     * @returns unknown Paginated set of `SongResource`
     * @throws ApiError
     */
    public static getApiLibrariesByLibrarySongs(data: GetApiLibrariesByLibrarySongsData): CancelablePromise<GetApiLibrariesByLibrarySongsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries/{library}/songs',
            path: {
                library: data.library
            },
            query: {
                page: data.page,
                limit: data.limit,
                genreNames: data.genreNames,
                genreSlugs: data.genreSlugs,
                relations: data.relations
            },
            errors: {
                400: 'An error',
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get a song by public id
     * @param data The data for the request.
     * @param data.library The library slug
     * @param data.publicId
     * @param data.relations
     * @returns SongResource `SongResource`
     * @throws ApiError
     */
    public static getApiLibrariesByLibrarySongsByPublicId(data: GetApiLibrariesByLibrarySongsByPublicIdData): CancelablePromise<GetApiLibrariesByLibrarySongsByPublicIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/libraries/{library}/songs/{publicId}',
            path: {
                library: data.library,
                publicId: data.publicId
            },
            query: {
                relations: data.relations
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found',
                422: 'Validation error'
            }
        });
    }
    
}

export class StreamService {
    /**
     * Direct stream the song.
     * Requires token with "access-stream"
     * @param data The data for the request.
     * @param data.song The song public id
     * @returns unknown
     * @throws ApiError
     */
    public static getApiStreamSongBySongDirect(data: GetApiStreamSongBySongDirectData): CancelablePromise<GetApiStreamSongBySongDirectResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/stream/song/{song}/direct',
            path: {
                song: data.song
            },
            errors: {
                401: 'Unauthenticated',
                404: 'Not found'
            }
        });
    }
    
}

export class SystemInfoService {
    /**
     * Get php info
     * @returns unknown
     * @throws ApiError
     */
    public static getApiSystemInfo(): CancelablePromise<GetApiSystemInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/system-info',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static getApiSystemInfoSys(): CancelablePromise<GetApiSystemInfoSysResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/system-info/sys',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
}

export class UserService {
    /**
     * Get a collection of users
     * @param data The data for the request.
     * @param data.page
     * @param data.limit
     * @param data.globalFilter
     * @param data.filters
     * @param data.filterModes
     * @param data.sorting
     * @returns unknown Paginated set of `UserResource`
     * @throws ApiError
     */
    public static getApiUsers(data: GetApiUsersData = {}): CancelablePromise<GetApiUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users',
            query: {
                page: data.page,
                limit: data.limit,
                globalFilter: data.globalFilter,
                filters: data.filters,
                filterModes: data.filterModes,
                sorting: data.sorting
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Create user
     * This is endpoint allows administrators to create users
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserResource `UserResource`
     * @throws ApiError
     */
    public static postApiUsers(data: PostApiUsersData): CancelablePromise<PostApiUsersResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/users',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Update a user
     * @param data The data for the request.
     * @param data.user The user ID
     * @param data.requestBody
     * @returns UserResource `UserResource`
     * @throws ApiError
     */
    public static patchApiUsersByUser(data: PatchApiUsersByUserData): CancelablePromise<PatchApiUsersByUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/users/{user}',
            path: {
                user: data.user
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                404: 'Not found',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Get small user detail info
     * @param data The data for the request.
     * @param data.user The user ID
     * @returns UserResource `UserResource`
     * @throws ApiError
     */
    public static getApiUsersByUser(data: GetApiUsersByUserData): CancelablePromise<GetApiUsersByUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/{user}',
            path: {
                user: data.user
            },
            errors: {
                401: 'Unauthenticated',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Delete a user
     * @param data The data for the request.
     * @param data.user
     * @returns void No content
     * @throws ApiError
     */
    public static deleteApiUsersByUser(data: DeleteApiUsersByUserData): CancelablePromise<DeleteApiUsersByUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/users/{user}',
            path: {
                user: data.user
            },
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
    /**
     * Get the authenticated user
     * @returns UserResource `UserResource`
     * @throws ApiError
     */
    public static getApiUsersMe(): CancelablePromise<GetApiUsersMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/me',
            errors: {
                401: 'Unauthenticated'
            }
        });
    }
    
}

export class UserTokenService {
    /**
     * Get a collection of tokens
     * @param data The data for the request.
     * @param data.user
     * @param data.page
     * @param data.perPage
     * @returns unknown Paginated set of `PersonalAccessTokenViewResource`
     * @throws ApiError
     */
    public static getApiUsersTokensByUser(data: GetApiUsersTokensByUserData): CancelablePromise<GetApiUsersTokensByUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/tokens/{user}',
            path: {
                user: data.user
            },
            query: {
                page: data.page,
                perPage: data.perPage
            },
            errors: {
                401: 'Unauthenticated',
                403: 'Authorization error',
                422: 'Validation error'
            }
        });
    }
    
    /**
     * Revoke a given token
     * @param data The data for the request.
     * @param data.token The token ID
     * @returns void No content
     * @throws ApiError
     */
    public static deleteApiUsersTokensByToken(data: DeleteApiUsersTokensByTokenData): CancelablePromise<DeleteApiUsersTokensByTokenResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/users/tokens/{token}',
            path: {
                token: data.token
            },
            errors: {
                401: 'Unauthenticated',
                404: 'Not found'
            }
        });
    }
    
}

export class WorkloadService {
    /**
     * Get the current queue workload for the application
     * @returns unknown
     * @throws ApiError
     */
    public static getHorizonApiWorkload(): CancelablePromise<GetHorizonApiWorkloadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/-/horizon/api/workload'
        });
    }
    
}