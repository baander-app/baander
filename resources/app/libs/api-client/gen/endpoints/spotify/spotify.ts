/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * B√•nder api docs
 * B√•nder.App is a sophisticated media server developed with the primary goal to deliver high performance and seamless experience for users.
Being built on top of Laravel framework and PostgreSQL for database, it leverages the power of robust backend technologies, providing high security, reliability, and scalability.

The main focus of B√•nder.App is efficient media management and delivery.
This application is designed to handle large amounts of media files while ensuring quick and efficient access.
Implemented queuing functionality through Redis offers efficient job management and load handling.
The media information is organized and easily searchable, ensuring users can always find what they are looking for quickly and easily.
 * OpenAPI spec version: 0.0.1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  AuthenticationExceptionResponse,
  SpotifyAuthorize200,
  SpotifyAuthorize500,
  SpotifyCallback200,
  SpotifyCallback400,
  SpotifyCallback500,
  SpotifyCallbackParams,
  SpotifyDisconnect200,
  SpotifyGenresSeeds500,
  SpotifySearch400,
  SpotifySearch500,
  SpotifySearchParams,
  SpotifyStatus200,
  SpotifyUserPlaylists500,
  SpotifyUserPlaylistsParams,
  SpotifyUserProfile500,
} from "../../models";

import { customInstance } from "../../../axios-instance";
import type { ErrorType } from "../../../axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const spotifyAuthorize = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<SpotifyAuthorize200>(
    { url: `/api/services/spotify/authorize`, method: "GET", signal },
    options
  );
};

export const getSpotifyAuthorizeQueryKey = () => {
  return [`/api/services/spotify/authorize`] as const;
};

export const getSpotifyAuthorizeInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyAuthorize>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof spotifyAuthorize>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyAuthorizeQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyAuthorize>>
  > = ({ signal }) => spotifyAuthorize(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof spotifyAuthorize>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyAuthorizeInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyAuthorize>>
>;
export type SpotifyAuthorizeInfiniteQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyAuthorize500
>;

export function useSpotifyAuthorizeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyAuthorize>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyAuthorize>>,
          TError,
          Awaited<ReturnType<typeof spotifyAuthorize>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyAuthorizeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyAuthorize>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyAuthorize>>,
          TError,
          Awaited<ReturnType<typeof spotifyAuthorize>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyAuthorizeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyAuthorize>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyAuthorizeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyAuthorize>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyAuthorizeInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyAuthorizeQueryOptions = <
  TData = Awaited<ReturnType<typeof spotifyAuthorize>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof spotifyAuthorize>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyAuthorizeQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyAuthorize>>
  > = ({ signal }) => spotifyAuthorize(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof spotifyAuthorize>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyAuthorizeQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyAuthorize>>
>;
export type SpotifyAuthorizeQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyAuthorize500
>;

export function useSpotifyAuthorize<
  TData = Awaited<ReturnType<typeof spotifyAuthorize>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyAuthorize>>,
          TError,
          Awaited<ReturnType<typeof spotifyAuthorize>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyAuthorize<
  TData = Awaited<ReturnType<typeof spotifyAuthorize>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyAuthorize>>,
          TError,
          Awaited<ReturnType<typeof spotifyAuthorize>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyAuthorize<
  TData = Awaited<ReturnType<typeof spotifyAuthorize>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyAuthorize<
  TData = Awaited<ReturnType<typeof spotifyAuthorize>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyAuthorizeQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyAuthorizeSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof spotifyAuthorize>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof spotifyAuthorize>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyAuthorizeQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyAuthorize>>
  > = ({ signal }) => spotifyAuthorize(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof spotifyAuthorize>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyAuthorizeSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyAuthorize>>
>;
export type SpotifyAuthorizeSuspenseQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyAuthorize500
>;

export function useSpotifyAuthorizeSuspense<
  TData = Awaited<ReturnType<typeof spotifyAuthorize>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyAuthorizeSuspense<
  TData = Awaited<ReturnType<typeof spotifyAuthorize>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyAuthorizeSuspense<
  TData = Awaited<ReturnType<typeof spotifyAuthorize>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyAuthorizeSuspense<
  TData = Awaited<ReturnType<typeof spotifyAuthorize>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyAuthorizeSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyAuthorizeSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyAuthorize>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(options?: {
  query?: Partial<
    UseSuspenseInfiniteQueryOptions<
      Awaited<ReturnType<typeof spotifyAuthorize>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyAuthorizeQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyAuthorize>>
  > = ({ signal }) => spotifyAuthorize(requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof spotifyAuthorize>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyAuthorizeSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyAuthorize>>
>;
export type SpotifyAuthorizeSuspenseInfiniteQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyAuthorize500
>;

export function useSpotifyAuthorizeSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyAuthorize>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyAuthorizeSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyAuthorize>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyAuthorizeSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyAuthorize>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyAuthorizeSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyAuthorize>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyAuthorize500>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyAuthorizeSuspenseInfiniteQueryOptions(options);

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const spotifyCallback = (
  params?: SpotifyCallbackParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<SpotifyCallback200>(
    { url: `/api/services/spotify/callback`, method: "GET", params, signal },
    options
  );
};

export const getSpotifyCallbackQueryKey = (params?: SpotifyCallbackParams) => {
  return [
    `/api/services/spotify/callback`,
    ...(params ? [params] : []),
  ] as const;
};

export const getSpotifyCallbackInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyCallback>>,
    SpotifyCallbackParams["page"]
  >,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData,
        QueryKey,
        SpotifyCallbackParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyCallbackQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyCallback>>,
    QueryKey,
    SpotifyCallbackParams["page"]
  > = ({ signal, pageParam }) =>
    spotifyCallback(
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof spotifyCallback>>,
    TError,
    TData,
    QueryKey,
    SpotifyCallbackParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyCallbackInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyCallback>>
>;
export type SpotifyCallbackInfiniteQueryError = ErrorType<
  SpotifyCallback400 | SpotifyCallback500
>;

export function useSpotifyCallbackInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyCallback>>,
    SpotifyCallbackParams["page"]
  >,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params: undefined | SpotifyCallbackParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData,
        QueryKey,
        SpotifyCallbackParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyCallback>>,
          TError,
          Awaited<ReturnType<typeof spotifyCallback>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyCallbackInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyCallback>>,
    SpotifyCallbackParams["page"]
  >,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData,
        QueryKey,
        SpotifyCallbackParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyCallback>>,
          TError,
          Awaited<ReturnType<typeof spotifyCallback>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyCallbackInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyCallback>>,
    SpotifyCallbackParams["page"]
  >,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData,
        QueryKey,
        SpotifyCallbackParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyCallbackInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyCallback>>,
    SpotifyCallbackParams["page"]
  >,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData,
        QueryKey,
        SpotifyCallbackParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyCallbackInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyCallbackQueryOptions = <
  TData = Awaited<ReturnType<typeof spotifyCallback>>,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyCallbackQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof spotifyCallback>>> = ({
    signal,
  }) => spotifyCallback(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof spotifyCallback>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyCallbackQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyCallback>>
>;
export type SpotifyCallbackQueryError = ErrorType<
  SpotifyCallback400 | SpotifyCallback500
>;

export function useSpotifyCallback<
  TData = Awaited<ReturnType<typeof spotifyCallback>>,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params: undefined | SpotifyCallbackParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyCallback>>,
          TError,
          Awaited<ReturnType<typeof spotifyCallback>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyCallback<
  TData = Awaited<ReturnType<typeof spotifyCallback>>,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyCallback>>,
          TError,
          Awaited<ReturnType<typeof spotifyCallback>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyCallback<
  TData = Awaited<ReturnType<typeof spotifyCallback>>,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyCallback<
  TData = Awaited<ReturnType<typeof spotifyCallback>>,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyCallbackQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyCallbackSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof spotifyCallback>>,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyCallbackQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof spotifyCallback>>> = ({
    signal,
  }) => spotifyCallback(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof spotifyCallback>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyCallbackSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyCallback>>
>;
export type SpotifyCallbackSuspenseQueryError = ErrorType<
  SpotifyCallback400 | SpotifyCallback500
>;

export function useSpotifyCallbackSuspense<
  TData = Awaited<ReturnType<typeof spotifyCallback>>,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params: undefined | SpotifyCallbackParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyCallbackSuspense<
  TData = Awaited<ReturnType<typeof spotifyCallback>>,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyCallbackSuspense<
  TData = Awaited<ReturnType<typeof spotifyCallback>>,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyCallbackSuspense<
  TData = Awaited<ReturnType<typeof spotifyCallback>>,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyCallbackSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyCallbackSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyCallback>>,
    SpotifyCallbackParams["page"]
  >,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData,
        QueryKey,
        SpotifyCallbackParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyCallbackQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyCallback>>,
    QueryKey,
    SpotifyCallbackParams["page"]
  > = ({ signal, pageParam }) =>
    spotifyCallback(
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof spotifyCallback>>,
    TError,
    TData,
    QueryKey,
    SpotifyCallbackParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyCallbackSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyCallback>>
>;
export type SpotifyCallbackSuspenseInfiniteQueryError = ErrorType<
  SpotifyCallback400 | SpotifyCallback500
>;

export function useSpotifyCallbackSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyCallback>>,
    SpotifyCallbackParams["page"]
  >,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params: undefined | SpotifyCallbackParams,
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData,
        QueryKey,
        SpotifyCallbackParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyCallbackSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyCallback>>,
    SpotifyCallbackParams["page"]
  >,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData,
        QueryKey,
        SpotifyCallbackParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyCallbackSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyCallback>>,
    SpotifyCallbackParams["page"]
  >,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData,
        QueryKey,
        SpotifyCallbackParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyCallbackSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyCallback>>,
    SpotifyCallbackParams["page"]
  >,
  TError = ErrorType<SpotifyCallback400 | SpotifyCallback500>
>(
  params?: SpotifyCallbackParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyCallback>>,
        TError,
        TData,
        QueryKey,
        SpotifyCallbackParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyCallbackSuspenseInfiniteQueryOptions(
    params,
    options
  );

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const spotifyDisconnect = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<SpotifyDisconnect200>(
    { url: `/api/services/spotify/disconnect`, method: "POST", signal },
    options
  );
};

export const getSpotifyDisconnectMutationOptions = <
  TError = ErrorType<AuthenticationExceptionResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof spotifyDisconnect>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof spotifyDisconnect>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["spotifyDisconnect"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof spotifyDisconnect>>,
    void
  > = () => {
    return spotifyDisconnect(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SpotifyDisconnectMutationResult = NonNullable<
  Awaited<ReturnType<typeof spotifyDisconnect>>
>;

export type SpotifyDisconnectMutationError =
  ErrorType<AuthenticationExceptionResponse>;

export const useSpotifyDisconnect = <
  TError = ErrorType<AuthenticationExceptionResponse>,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof spotifyDisconnect>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof spotifyDisconnect>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getSpotifyDisconnectMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const spotifyStatus = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<SpotifyStatus200>(
    { url: `/api/services/spotify/status`, method: "GET", signal },
    options
  );
};

export const getSpotifyStatusQueryKey = () => {
  return [`/api/services/spotify/status`] as const;
};

export const getSpotifyStatusInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof spotifyStatus>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyStatusQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof spotifyStatus>>> = ({
    signal,
  }) => spotifyStatus(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof spotifyStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyStatusInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyStatus>>
>;
export type SpotifyStatusInfiniteQueryError =
  ErrorType<AuthenticationExceptionResponse>;

export function useSpotifyStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyStatus>>,
          TError,
          Awaited<ReturnType<typeof spotifyStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyStatus>>,
          TError,
          Awaited<ReturnType<typeof spotifyStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyStatusInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof spotifyStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof spotifyStatus>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyStatusQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof spotifyStatus>>> = ({
    signal,
  }) => spotifyStatus(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof spotifyStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyStatus>>
>;
export type SpotifyStatusQueryError =
  ErrorType<AuthenticationExceptionResponse>;

export function useSpotifyStatus<
  TData = Awaited<ReturnType<typeof spotifyStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof spotifyStatus>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyStatus>>,
          TError,
          Awaited<ReturnType<typeof spotifyStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyStatus<
  TData = Awaited<ReturnType<typeof spotifyStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof spotifyStatus>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyStatus>>,
          TError,
          Awaited<ReturnType<typeof spotifyStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyStatus<
  TData = Awaited<ReturnType<typeof spotifyStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof spotifyStatus>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyStatus<
  TData = Awaited<ReturnType<typeof spotifyStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof spotifyStatus>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyStatusQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyStatusSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof spotifyStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof spotifyStatus>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyStatusQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof spotifyStatus>>> = ({
    signal,
  }) => spotifyStatus(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof spotifyStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyStatusSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyStatus>>
>;
export type SpotifyStatusSuspenseQueryError =
  ErrorType<AuthenticationExceptionResponse>;

export function useSpotifyStatusSuspense<
  TData = Awaited<ReturnType<typeof spotifyStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyStatusSuspense<
  TData = Awaited<ReturnType<typeof spotifyStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyStatusSuspense<
  TData = Awaited<ReturnType<typeof spotifyStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyStatusSuspense<
  TData = Awaited<ReturnType<typeof spotifyStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyStatusSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyStatusSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(options?: {
  query?: Partial<
    UseSuspenseInfiniteQueryOptions<
      Awaited<ReturnType<typeof spotifyStatus>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyStatusQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof spotifyStatus>>> = ({
    signal,
  }) => spotifyStatus(requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof spotifyStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyStatusSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyStatus>>
>;
export type SpotifyStatusSuspenseInfiniteQueryError =
  ErrorType<AuthenticationExceptionResponse>;

export function useSpotifyStatusSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyStatusSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyStatusSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyStatusSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyStatusSuspenseInfiniteQueryOptions(options);

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const spotifyUserProfile = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<unknown[]>(
    { url: `/api/services/spotify/user/profile`, method: "GET", signal },
    options
  );
};

export const getSpotifyUserProfileQueryKey = () => {
  return [`/api/services/spotify/user/profile`] as const;
};

export const getSpotifyUserProfileInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyUserProfile>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof spotifyUserProfile>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyUserProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyUserProfile>>
  > = ({ signal }) => spotifyUserProfile(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof spotifyUserProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyUserProfileInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyUserProfile>>
>;
export type SpotifyUserProfileInfiniteQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyUserProfile500
>;

export function useSpotifyUserProfileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyUserProfile>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyUserProfile>>,
          TError,
          Awaited<ReturnType<typeof spotifyUserProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserProfileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyUserProfile>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyUserProfile>>,
          TError,
          Awaited<ReturnType<typeof spotifyUserProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserProfileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyUserProfile>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyUserProfileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyUserProfile>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyUserProfileInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyUserProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof spotifyUserProfile>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof spotifyUserProfile>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyUserProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyUserProfile>>
  > = ({ signal }) => spotifyUserProfile(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof spotifyUserProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyUserProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyUserProfile>>
>;
export type SpotifyUserProfileQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyUserProfile500
>;

export function useSpotifyUserProfile<
  TData = Awaited<ReturnType<typeof spotifyUserProfile>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyUserProfile>>,
          TError,
          Awaited<ReturnType<typeof spotifyUserProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserProfile<
  TData = Awaited<ReturnType<typeof spotifyUserProfile>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyUserProfile>>,
          TError,
          Awaited<ReturnType<typeof spotifyUserProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserProfile<
  TData = Awaited<ReturnType<typeof spotifyUserProfile>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyUserProfile<
  TData = Awaited<ReturnType<typeof spotifyUserProfile>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyUserProfileQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyUserProfileSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof spotifyUserProfile>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof spotifyUserProfile>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyUserProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyUserProfile>>
  > = ({ signal }) => spotifyUserProfile(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof spotifyUserProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyUserProfileSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyUserProfile>>
>;
export type SpotifyUserProfileSuspenseQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyUserProfile500
>;

export function useSpotifyUserProfileSuspense<
  TData = Awaited<ReturnType<typeof spotifyUserProfile>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserProfileSuspense<
  TData = Awaited<ReturnType<typeof spotifyUserProfile>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserProfileSuspense<
  TData = Awaited<ReturnType<typeof spotifyUserProfile>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyUserProfileSuspense<
  TData = Awaited<ReturnType<typeof spotifyUserProfile>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyUserProfileSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyUserProfileSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyUserProfile>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(options?: {
  query?: Partial<
    UseSuspenseInfiniteQueryOptions<
      Awaited<ReturnType<typeof spotifyUserProfile>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyUserProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyUserProfile>>
  > = ({ signal }) => spotifyUserProfile(requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof spotifyUserProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyUserProfileSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyUserProfile>>
>;
export type SpotifyUserProfileSuspenseInfiniteQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyUserProfile500
>;

export function useSpotifyUserProfileSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyUserProfile>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserProfileSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyUserProfile>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserProfileSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyUserProfile>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyUserProfileSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyUserProfile>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserProfile500>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getSpotifyUserProfileSuspenseInfiniteQueryOptions(options);

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const spotifyUserPlaylists = (
  params?: SpotifyUserPlaylistsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<unknown[]>(
    {
      url: `/api/services/spotify/user/playlists`,
      method: "GET",
      params,
      signal,
    },
    options
  );
};

export const getSpotifyUserPlaylistsQueryKey = (
  params?: SpotifyUserPlaylistsParams
) => {
  return [
    `/api/services/spotify/user/playlists`,
    ...(params ? [params] : []),
  ] as const;
};

export const getSpotifyUserPlaylistsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    SpotifyUserPlaylistsParams["page"]
  >,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData,
        QueryKey,
        SpotifyUserPlaylistsParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSpotifyUserPlaylistsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    QueryKey,
    SpotifyUserPlaylistsParams["page"]
  > = ({ signal, pageParam }) =>
    spotifyUserPlaylists(
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    TError,
    TData,
    QueryKey,
    SpotifyUserPlaylistsParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyUserPlaylistsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyUserPlaylists>>
>;
export type SpotifyUserPlaylistsInfiniteQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyUserPlaylists500
>;

export function useSpotifyUserPlaylistsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    SpotifyUserPlaylistsParams["page"]
  >,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params: undefined | SpotifyUserPlaylistsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData,
        QueryKey,
        SpotifyUserPlaylistsParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyUserPlaylists>>,
          TError,
          Awaited<ReturnType<typeof spotifyUserPlaylists>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserPlaylistsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    SpotifyUserPlaylistsParams["page"]
  >,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData,
        QueryKey,
        SpotifyUserPlaylistsParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyUserPlaylists>>,
          TError,
          Awaited<ReturnType<typeof spotifyUserPlaylists>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserPlaylistsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    SpotifyUserPlaylistsParams["page"]
  >,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData,
        QueryKey,
        SpotifyUserPlaylistsParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyUserPlaylistsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    SpotifyUserPlaylistsParams["page"]
  >,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData,
        QueryKey,
        SpotifyUserPlaylistsParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyUserPlaylistsInfiniteQueryOptions(
    params,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyUserPlaylistsQueryOptions = <
  TData = Awaited<ReturnType<typeof spotifyUserPlaylists>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSpotifyUserPlaylistsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>
  > = ({ signal }) => spotifyUserPlaylists(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyUserPlaylistsQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyUserPlaylists>>
>;
export type SpotifyUserPlaylistsQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyUserPlaylists500
>;

export function useSpotifyUserPlaylists<
  TData = Awaited<ReturnType<typeof spotifyUserPlaylists>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params: undefined | SpotifyUserPlaylistsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyUserPlaylists>>,
          TError,
          Awaited<ReturnType<typeof spotifyUserPlaylists>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserPlaylists<
  TData = Awaited<ReturnType<typeof spotifyUserPlaylists>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyUserPlaylists>>,
          TError,
          Awaited<ReturnType<typeof spotifyUserPlaylists>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserPlaylists<
  TData = Awaited<ReturnType<typeof spotifyUserPlaylists>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyUserPlaylists<
  TData = Awaited<ReturnType<typeof spotifyUserPlaylists>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyUserPlaylistsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyUserPlaylistsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof spotifyUserPlaylists>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSpotifyUserPlaylistsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>
  > = ({ signal }) => spotifyUserPlaylists(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyUserPlaylistsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyUserPlaylists>>
>;
export type SpotifyUserPlaylistsSuspenseQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyUserPlaylists500
>;

export function useSpotifyUserPlaylistsSuspense<
  TData = Awaited<ReturnType<typeof spotifyUserPlaylists>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params: undefined | SpotifyUserPlaylistsParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserPlaylistsSuspense<
  TData = Awaited<ReturnType<typeof spotifyUserPlaylists>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserPlaylistsSuspense<
  TData = Awaited<ReturnType<typeof spotifyUserPlaylists>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyUserPlaylistsSuspense<
  TData = Awaited<ReturnType<typeof spotifyUserPlaylists>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyUserPlaylistsSuspenseQueryOptions(
    params,
    options
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyUserPlaylistsSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    SpotifyUserPlaylistsParams["page"]
  >,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData,
        QueryKey,
        SpotifyUserPlaylistsParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSpotifyUserPlaylistsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    QueryKey,
    SpotifyUserPlaylistsParams["page"]
  > = ({ signal, pageParam }) =>
    spotifyUserPlaylists(
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    TError,
    TData,
    QueryKey,
    SpotifyUserPlaylistsParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyUserPlaylistsSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyUserPlaylists>>
>;
export type SpotifyUserPlaylistsSuspenseInfiniteQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyUserPlaylists500
>;

export function useSpotifyUserPlaylistsSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    SpotifyUserPlaylistsParams["page"]
  >,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params: undefined | SpotifyUserPlaylistsParams,
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData,
        QueryKey,
        SpotifyUserPlaylistsParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserPlaylistsSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    SpotifyUserPlaylistsParams["page"]
  >,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData,
        QueryKey,
        SpotifyUserPlaylistsParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyUserPlaylistsSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    SpotifyUserPlaylistsParams["page"]
  >,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData,
        QueryKey,
        SpotifyUserPlaylistsParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyUserPlaylistsSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifyUserPlaylists>>,
    SpotifyUserPlaylistsParams["page"]
  >,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyUserPlaylists500>
>(
  params?: SpotifyUserPlaylistsParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyUserPlaylists>>,
        TError,
        TData,
        QueryKey,
        SpotifyUserPlaylistsParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyUserPlaylistsSuspenseInfiniteQueryOptions(
    params,
    options
  );

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const spotifySearch = (
  params?: SpotifySearchParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<unknown[]>(
    { url: `/api/services/spotify/search`, method: "GET", params, signal },
    options
  );
};

export const getSpotifySearchQueryKey = (params?: SpotifySearchParams) => {
  return [`/api/services/spotify/search`, ...(params ? [params] : [])] as const;
};

export const getSpotifySearchInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifySearch>>,
    SpotifySearchParams["page"]
  >,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifySearch>>,
        TError,
        TData,
        QueryKey,
        SpotifySearchParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifySearchQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifySearch>>,
    QueryKey,
    SpotifySearchParams["page"]
  > = ({ signal, pageParam }) =>
    spotifySearch(
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof spotifySearch>>,
    TError,
    TData,
    QueryKey,
    SpotifySearchParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifySearchInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifySearch>>
>;
export type SpotifySearchInfiniteQueryError = ErrorType<
  SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
>;

export function useSpotifySearchInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifySearch>>,
    SpotifySearchParams["page"]
  >,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params: undefined | SpotifySearchParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifySearch>>,
        TError,
        TData,
        QueryKey,
        SpotifySearchParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifySearch>>,
          TError,
          Awaited<ReturnType<typeof spotifySearch>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifySearchInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifySearch>>,
    SpotifySearchParams["page"]
  >,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifySearch>>,
        TError,
        TData,
        QueryKey,
        SpotifySearchParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifySearch>>,
          TError,
          Awaited<ReturnType<typeof spotifySearch>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifySearchInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifySearch>>,
    SpotifySearchParams["page"]
  >,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifySearch>>,
        TError,
        TData,
        QueryKey,
        SpotifySearchParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifySearchInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifySearch>>,
    SpotifySearchParams["page"]
  >,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifySearch>>,
        TError,
        TData,
        QueryKey,
        SpotifySearchParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifySearchInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifySearchQueryOptions = <
  TData = Awaited<ReturnType<typeof spotifySearch>>,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof spotifySearch>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifySearchQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof spotifySearch>>> = ({
    signal,
  }) => spotifySearch(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof spotifySearch>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifySearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifySearch>>
>;
export type SpotifySearchQueryError = ErrorType<
  SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
>;

export function useSpotifySearch<
  TData = Awaited<ReturnType<typeof spotifySearch>>,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params: undefined | SpotifySearchParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof spotifySearch>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifySearch>>,
          TError,
          Awaited<ReturnType<typeof spotifySearch>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifySearch<
  TData = Awaited<ReturnType<typeof spotifySearch>>,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof spotifySearch>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifySearch>>,
          TError,
          Awaited<ReturnType<typeof spotifySearch>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifySearch<
  TData = Awaited<ReturnType<typeof spotifySearch>>,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof spotifySearch>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifySearch<
  TData = Awaited<ReturnType<typeof spotifySearch>>,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof spotifySearch>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifySearchQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifySearchSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof spotifySearch>>,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifySearch>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifySearchQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof spotifySearch>>> = ({
    signal,
  }) => spotifySearch(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof spotifySearch>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifySearchSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifySearch>>
>;
export type SpotifySearchSuspenseQueryError = ErrorType<
  SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
>;

export function useSpotifySearchSuspense<
  TData = Awaited<ReturnType<typeof spotifySearch>>,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params: undefined | SpotifySearchParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifySearch>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifySearchSuspense<
  TData = Awaited<ReturnType<typeof spotifySearch>>,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifySearch>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifySearchSuspense<
  TData = Awaited<ReturnType<typeof spotifySearch>>,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifySearch>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifySearchSuspense<
  TData = Awaited<ReturnType<typeof spotifySearch>>,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifySearch>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifySearchSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifySearchSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifySearch>>,
    SpotifySearchParams["page"]
  >,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifySearch>>,
        TError,
        TData,
        QueryKey,
        SpotifySearchParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifySearchQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifySearch>>,
    QueryKey,
    SpotifySearchParams["page"]
  > = ({ signal, pageParam }) =>
    spotifySearch(
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof spotifySearch>>,
    TError,
    TData,
    QueryKey,
    SpotifySearchParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifySearchSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifySearch>>
>;
export type SpotifySearchSuspenseInfiniteQueryError = ErrorType<
  SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
>;

export function useSpotifySearchSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifySearch>>,
    SpotifySearchParams["page"]
  >,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params: undefined | SpotifySearchParams,
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifySearch>>,
        TError,
        TData,
        QueryKey,
        SpotifySearchParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifySearchSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifySearch>>,
    SpotifySearchParams["page"]
  >,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifySearch>>,
        TError,
        TData,
        QueryKey,
        SpotifySearchParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifySearchSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifySearch>>,
    SpotifySearchParams["page"]
  >,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifySearch>>,
        TError,
        TData,
        QueryKey,
        SpotifySearchParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifySearchSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof spotifySearch>>,
    SpotifySearchParams["page"]
  >,
  TError = ErrorType<
    SpotifySearch400 | AuthenticationExceptionResponse | SpotifySearch500
  >
>(
  params?: SpotifySearchParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifySearch>>,
        TError,
        TData,
        QueryKey,
        SpotifySearchParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifySearchSuspenseInfiniteQueryOptions(
    params,
    options
  );

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const spotifyGenresSeeds = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<unknown[]>(
    { url: `/api/services/spotify/genres/seeds`, method: "GET", signal },
    options
  );
};

export const getSpotifyGenresSeedsQueryKey = () => {
  return [`/api/services/spotify/genres/seeds`] as const;
};

export const getSpotifyGenresSeedsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyGenresSeeds>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof spotifyGenresSeeds>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyGenresSeedsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyGenresSeeds>>
  > = ({ signal }) => spotifyGenresSeeds(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof spotifyGenresSeeds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyGenresSeedsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyGenresSeeds>>
>;
export type SpotifyGenresSeedsInfiniteQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyGenresSeeds500
>;

export function useSpotifyGenresSeedsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyGenresSeeds>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyGenresSeeds>>,
          TError,
          Awaited<ReturnType<typeof spotifyGenresSeeds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyGenresSeedsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyGenresSeeds>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyGenresSeeds>>,
          TError,
          Awaited<ReturnType<typeof spotifyGenresSeeds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyGenresSeedsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyGenresSeeds>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyGenresSeedsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyGenresSeeds>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyGenresSeedsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyGenresSeedsQueryOptions = <
  TData = Awaited<ReturnType<typeof spotifyGenresSeeds>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof spotifyGenresSeeds>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyGenresSeedsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyGenresSeeds>>
  > = ({ signal }) => spotifyGenresSeeds(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof spotifyGenresSeeds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyGenresSeedsQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyGenresSeeds>>
>;
export type SpotifyGenresSeedsQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyGenresSeeds500
>;

export function useSpotifyGenresSeeds<
  TData = Awaited<ReturnType<typeof spotifyGenresSeeds>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyGenresSeeds>>,
          TError,
          Awaited<ReturnType<typeof spotifyGenresSeeds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyGenresSeeds<
  TData = Awaited<ReturnType<typeof spotifyGenresSeeds>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof spotifyGenresSeeds>>,
          TError,
          Awaited<ReturnType<typeof spotifyGenresSeeds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyGenresSeeds<
  TData = Awaited<ReturnType<typeof spotifyGenresSeeds>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyGenresSeeds<
  TData = Awaited<ReturnType<typeof spotifyGenresSeeds>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyGenresSeedsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyGenresSeedsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof spotifyGenresSeeds>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof spotifyGenresSeeds>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyGenresSeedsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyGenresSeeds>>
  > = ({ signal }) => spotifyGenresSeeds(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof spotifyGenresSeeds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyGenresSeedsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyGenresSeeds>>
>;
export type SpotifyGenresSeedsSuspenseQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyGenresSeeds500
>;

export function useSpotifyGenresSeedsSuspense<
  TData = Awaited<ReturnType<typeof spotifyGenresSeeds>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyGenresSeedsSuspense<
  TData = Awaited<ReturnType<typeof spotifyGenresSeeds>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyGenresSeedsSuspense<
  TData = Awaited<ReturnType<typeof spotifyGenresSeeds>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyGenresSeedsSuspense<
  TData = Awaited<ReturnType<typeof spotifyGenresSeeds>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSpotifyGenresSeedsSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSpotifyGenresSeedsSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyGenresSeeds>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(options?: {
  query?: Partial<
    UseSuspenseInfiniteQueryOptions<
      Awaited<ReturnType<typeof spotifyGenresSeeds>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSpotifyGenresSeedsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof spotifyGenresSeeds>>
  > = ({ signal }) => spotifyGenresSeeds(requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof spotifyGenresSeeds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SpotifyGenresSeedsSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof spotifyGenresSeeds>>
>;
export type SpotifyGenresSeedsSuspenseInfiniteQueryError = ErrorType<
  AuthenticationExceptionResponse | SpotifyGenresSeeds500
>;

export function useSpotifyGenresSeedsSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyGenresSeeds>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyGenresSeedsSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyGenresSeeds>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSpotifyGenresSeedsSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyGenresSeeds>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSpotifyGenresSeedsSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof spotifyGenresSeeds>>>,
  TError = ErrorType<AuthenticationExceptionResponse | SpotifyGenresSeeds500>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof spotifyGenresSeeds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getSpotifyGenresSeedsSuspenseInfiniteQueryOptions(options);

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
