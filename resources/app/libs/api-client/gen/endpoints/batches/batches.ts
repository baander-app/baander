/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * B√•nder api docs
 * B√•nder.App is a sophisticated media server developed with the primary goal to deliver high performance and seamless experience for users.
Being built on top of Laravel framework and PostgreSQL for database, it leverages the power of robust backend technologies, providing high security, reliability, and scalability.

The main focus of B√•nder.App is efficient media management and delivery.
This application is designed to handle large amounts of media files while ensuring quick and efficient access.
Implemented queuing functionality through Redis offers efficient job management and load handling.
The media information is organized and easily searchable, ensuring users can always find what they are looking for quickly and easily.
 * OpenAPI spec version: 0.0.1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  HorizonJobsBatchesIndex200,
  HorizonJobsBatchesRetry200,
  HorizonJobsBatchesShow200,
} from "../../models";

import { customInstance } from "../../../axios-instance";
import type { ErrorType } from "../../../axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all of the batches
 */
export const horizonJobsBatchesIndex = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<HorizonJobsBatchesIndex200>(
    { url: `/-/horizon/api/batches`, method: "GET", signal },
    options
  );
};

export const getHorizonJobsBatchesIndexQueryKey = () => {
  return [`/-/horizon/api/batches`] as const;
};

export const getHorizonJobsBatchesIndexInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesIndex>>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsBatchesIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsBatchesIndex>>
  > = ({ signal }) => horizonJobsBatchesIndex(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsBatchesIndexInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsBatchesIndex>>
>;
export type HorizonJobsBatchesIndexInfiniteQueryError = ErrorType<unknown>;

export function useHorizonJobsBatchesIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesIndex>>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsBatchesIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsBatchesIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the batches
 */

export function useHorizonJobsBatchesIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonJobsBatchesIndexInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonJobsBatchesIndexQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsBatchesIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsBatchesIndex>>
  > = ({ signal }) => horizonJobsBatchesIndex(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsBatchesIndexQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsBatchesIndex>>
>;
export type HorizonJobsBatchesIndexQueryError = ErrorType<unknown>;

export function useHorizonJobsBatchesIndex<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsBatchesIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesIndex<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsBatchesIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesIndex<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the batches
 */

export function useHorizonJobsBatchesIndex<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonJobsBatchesIndexQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonJobsBatchesIndexSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsBatchesIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsBatchesIndex>>
  > = ({ signal }) => horizonJobsBatchesIndex(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsBatchesIndexSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsBatchesIndex>>
>;
export type HorizonJobsBatchesIndexSuspenseQueryError = ErrorType<unknown>;

export function useHorizonJobsBatchesIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the batches
 */

export function useHorizonJobsBatchesIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonJobsBatchesIndexSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonJobsBatchesIndexSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesIndex>>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseSuspenseInfiniteQueryOptions<
      Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsBatchesIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsBatchesIndex>>
  > = ({ signal }) => horizonJobsBatchesIndex(requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsBatchesIndexSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsBatchesIndex>>
>;
export type HorizonJobsBatchesIndexSuspenseInfiniteQueryError =
  ErrorType<unknown>;

export function useHorizonJobsBatchesIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesIndex>>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the batches
 */

export function useHorizonJobsBatchesIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getHorizonJobsBatchesIndexSuspenseInfiniteQueryOptions(options);

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get the details of a batch by ID
 */
export const horizonJobsBatchesShow = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<HorizonJobsBatchesShow200>(
    { url: `/-/horizon/api/batches/${id}`, method: "GET", signal },
    options
  );
};

export const getHorizonJobsBatchesShowQueryKey = (id?: string) => {
  return [`/-/horizon/api/batches/${id}`] as const;
};

export const getHorizonJobsBatchesShowInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsBatchesShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsBatchesShow>>
  > = ({ signal }) => horizonJobsBatchesShow(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsBatchesShowInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsBatchesShow>>
>;
export type HorizonJobsBatchesShowInfiniteQueryError = ErrorType<unknown>;

export function useHorizonJobsBatchesShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsBatchesShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsBatchesShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get the details of a batch by ID
 */

export function useHorizonJobsBatchesShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonJobsBatchesShowInfiniteQueryOptions(
    id,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonJobsBatchesShowQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsBatchesShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsBatchesShow>>
  > = ({ signal }) => horizonJobsBatchesShow(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsBatchesShowQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsBatchesShow>>
>;
export type HorizonJobsBatchesShowQueryError = ErrorType<unknown>;

export function useHorizonJobsBatchesShow<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsBatchesShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesShow<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsBatchesShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesShow<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get the details of a batch by ID
 */

export function useHorizonJobsBatchesShow<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonJobsBatchesShowQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonJobsBatchesShowSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsBatchesShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsBatchesShow>>
  > = ({ signal }) => horizonJobsBatchesShow(id, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsBatchesShowSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsBatchesShow>>
>;
export type HorizonJobsBatchesShowSuspenseQueryError = ErrorType<unknown>;

export function useHorizonJobsBatchesShowSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesShowSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesShowSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get the details of a batch by ID
 */

export function useHorizonJobsBatchesShowSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonJobsBatchesShowSuspenseQueryOptions(
    id,
    options
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonJobsBatchesShowSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsBatchesShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsBatchesShow>>
  > = ({ signal }) => horizonJobsBatchesShow(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsBatchesShowSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsBatchesShow>>
>;
export type HorizonJobsBatchesShowSuspenseInfiniteQueryError =
  ErrorType<unknown>;

export function useHorizonJobsBatchesShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsBatchesShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get the details of a batch by ID
 */

export function useHorizonJobsBatchesShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsBatchesShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsBatchesShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonJobsBatchesShowSuspenseInfiniteQueryOptions(
    id,
    options
  );

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Retry the given batch
 */
export const horizonJobsBatchesRetry = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<HorizonJobsBatchesRetry200>(
    { url: `/-/horizon/api/batches/retry/${id}`, method: "POST", signal },
    options
  );
};

export const getHorizonJobsBatchesRetryMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof horizonJobsBatchesRetry>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof horizonJobsBatchesRetry>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["horizonJobsBatchesRetry"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof horizonJobsBatchesRetry>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return horizonJobsBatchesRetry(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type HorizonJobsBatchesRetryMutationResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsBatchesRetry>>
>;

export type HorizonJobsBatchesRetryMutationError = ErrorType<unknown>;

/**
 * @summary Retry the given batch
 */
export const useHorizonJobsBatchesRetry = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof horizonJobsBatchesRetry>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof horizonJobsBatchesRetry>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getHorizonJobsBatchesRetryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
