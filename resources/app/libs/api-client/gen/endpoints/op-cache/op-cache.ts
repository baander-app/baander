/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * B√•nder api docs
 * B√•nder.App is a sophisticated media server developed with the primary goal to deliver high performance and seamless experience for users.
Being built on top of Laravel framework and PostgreSQL for database, it leverages the power of robust backend technologies, providing high security, reliability, and scalability.

The main focus of B√•nder.App is efficient media management and delivery.
This application is designed to handle large amounts of media files while ensuring quick and efficient access.
Implemented queuing functionality through Redis offers efficient job management and load handling.
The media information is organized and easily searchable, ensuring users can always find what they are looking for quickly and easily.
 * OpenAPI spec version: 0.0.1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  AuthenticationExceptionResponse,
  OpCacheGetStatus200,
  OpcacheClear200,
  OpcacheCompile200,
  OpcacheCompileParams,
  OpcacheGetConfig200,
} from "../../models";

import { customInstance } from "../../../axios-instance";
import type { ErrorType } from "../../../axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get status
 */
export const opCacheGetStatus = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<OpCacheGetStatus200>(
    { url: `/api/opcache/status`, method: "GET", signal },
    options
  );
};

export const getOpCacheGetStatusQueryKey = () => {
  return [`/api/opcache/status`] as const;
};

export const getOpCacheGetStatusInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof opCacheGetStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof opCacheGetStatus>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOpCacheGetStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof opCacheGetStatus>>
  > = ({ signal }) => opCacheGetStatus(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof opCacheGetStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OpCacheGetStatusInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof opCacheGetStatus>>
>;
export type OpCacheGetStatusInfiniteQueryError =
  ErrorType<AuthenticationExceptionResponse>;

export function useOpCacheGetStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opCacheGetStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof opCacheGetStatus>>,
          TError,
          Awaited<ReturnType<typeof opCacheGetStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpCacheGetStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opCacheGetStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof opCacheGetStatus>>,
          TError,
          Awaited<ReturnType<typeof opCacheGetStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpCacheGetStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opCacheGetStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get status
 */

export function useOpCacheGetStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opCacheGetStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOpCacheGetStatusInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOpCacheGetStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof opCacheGetStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof opCacheGetStatus>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOpCacheGetStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof opCacheGetStatus>>
  > = ({ signal }) => opCacheGetStatus(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof opCacheGetStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OpCacheGetStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof opCacheGetStatus>>
>;
export type OpCacheGetStatusQueryError =
  ErrorType<AuthenticationExceptionResponse>;

export function useOpCacheGetStatus<
  TData = Awaited<ReturnType<typeof opCacheGetStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof opCacheGetStatus>>,
          TError,
          Awaited<ReturnType<typeof opCacheGetStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpCacheGetStatus<
  TData = Awaited<ReturnType<typeof opCacheGetStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof opCacheGetStatus>>,
          TError,
          Awaited<ReturnType<typeof opCacheGetStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpCacheGetStatus<
  TData = Awaited<ReturnType<typeof opCacheGetStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get status
 */

export function useOpCacheGetStatus<
  TData = Awaited<ReturnType<typeof opCacheGetStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOpCacheGetStatusQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOpCacheGetStatusSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof opCacheGetStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof opCacheGetStatus>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOpCacheGetStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof opCacheGetStatus>>
  > = ({ signal }) => opCacheGetStatus(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof opCacheGetStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OpCacheGetStatusSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof opCacheGetStatus>>
>;
export type OpCacheGetStatusSuspenseQueryError =
  ErrorType<AuthenticationExceptionResponse>;

export function useOpCacheGetStatusSuspense<
  TData = Awaited<ReturnType<typeof opCacheGetStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpCacheGetStatusSuspense<
  TData = Awaited<ReturnType<typeof opCacheGetStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpCacheGetStatusSuspense<
  TData = Awaited<ReturnType<typeof opCacheGetStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get status
 */

export function useOpCacheGetStatusSuspense<
  TData = Awaited<ReturnType<typeof opCacheGetStatus>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOpCacheGetStatusSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOpCacheGetStatusSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof opCacheGetStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(options?: {
  query?: Partial<
    UseSuspenseInfiniteQueryOptions<
      Awaited<ReturnType<typeof opCacheGetStatus>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOpCacheGetStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof opCacheGetStatus>>
  > = ({ signal }) => opCacheGetStatus(requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof opCacheGetStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OpCacheGetStatusSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof opCacheGetStatus>>
>;
export type OpCacheGetStatusSuspenseInfiniteQueryError =
  ErrorType<AuthenticationExceptionResponse>;

export function useOpCacheGetStatusSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opCacheGetStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpCacheGetStatusSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opCacheGetStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpCacheGetStatusSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opCacheGetStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get status
 */

export function useOpCacheGetStatusSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opCacheGetStatus>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opCacheGetStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOpCacheGetStatusSuspenseInfiniteQueryOptions(options);

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get config
 */
export const opcacheGetConfig = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<OpcacheGetConfig200>(
    { url: `/api/opcache/config`, method: "GET", signal },
    options
  );
};

export const getOpcacheGetConfigQueryKey = () => {
  return [`/api/opcache/config`] as const;
};

export const getOpcacheGetConfigInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof opcacheGetConfig>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof opcacheGetConfig>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOpcacheGetConfigQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof opcacheGetConfig>>
  > = ({ signal }) => opcacheGetConfig(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof opcacheGetConfig>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OpcacheGetConfigInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof opcacheGetConfig>>
>;
export type OpcacheGetConfigInfiniteQueryError =
  ErrorType<AuthenticationExceptionResponse>;

export function useOpcacheGetConfigInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opcacheGetConfig>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof opcacheGetConfig>>,
          TError,
          Awaited<ReturnType<typeof opcacheGetConfig>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpcacheGetConfigInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opcacheGetConfig>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof opcacheGetConfig>>,
          TError,
          Awaited<ReturnType<typeof opcacheGetConfig>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpcacheGetConfigInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opcacheGetConfig>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get config
 */

export function useOpcacheGetConfigInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opcacheGetConfig>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOpcacheGetConfigInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOpcacheGetConfigQueryOptions = <
  TData = Awaited<ReturnType<typeof opcacheGetConfig>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof opcacheGetConfig>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOpcacheGetConfigQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof opcacheGetConfig>>
  > = ({ signal }) => opcacheGetConfig(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof opcacheGetConfig>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OpcacheGetConfigQueryResult = NonNullable<
  Awaited<ReturnType<typeof opcacheGetConfig>>
>;
export type OpcacheGetConfigQueryError =
  ErrorType<AuthenticationExceptionResponse>;

export function useOpcacheGetConfig<
  TData = Awaited<ReturnType<typeof opcacheGetConfig>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof opcacheGetConfig>>,
          TError,
          Awaited<ReturnType<typeof opcacheGetConfig>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpcacheGetConfig<
  TData = Awaited<ReturnType<typeof opcacheGetConfig>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof opcacheGetConfig>>,
          TError,
          Awaited<ReturnType<typeof opcacheGetConfig>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpcacheGetConfig<
  TData = Awaited<ReturnType<typeof opcacheGetConfig>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get config
 */

export function useOpcacheGetConfig<
  TData = Awaited<ReturnType<typeof opcacheGetConfig>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOpcacheGetConfigQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOpcacheGetConfigSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof opcacheGetConfig>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof opcacheGetConfig>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOpcacheGetConfigQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof opcacheGetConfig>>
  > = ({ signal }) => opcacheGetConfig(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof opcacheGetConfig>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OpcacheGetConfigSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof opcacheGetConfig>>
>;
export type OpcacheGetConfigSuspenseQueryError =
  ErrorType<AuthenticationExceptionResponse>;

export function useOpcacheGetConfigSuspense<
  TData = Awaited<ReturnType<typeof opcacheGetConfig>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpcacheGetConfigSuspense<
  TData = Awaited<ReturnType<typeof opcacheGetConfig>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpcacheGetConfigSuspense<
  TData = Awaited<ReturnType<typeof opcacheGetConfig>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get config
 */

export function useOpcacheGetConfigSuspense<
  TData = Awaited<ReturnType<typeof opcacheGetConfig>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOpcacheGetConfigSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOpcacheGetConfigSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof opcacheGetConfig>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(options?: {
  query?: Partial<
    UseSuspenseInfiniteQueryOptions<
      Awaited<ReturnType<typeof opcacheGetConfig>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOpcacheGetConfigQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof opcacheGetConfig>>
  > = ({ signal }) => opcacheGetConfig(requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof opcacheGetConfig>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OpcacheGetConfigSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof opcacheGetConfig>>
>;
export type OpcacheGetConfigSuspenseInfiniteQueryError =
  ErrorType<AuthenticationExceptionResponse>;

export function useOpcacheGetConfigSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opcacheGetConfig>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpcacheGetConfigSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opcacheGetConfig>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOpcacheGetConfigSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opcacheGetConfig>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get config
 */

export function useOpcacheGetConfigSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof opcacheGetConfig>>>,
  TError = ErrorType<AuthenticationExceptionResponse>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof opcacheGetConfig>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOpcacheGetConfigSuspenseInfiniteQueryOptions(options);

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Clear
 */
export const opcacheClear = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<OpcacheClear200>(
    { url: `/api/opcache/clear`, method: "POST", signal },
    options
  );
};

export const getOpcacheClearMutationOptions = <
  TError = ErrorType<AuthenticationExceptionResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof opcacheClear>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof opcacheClear>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["opcacheClear"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof opcacheClear>>,
    void
  > = () => {
    return opcacheClear(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OpcacheClearMutationResult = NonNullable<
  Awaited<ReturnType<typeof opcacheClear>>
>;

export type OpcacheClearMutationError =
  ErrorType<AuthenticationExceptionResponse>;

/**
 * @summary Clear
 */
export const useOpcacheClear = <
  TError = ErrorType<AuthenticationExceptionResponse>,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof opcacheClear>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof opcacheClear>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getOpcacheClearMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Compile cache
 */
export const opcacheCompile = (
  params?: OpcacheCompileParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<OpcacheCompile200>(
    { url: `/api/opcache/compile`, method: "POST", params, signal },
    options
  );
};

export const getOpcacheCompileMutationOptions = <
  TError = ErrorType<AuthenticationExceptionResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof opcacheCompile>>,
    TError,
    { params?: OpcacheCompileParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof opcacheCompile>>,
  TError,
  { params?: OpcacheCompileParams },
  TContext
> => {
  const mutationKey = ["opcacheCompile"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof opcacheCompile>>,
    { params?: OpcacheCompileParams }
  > = (props) => {
    const { params } = props ?? {};

    return opcacheCompile(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OpcacheCompileMutationResult = NonNullable<
  Awaited<ReturnType<typeof opcacheCompile>>
>;

export type OpcacheCompileMutationError =
  ErrorType<AuthenticationExceptionResponse>;

/**
 * @summary Compile cache
 */
export const useOpcacheCompile = <
  TError = ErrorType<AuthenticationExceptionResponse>,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof opcacheCompile>>,
      TError,
      { params?: OpcacheCompileParams },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof opcacheCompile>>,
  TError,
  { params?: OpcacheCompileParams },
  TContext
> => {
  const mutationOptions = getOpcacheCompileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
