/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * B√•nder api docs
 * B√•nder.App is a sophisticated media server developed with the primary goal to deliver high performance and seamless experience for users.
Being built on top of Laravel framework and PostgreSQL for database, it leverages the power of robust backend technologies, providing high security, reliability, and scalability.

The main focus of B√•nder.App is efficient media management and delivery.
This application is designed to handle large amounts of media files while ensuring quick and efficient access.
Implemented queuing functionality through Redis offers efficient job management and load handling.
The media information is organized and easily searchable, ensuring users can always find what they are looking for quickly and easily.
 * OpenAPI spec version: 0.0.1
 */
import {
  useInfiniteQuery,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  HorizonFailedJobsIndex200,
  HorizonFailedJobsIndexParams,
} from "../../models";

import { customInstance } from "../../../axios-instance";
import type { ErrorType } from "../../../axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all of the failed jobs
 */
export const horizonFailedJobsIndex = (
  params?: HorizonFailedJobsIndexParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<HorizonFailedJobsIndex200>(
    { url: `/-/horizon/api/jobs/failed`, method: "GET", params, signal },
    options
  );
};

export const getHorizonFailedJobsIndexQueryKey = (
  params?: HorizonFailedJobsIndexParams
) => {
  return [`/-/horizon/api/jobs/failed`, ...(params ? [params] : [])] as const;
};

export const getHorizonFailedJobsIndexInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    HorizonFailedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonFailedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonFailedJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    QueryKey,
    HorizonFailedJobsIndexParams["limit"]
  > = ({ signal, pageParam }) =>
    horizonFailedJobsIndex(
      { ...params, limit: pageParam || params?.["limit"] },
      requestOptions,
      signal
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    TError,
    TData,
    QueryKey,
    HorizonFailedJobsIndexParams["limit"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonFailedJobsIndexInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonFailedJobsIndex>>
>;
export type HorizonFailedJobsIndexInfiniteQueryError = ErrorType<unknown>;

export function useHorizonFailedJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    HorizonFailedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonFailedJobsIndexParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonFailedJobsIndexParams["limit"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    HorizonFailedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonFailedJobsIndexParams["limit"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    HorizonFailedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonFailedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the failed jobs
 */

export function useHorizonFailedJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    HorizonFailedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonFailedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonFailedJobsIndexInfiniteQueryOptions(
    params,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonFailedJobsIndexQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonFailedJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>
  > = ({ signal }) => horizonFailedJobsIndex(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonFailedJobsIndexQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonFailedJobsIndex>>
>;
export type HorizonFailedJobsIndexQueryError = ErrorType<unknown>;

export function useHorizonFailedJobsIndex<
  TData = Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonFailedJobsIndexParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonFailedJobsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsIndex<
  TData = Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonFailedJobsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsIndex<
  TData = Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the failed jobs
 */

export function useHorizonFailedJobsIndex<
  TData = Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonFailedJobsIndexQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonFailedJobsIndexSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonFailedJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>
  > = ({ signal }) => horizonFailedJobsIndex(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonFailedJobsIndexSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonFailedJobsIndex>>
>;
export type HorizonFailedJobsIndexSuspenseQueryError = ErrorType<unknown>;

export function useHorizonFailedJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonFailedJobsIndexParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the failed jobs
 */

export function useHorizonFailedJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonFailedJobsIndexSuspenseQueryOptions(
    params,
    options
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonFailedJobsIndexSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    HorizonFailedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonFailedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonFailedJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    QueryKey,
    HorizonFailedJobsIndexParams["limit"]
  > = ({ signal, pageParam }) =>
    horizonFailedJobsIndex(
      { ...params, limit: pageParam || params?.["limit"] },
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    TError,
    TData,
    QueryKey,
    HorizonFailedJobsIndexParams["limit"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonFailedJobsIndexSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonFailedJobsIndex>>
>;
export type HorizonFailedJobsIndexSuspenseInfiniteQueryError =
  ErrorType<unknown>;

export function useHorizonFailedJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    HorizonFailedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonFailedJobsIndexParams,
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonFailedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    HorizonFailedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonFailedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    HorizonFailedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonFailedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the failed jobs
 */

export function useHorizonFailedJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
    HorizonFailedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonFailedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonFailedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonFailedJobsIndexSuspenseInfiniteQueryOptions(
    params,
    options
  );

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a failed job instance
 */
export const horizonFailedJobsShow = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<unknown>(
    { url: `/-/horizon/api/jobs/failed/${id}`, method: "GET", signal },
    options
  );
};

export const getHorizonFailedJobsShowQueryKey = (id?: string) => {
  return [`/-/horizon/api/jobs/failed/${id}`] as const;
};

export const getHorizonFailedJobsShowInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonFailedJobsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonFailedJobsShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonFailedJobsShow>>
  > = ({ signal }) => horizonFailedJobsShow(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonFailedJobsShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonFailedJobsShowInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonFailedJobsShow>>
>;
export type HorizonFailedJobsShowInfiniteQueryError = ErrorType<unknown>;

export function useHorizonFailedJobsShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonFailedJobsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonFailedJobsShow>>,
          TError,
          Awaited<ReturnType<typeof horizonFailedJobsShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonFailedJobsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonFailedJobsShow>>,
          TError,
          Awaited<ReturnType<typeof horizonFailedJobsShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonFailedJobsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a failed job instance
 */

export function useHorizonFailedJobsShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonFailedJobsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonFailedJobsShowInfiniteQueryOptions(
    id,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonFailedJobsShowQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonFailedJobsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonFailedJobsShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonFailedJobsShow>>
  > = ({ signal }) => horizonFailedJobsShow(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof horizonFailedJobsShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonFailedJobsShowQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonFailedJobsShow>>
>;
export type HorizonFailedJobsShowQueryError = ErrorType<unknown>;

export function useHorizonFailedJobsShow<
  TData = Awaited<ReturnType<typeof horizonFailedJobsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonFailedJobsShow>>,
          TError,
          Awaited<ReturnType<typeof horizonFailedJobsShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsShow<
  TData = Awaited<ReturnType<typeof horizonFailedJobsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonFailedJobsShow>>,
          TError,
          Awaited<ReturnType<typeof horizonFailedJobsShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsShow<
  TData = Awaited<ReturnType<typeof horizonFailedJobsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a failed job instance
 */

export function useHorizonFailedJobsShow<
  TData = Awaited<ReturnType<typeof horizonFailedJobsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonFailedJobsShowQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonFailedJobsShowSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonFailedJobsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonFailedJobsShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonFailedJobsShow>>
  > = ({ signal }) => horizonFailedJobsShow(id, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof horizonFailedJobsShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonFailedJobsShowSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonFailedJobsShow>>
>;
export type HorizonFailedJobsShowSuspenseQueryError = ErrorType<unknown>;

export function useHorizonFailedJobsShowSuspense<
  TData = Awaited<ReturnType<typeof horizonFailedJobsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsShowSuspense<
  TData = Awaited<ReturnType<typeof horizonFailedJobsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsShowSuspense<
  TData = Awaited<ReturnType<typeof horizonFailedJobsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a failed job instance
 */

export function useHorizonFailedJobsShowSuspense<
  TData = Awaited<ReturnType<typeof horizonFailedJobsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonFailedJobsShowSuspenseQueryOptions(
    id,
    options
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonFailedJobsShowSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonFailedJobsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonFailedJobsShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonFailedJobsShow>>
  > = ({ signal }) => horizonFailedJobsShow(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonFailedJobsShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonFailedJobsShowSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonFailedJobsShow>>
>;
export type HorizonFailedJobsShowSuspenseInfiniteQueryError =
  ErrorType<unknown>;

export function useHorizonFailedJobsShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonFailedJobsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonFailedJobsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonFailedJobsShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonFailedJobsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a failed job instance
 */

export function useHorizonFailedJobsShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonFailedJobsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonFailedJobsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonFailedJobsShowSuspenseInfiniteQueryOptions(
    id,
    options
  );

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
