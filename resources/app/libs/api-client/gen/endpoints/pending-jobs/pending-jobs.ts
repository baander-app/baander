/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * B√•nder api docs
 * B√•nder.App is a sophisticated media server developed with the primary goal to deliver high performance and seamless experience for users.
Being built on top of Laravel framework and PostgreSQL for database, it leverages the power of robust backend technologies, providing high security, reliability, and scalability.

The main focus of B√•nder.App is efficient media management and delivery.
This application is designed to handle large amounts of media files while ensuring quick and efficient access.
Implemented queuing functionality through Redis offers efficient job management and load handling.
The media information is organized and easily searchable, ensuring users can always find what they are looking for quickly and easily.
 * OpenAPI spec version: 0.0.1
 */
import {
  useInfiniteQuery,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  HorizonPendingJobsIndex200,
  HorizonPendingJobsIndexParams,
} from "../../models";

import { customInstance } from "../../../axios-instance";
import type { ErrorType } from "../../../axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all of the pending jobs
 */
export const horizonPendingJobsIndex = (
  params?: HorizonPendingJobsIndexParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<HorizonPendingJobsIndex200>(
    { url: `/-/horizon/api/jobs/pending`, method: "GET", params, signal },
    options
  );
};

export const getHorizonPendingJobsIndexQueryKey = (
  params?: HorizonPendingJobsIndexParams
) => {
  return [`/-/horizon/api/jobs/pending`, ...(params ? [params] : [])] as const;
};

export const getHorizonPendingJobsIndexInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    HorizonPendingJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonPendingJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonPendingJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    QueryKey,
    HorizonPendingJobsIndexParams["limit"]
  > = ({ signal, pageParam }) =>
    horizonPendingJobsIndex(
      { ...params, limit: pageParam || params?.["limit"] },
      requestOptions,
      signal
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    TError,
    TData,
    QueryKey,
    HorizonPendingJobsIndexParams["limit"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonPendingJobsIndexInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonPendingJobsIndex>>
>;
export type HorizonPendingJobsIndexInfiniteQueryError = ErrorType<unknown>;

export function useHorizonPendingJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    HorizonPendingJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonPendingJobsIndexParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonPendingJobsIndexParams["limit"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonPendingJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    HorizonPendingJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonPendingJobsIndexParams["limit"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonPendingJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    HorizonPendingJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonPendingJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the pending jobs
 */

export function useHorizonPendingJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    HorizonPendingJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonPendingJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonPendingJobsIndexInfiniteQueryOptions(
    params,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonPendingJobsIndexQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonPendingJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>
  > = ({ signal }) => horizonPendingJobsIndex(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonPendingJobsIndexQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonPendingJobsIndex>>
>;
export type HorizonPendingJobsIndexQueryError = ErrorType<unknown>;

export function useHorizonPendingJobsIndex<
  TData = Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonPendingJobsIndexParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonPendingJobsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonPendingJobsIndex<
  TData = Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonPendingJobsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonPendingJobsIndex<
  TData = Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the pending jobs
 */

export function useHorizonPendingJobsIndex<
  TData = Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonPendingJobsIndexQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonPendingJobsIndexSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonPendingJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>
  > = ({ signal }) => horizonPendingJobsIndex(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonPendingJobsIndexSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonPendingJobsIndex>>
>;
export type HorizonPendingJobsIndexSuspenseQueryError = ErrorType<unknown>;

export function useHorizonPendingJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonPendingJobsIndexParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonPendingJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonPendingJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the pending jobs
 */

export function useHorizonPendingJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonPendingJobsIndexSuspenseQueryOptions(
    params,
    options
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonPendingJobsIndexSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    HorizonPendingJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonPendingJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonPendingJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    QueryKey,
    HorizonPendingJobsIndexParams["limit"]
  > = ({ signal, pageParam }) =>
    horizonPendingJobsIndex(
      { ...params, limit: pageParam || params?.["limit"] },
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    TError,
    TData,
    QueryKey,
    HorizonPendingJobsIndexParams["limit"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonPendingJobsIndexSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonPendingJobsIndex>>
>;
export type HorizonPendingJobsIndexSuspenseInfiniteQueryError =
  ErrorType<unknown>;

export function useHorizonPendingJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    HorizonPendingJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonPendingJobsIndexParams,
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonPendingJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonPendingJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    HorizonPendingJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonPendingJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonPendingJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    HorizonPendingJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonPendingJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the pending jobs
 */

export function useHorizonPendingJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
    HorizonPendingJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonPendingJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonPendingJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonPendingJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonPendingJobsIndexSuspenseInfiniteQueryOptions(
    params,
    options
  );

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
