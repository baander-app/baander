/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * B√•nder api docs
 * B√•nder.App is a sophisticated media server developed with the primary goal to deliver high performance and seamless experience for users.
Being built on top of Laravel framework and PostgreSQL for database, it leverages the power of robust backend technologies, providing high security, reliability, and scalability.

The main focus of B√•nder.App is efficient media management and delivery.
This application is designed to handle large amounts of media files while ensuring quick and efficient access.
Implemented queuing functionality through Redis offers efficient job management and load handling.
The media information is organized and easily searchable, ensuring users can always find what they are looking for quickly and easily.
 * OpenAPI spec version: 0.0.1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  HorizonMonitoringIndex200,
  HorizonMonitoringStore200,
  HorizonMonitoringTagDestroy200,
  HorizonMonitoringTagPaginate200,
  HorizonMonitoringTagPaginateParams,
} from "../../models";

import { customInstance } from "../../../axios-instance";
import type { ErrorType } from "../../../axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all of the monitored tags and their job counts
 */
export const horizonMonitoringIndex = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<HorizonMonitoringIndex200>(
    { url: `/-/horizon/api/monitoring`, method: "GET", signal },
    options
  );
};

export const getHorizonMonitoringIndexQueryKey = () => {
  return [`/-/horizon/api/monitoring`] as const;
};

export const getHorizonMonitoringIndexInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonMonitoringIndex>>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof horizonMonitoringIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonMonitoringIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonMonitoringIndex>>
  > = ({ signal }) => horizonMonitoringIndex(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonMonitoringIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonMonitoringIndexInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonMonitoringIndex>>
>;
export type HorizonMonitoringIndexInfiniteQueryError = ErrorType<unknown>;

export function useHorizonMonitoringIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonMonitoringIndex>>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonMonitoringIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonMonitoringIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonMonitoringIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonMonitoringIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonMonitoringIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonMonitoringIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the monitored tags and their job counts
 */

export function useHorizonMonitoringIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonMonitoringIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonMonitoringIndexInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonMonitoringIndexQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonMonitoringIndex>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof horizonMonitoringIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonMonitoringIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonMonitoringIndex>>
  > = ({ signal }) => horizonMonitoringIndex(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof horizonMonitoringIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonMonitoringIndexQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonMonitoringIndex>>
>;
export type HorizonMonitoringIndexQueryError = ErrorType<unknown>;

export function useHorizonMonitoringIndex<
  TData = Awaited<ReturnType<typeof horizonMonitoringIndex>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonMonitoringIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonMonitoringIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringIndex<
  TData = Awaited<ReturnType<typeof horizonMonitoringIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonMonitoringIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonMonitoringIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringIndex<
  TData = Awaited<ReturnType<typeof horizonMonitoringIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the monitored tags and their job counts
 */

export function useHorizonMonitoringIndex<
  TData = Awaited<ReturnType<typeof horizonMonitoringIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonMonitoringIndexQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonMonitoringIndexSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonMonitoringIndex>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof horizonMonitoringIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonMonitoringIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonMonitoringIndex>>
  > = ({ signal }) => horizonMonitoringIndex(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof horizonMonitoringIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonMonitoringIndexSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonMonitoringIndex>>
>;
export type HorizonMonitoringIndexSuspenseQueryError = ErrorType<unknown>;

export function useHorizonMonitoringIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonMonitoringIndex>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonMonitoringIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonMonitoringIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the monitored tags and their job counts
 */

export function useHorizonMonitoringIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonMonitoringIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonMonitoringIndexSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonMonitoringIndexSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonMonitoringIndex>>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseSuspenseInfiniteQueryOptions<
      Awaited<ReturnType<typeof horizonMonitoringIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonMonitoringIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonMonitoringIndex>>
  > = ({ signal }) => horizonMonitoringIndex(requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonMonitoringIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonMonitoringIndexSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonMonitoringIndex>>
>;
export type HorizonMonitoringIndexSuspenseInfiniteQueryError =
  ErrorType<unknown>;

export function useHorizonMonitoringIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonMonitoringIndex>>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonMonitoringIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonMonitoringIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the monitored tags and their job counts
 */

export function useHorizonMonitoringIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonMonitoringIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getHorizonMonitoringIndexSuspenseInfiniteQueryOptions(options);

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Start monitoring the given tag
 */
export const horizonMonitoringStore = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<HorizonMonitoringStore200>(
    { url: `/-/horizon/api/monitoring`, method: "POST", signal },
    options
  );
};

export const getHorizonMonitoringStoreMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof horizonMonitoringStore>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof horizonMonitoringStore>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["horizonMonitoringStore"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof horizonMonitoringStore>>,
    void
  > = () => {
    return horizonMonitoringStore(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type HorizonMonitoringStoreMutationResult = NonNullable<
  Awaited<ReturnType<typeof horizonMonitoringStore>>
>;

export type HorizonMonitoringStoreMutationError = ErrorType<unknown>;

/**
 * @summary Start monitoring the given tag
 */
export const useHorizonMonitoringStore = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof horizonMonitoringStore>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof horizonMonitoringStore>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getHorizonMonitoringStoreMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Paginate the jobs for a given tag
 */
export const horizonMonitoringTagPaginate = (
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<HorizonMonitoringTagPaginate200>(
    { url: `/-/horizon/api/monitoring/${tag}`, method: "GET", params, signal },
    options
  );
};

export const getHorizonMonitoringTagPaginateQueryKey = (
  tag?: string,
  params?: HorizonMonitoringTagPaginateParams
) => {
  return [
    `/-/horizon/api/monitoring/${tag}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getHorizonMonitoringTagPaginateInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    HorizonMonitoringTagPaginateParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData,
        QueryKey,
        HorizonMonitoringTagPaginateParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getHorizonMonitoringTagPaginateQueryKey(tag, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    QueryKey,
    HorizonMonitoringTagPaginateParams["page"]
  > = ({ signal, pageParam }) =>
    horizonMonitoringTagPaginate(
      tag,
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    enabled: !!tag,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    TError,
    TData,
    QueryKey,
    HorizonMonitoringTagPaginateParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonMonitoringTagPaginateInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>
>;
export type HorizonMonitoringTagPaginateInfiniteQueryError = ErrorType<unknown>;

export function useHorizonMonitoringTagPaginateInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    HorizonMonitoringTagPaginateParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  tag: string,
  params: undefined | HorizonMonitoringTagPaginateParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData,
        QueryKey,
        HorizonMonitoringTagPaginateParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
          TError,
          Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringTagPaginateInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    HorizonMonitoringTagPaginateParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData,
        QueryKey,
        HorizonMonitoringTagPaginateParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
          TError,
          Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringTagPaginateInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    HorizonMonitoringTagPaginateParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData,
        QueryKey,
        HorizonMonitoringTagPaginateParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Paginate the jobs for a given tag
 */

export function useHorizonMonitoringTagPaginateInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    HorizonMonitoringTagPaginateParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData,
        QueryKey,
        HorizonMonitoringTagPaginateParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonMonitoringTagPaginateInfiniteQueryOptions(
    tag,
    params,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonMonitoringTagPaginateQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getHorizonMonitoringTagPaginateQueryKey(tag, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>
  > = ({ signal }) =>
    horizonMonitoringTagPaginate(tag, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!tag,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonMonitoringTagPaginateQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>
>;
export type HorizonMonitoringTagPaginateQueryError = ErrorType<unknown>;

export function useHorizonMonitoringTagPaginate<
  TData = Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
  TError = ErrorType<unknown>
>(
  tag: string,
  params: undefined | HorizonMonitoringTagPaginateParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
          TError,
          Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringTagPaginate<
  TData = Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
          TError,
          Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringTagPaginate<
  TData = Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Paginate the jobs for a given tag
 */

export function useHorizonMonitoringTagPaginate<
  TData = Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonMonitoringTagPaginateQueryOptions(
    tag,
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonMonitoringTagPaginateSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getHorizonMonitoringTagPaginateQueryKey(tag, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>
  > = ({ signal }) =>
    horizonMonitoringTagPaginate(tag, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonMonitoringTagPaginateSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>
>;
export type HorizonMonitoringTagPaginateSuspenseQueryError = ErrorType<unknown>;

export function useHorizonMonitoringTagPaginateSuspense<
  TData = Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
  TError = ErrorType<unknown>
>(
  tag: string,
  params: undefined | HorizonMonitoringTagPaginateParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringTagPaginateSuspense<
  TData = Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringTagPaginateSuspense<
  TData = Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Paginate the jobs for a given tag
 */

export function useHorizonMonitoringTagPaginateSuspense<
  TData = Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonMonitoringTagPaginateSuspenseQueryOptions(
    tag,
    params,
    options
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonMonitoringTagPaginateSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    HorizonMonitoringTagPaginateParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData,
        QueryKey,
        HorizonMonitoringTagPaginateParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getHorizonMonitoringTagPaginateQueryKey(tag, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    QueryKey,
    HorizonMonitoringTagPaginateParams["page"]
  > = ({ signal, pageParam }) =>
    horizonMonitoringTagPaginate(
      tag,
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    TError,
    TData,
    QueryKey,
    HorizonMonitoringTagPaginateParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonMonitoringTagPaginateSuspenseInfiniteQueryResult =
  NonNullable<Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>>;
export type HorizonMonitoringTagPaginateSuspenseInfiniteQueryError =
  ErrorType<unknown>;

export function useHorizonMonitoringTagPaginateSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    HorizonMonitoringTagPaginateParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  tag: string,
  params: undefined | HorizonMonitoringTagPaginateParams,
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData,
        QueryKey,
        HorizonMonitoringTagPaginateParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringTagPaginateSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    HorizonMonitoringTagPaginateParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData,
        QueryKey,
        HorizonMonitoringTagPaginateParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonMonitoringTagPaginateSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    HorizonMonitoringTagPaginateParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData,
        QueryKey,
        HorizonMonitoringTagPaginateParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Paginate the jobs for a given tag
 */

export function useHorizonMonitoringTagPaginateSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
    HorizonMonitoringTagPaginateParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  tag: string,
  params?: HorizonMonitoringTagPaginateParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonMonitoringTagPaginate>>,
        TError,
        TData,
        QueryKey,
        HorizonMonitoringTagPaginateParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getHorizonMonitoringTagPaginateSuspenseInfiniteQueryOptions(
      tag,
      params,
      options
    );

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Stop monitoring the given tag
 */
export const horizonMonitoringTagDestroy = (
  tag: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<HorizonMonitoringTagDestroy200>(
    { url: `/-/horizon/api/monitoring/${tag}`, method: "DELETE" },
    options
  );
};

export const getHorizonMonitoringTagDestroyMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof horizonMonitoringTagDestroy>>,
    TError,
    { tag: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof horizonMonitoringTagDestroy>>,
  TError,
  { tag: string },
  TContext
> => {
  const mutationKey = ["horizonMonitoringTagDestroy"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof horizonMonitoringTagDestroy>>,
    { tag: string }
  > = (props) => {
    const { tag } = props ?? {};

    return horizonMonitoringTagDestroy(tag, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type HorizonMonitoringTagDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof horizonMonitoringTagDestroy>>
>;

export type HorizonMonitoringTagDestroyMutationError = ErrorType<unknown>;

/**
 * @summary Stop monitoring the given tag
 */
export const useHorizonMonitoringTagDestroy = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof horizonMonitoringTagDestroy>>,
      TError,
      { tag: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof horizonMonitoringTagDestroy>>,
  TError,
  { tag: string },
  TContext
> => {
  const mutationOptions =
    getHorizonMonitoringTagDestroyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
