/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * B√•nder api docs
 * B√•nder.App is a sophisticated media server developed with the primary goal to deliver high performance and seamless experience for users.
Being built on top of Laravel framework and PostgreSQL for database, it leverages the power of robust backend technologies, providing high security, reliability, and scalability.

The main focus of B√•nder.App is efficient media management and delivery.
This application is designed to handle large amounts of media files while ensuring quick and efficient access.
Implemented queuing functionality through Redis offers efficient job management and load handling.
The media information is organized and easily searchable, ensuring users can always find what they are looking for quickly and easily.
 * OpenAPI spec version: 0.0.1
 */
import {
  useInfiniteQuery,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  AuthenticationExceptionResponse,
  MetadataSearchAlbum200,
  MetadataSearchFuzzyAlbum200,
  ModelNotFoundExceptionResponse,
} from "../../models";

import { customInstance } from "../../../axios-instance";
import type { ErrorType } from "../../../axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Search for album


Looks up album in all providers
 */
export const metadataSearchAlbum = (
  album: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<MetadataSearchAlbum200>(
    { url: `/api/metadata/search/album/${album}`, method: "GET", signal },
    options
  );
};

export const getMetadataSearchAlbumQueryKey = (album?: string) => {
  return [`/api/metadata/search/album/${album}`] as const;
};

export const getMetadataSearchAlbumInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getMetadataSearchAlbumQueryKey(album);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof metadataSearchAlbum>>
  > = ({ signal }) => metadataSearchAlbum(album, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!album,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof metadataSearchAlbum>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MetadataSearchAlbumInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof metadataSearchAlbum>>
>;
export type MetadataSearchAlbumInfiniteQueryError = ErrorType<
  AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
>;

export function useMetadataSearchAlbumInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof metadataSearchAlbum>>,
          TError,
          Awaited<ReturnType<typeof metadataSearchAlbum>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchAlbumInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof metadataSearchAlbum>>,
          TError,
          Awaited<ReturnType<typeof metadataSearchAlbum>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchAlbumInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search for album


Looks up album in all providers
 */

export function useMetadataSearchAlbumInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMetadataSearchAlbumInfiniteQueryOptions(
    album,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getMetadataSearchAlbumQueryOptions = <
  TData = Awaited<ReturnType<typeof metadataSearchAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getMetadataSearchAlbumQueryKey(album);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof metadataSearchAlbum>>
  > = ({ signal }) => metadataSearchAlbum(album, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!album,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof metadataSearchAlbum>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MetadataSearchAlbumQueryResult = NonNullable<
  Awaited<ReturnType<typeof metadataSearchAlbum>>
>;
export type MetadataSearchAlbumQueryError = ErrorType<
  AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
>;

export function useMetadataSearchAlbum<
  TData = Awaited<ReturnType<typeof metadataSearchAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof metadataSearchAlbum>>,
          TError,
          Awaited<ReturnType<typeof metadataSearchAlbum>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchAlbum<
  TData = Awaited<ReturnType<typeof metadataSearchAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof metadataSearchAlbum>>,
          TError,
          Awaited<ReturnType<typeof metadataSearchAlbum>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchAlbum<
  TData = Awaited<ReturnType<typeof metadataSearchAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search for album


Looks up album in all providers
 */

export function useMetadataSearchAlbum<
  TData = Awaited<ReturnType<typeof metadataSearchAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMetadataSearchAlbumQueryOptions(album, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getMetadataSearchAlbumSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof metadataSearchAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getMetadataSearchAlbumQueryKey(album);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof metadataSearchAlbum>>
  > = ({ signal }) => metadataSearchAlbum(album, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof metadataSearchAlbum>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MetadataSearchAlbumSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof metadataSearchAlbum>>
>;
export type MetadataSearchAlbumSuspenseQueryError = ErrorType<
  AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
>;

export function useMetadataSearchAlbumSuspense<
  TData = Awaited<ReturnType<typeof metadataSearchAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchAlbumSuspense<
  TData = Awaited<ReturnType<typeof metadataSearchAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchAlbumSuspense<
  TData = Awaited<ReturnType<typeof metadataSearchAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search for album


Looks up album in all providers
 */

export function useMetadataSearchAlbumSuspense<
  TData = Awaited<ReturnType<typeof metadataSearchAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMetadataSearchAlbumSuspenseQueryOptions(
    album,
    options
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getMetadataSearchAlbumSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getMetadataSearchAlbumQueryKey(album);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof metadataSearchAlbum>>
  > = ({ signal }) => metadataSearchAlbum(album, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof metadataSearchAlbum>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MetadataSearchAlbumSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof metadataSearchAlbum>>
>;
export type MetadataSearchAlbumSuspenseInfiniteQueryError = ErrorType<
  AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
>;

export function useMetadataSearchAlbumSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchAlbumSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchAlbumSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search for album


Looks up album in all providers
 */

export function useMetadataSearchAlbumSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMetadataSearchAlbumSuspenseInfiniteQueryOptions(
    album,
    options
  );

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Search for album (fuzzy)

Generates title variations based on the album name and then searches in all providers
 */
export const metadataSearchFuzzyAlbum = (
  album: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<MetadataSearchFuzzyAlbum200>(
    { url: `/api/metadata/search/album/${album}/fuzzy`, method: "GET", signal },
    options
  );
};

export const getMetadataSearchFuzzyAlbumQueryKey = (album?: string) => {
  return [`/api/metadata/search/album/${album}/fuzzy`] as const;
};

export const getMetadataSearchFuzzyAlbumInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getMetadataSearchFuzzyAlbumQueryKey(album);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>
  > = ({ signal }) => metadataSearchFuzzyAlbum(album, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!album,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MetadataSearchFuzzyAlbumInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>
>;
export type MetadataSearchFuzzyAlbumInfiniteQueryError = ErrorType<
  AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
>;

export function useMetadataSearchFuzzyAlbumInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
          TError,
          Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchFuzzyAlbumInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
          TError,
          Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchFuzzyAlbumInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search for album (fuzzy)

Generates title variations based on the album name and then searches in all providers
 */

export function useMetadataSearchFuzzyAlbumInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMetadataSearchFuzzyAlbumInfiniteQueryOptions(
    album,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getMetadataSearchFuzzyAlbumQueryOptions = <
  TData = Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getMetadataSearchFuzzyAlbumQueryKey(album);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>
  > = ({ signal }) => metadataSearchFuzzyAlbum(album, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!album,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MetadataSearchFuzzyAlbumQueryResult = NonNullable<
  Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>
>;
export type MetadataSearchFuzzyAlbumQueryError = ErrorType<
  AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
>;

export function useMetadataSearchFuzzyAlbum<
  TData = Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
          TError,
          Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchFuzzyAlbum<
  TData = Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
          TError,
          Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchFuzzyAlbum<
  TData = Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search for album (fuzzy)

Generates title variations based on the album name and then searches in all providers
 */

export function useMetadataSearchFuzzyAlbum<
  TData = Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMetadataSearchFuzzyAlbumQueryOptions(album, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getMetadataSearchFuzzyAlbumSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getMetadataSearchFuzzyAlbumQueryKey(album);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>
  > = ({ signal }) => metadataSearchFuzzyAlbum(album, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MetadataSearchFuzzyAlbumSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>
>;
export type MetadataSearchFuzzyAlbumSuspenseQueryError = ErrorType<
  AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
>;

export function useMetadataSearchFuzzyAlbumSuspense<
  TData = Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchFuzzyAlbumSuspense<
  TData = Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchFuzzyAlbumSuspense<
  TData = Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search for album (fuzzy)

Generates title variations based on the album name and then searches in all providers
 */

export function useMetadataSearchFuzzyAlbumSuspense<
  TData = Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMetadataSearchFuzzyAlbumSuspenseQueryOptions(
    album,
    options
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getMetadataSearchFuzzyAlbumSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getMetadataSearchFuzzyAlbumQueryKey(album);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>
  > = ({ signal }) => metadataSearchFuzzyAlbum(album, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MetadataSearchFuzzyAlbumSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>
>;
export type MetadataSearchFuzzyAlbumSuspenseInfiniteQueryError = ErrorType<
  AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
>;

export function useMetadataSearchFuzzyAlbumSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchFuzzyAlbumSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMetadataSearchFuzzyAlbumSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search for album (fuzzy)

Generates title variations based on the album name and then searches in all providers
 */

export function useMetadataSearchFuzzyAlbumSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>>,
  TError = ErrorType<
    AuthenticationExceptionResponse | ModelNotFoundExceptionResponse
  >
>(
  album: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof metadataSearchFuzzyAlbum>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMetadataSearchFuzzyAlbumSuspenseInfiniteQueryOptions(
    album,
    options
  );

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
