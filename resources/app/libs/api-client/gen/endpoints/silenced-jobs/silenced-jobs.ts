/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * B√•nder api docs
 * B√•nder.App is a sophisticated media server developed with the primary goal to deliver high performance and seamless experience for users.
Being built on top of Laravel framework and PostgreSQL for database, it leverages the power of robust backend technologies, providing high security, reliability, and scalability.

The main focus of B√•nder.App is efficient media management and delivery.
This application is designed to handle large amounts of media files while ensuring quick and efficient access.
Implemented queuing functionality through Redis offers efficient job management and load handling.
The media information is organized and easily searchable, ensuring users can always find what they are looking for quickly and easily.
 * OpenAPI spec version: 0.0.1
 */
import {
  useInfiniteQuery,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  HorizonSilencedJobsIndex200,
  HorizonSilencedJobsIndexParams,
} from "../../models";

import { customInstance } from "../../../axios-instance";
import type { ErrorType } from "../../../axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all of the silenced jobs
 */
export const horizonSilencedJobsIndex = (
  params?: HorizonSilencedJobsIndexParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<HorizonSilencedJobsIndex200>(
    { url: `/-/horizon/api/jobs/silenced`, method: "GET", params, signal },
    options
  );
};

export const getHorizonSilencedJobsIndexQueryKey = (
  params?: HorizonSilencedJobsIndexParams
) => {
  return [`/-/horizon/api/jobs/silenced`, ...(params ? [params] : [])] as const;
};

export const getHorizonSilencedJobsIndexInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    HorizonSilencedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonSilencedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonSilencedJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    QueryKey,
    HorizonSilencedJobsIndexParams["limit"]
  > = ({ signal, pageParam }) =>
    horizonSilencedJobsIndex(
      { ...params, limit: pageParam || params?.["limit"] },
      requestOptions,
      signal
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    TError,
    TData,
    QueryKey,
    HorizonSilencedJobsIndexParams["limit"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonSilencedJobsIndexInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonSilencedJobsIndex>>
>;
export type HorizonSilencedJobsIndexInfiniteQueryError = ErrorType<unknown>;

export function useHorizonSilencedJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    HorizonSilencedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonSilencedJobsIndexParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonSilencedJobsIndexParams["limit"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonSilencedJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    HorizonSilencedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonSilencedJobsIndexParams["limit"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonSilencedJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    HorizonSilencedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonSilencedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the silenced jobs
 */

export function useHorizonSilencedJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    HorizonSilencedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonSilencedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonSilencedJobsIndexInfiniteQueryOptions(
    params,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonSilencedJobsIndexQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonSilencedJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>
  > = ({ signal }) => horizonSilencedJobsIndex(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonSilencedJobsIndexQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonSilencedJobsIndex>>
>;
export type HorizonSilencedJobsIndexQueryError = ErrorType<unknown>;

export function useHorizonSilencedJobsIndex<
  TData = Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonSilencedJobsIndexParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonSilencedJobsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonSilencedJobsIndex<
  TData = Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonSilencedJobsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonSilencedJobsIndex<
  TData = Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the silenced jobs
 */

export function useHorizonSilencedJobsIndex<
  TData = Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonSilencedJobsIndexQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonSilencedJobsIndexSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonSilencedJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>
  > = ({ signal }) => horizonSilencedJobsIndex(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonSilencedJobsIndexSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonSilencedJobsIndex>>
>;
export type HorizonSilencedJobsIndexSuspenseQueryError = ErrorType<unknown>;

export function useHorizonSilencedJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonSilencedJobsIndexParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonSilencedJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonSilencedJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the silenced jobs
 */

export function useHorizonSilencedJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonSilencedJobsIndexSuspenseQueryOptions(
    params,
    options
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonSilencedJobsIndexSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    HorizonSilencedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonSilencedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonSilencedJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    QueryKey,
    HorizonSilencedJobsIndexParams["limit"]
  > = ({ signal, pageParam }) =>
    horizonSilencedJobsIndex(
      { ...params, limit: pageParam || params?.["limit"] },
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    TError,
    TData,
    QueryKey,
    HorizonSilencedJobsIndexParams["limit"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonSilencedJobsIndexSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonSilencedJobsIndex>>
>;
export type HorizonSilencedJobsIndexSuspenseInfiniteQueryError =
  ErrorType<unknown>;

export function useHorizonSilencedJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    HorizonSilencedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonSilencedJobsIndexParams,
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonSilencedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonSilencedJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    HorizonSilencedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonSilencedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonSilencedJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    HorizonSilencedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonSilencedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the silenced jobs
 */

export function useHorizonSilencedJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
    HorizonSilencedJobsIndexParams["limit"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonSilencedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonSilencedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonSilencedJobsIndexParams["limit"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonSilencedJobsIndexSuspenseInfiniteQueryOptions(
    params,
    options
  );

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
