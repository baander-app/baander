/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * B√•nder api docs
 * B√•nder.App is a sophisticated media server developed with the primary goal to deliver high performance and seamless experience for users.
Being built on top of Laravel framework and PostgreSQL for database, it leverages the power of robust backend technologies, providing high security, reliability, and scalability.

The main focus of B√•nder.App is efficient media management and delivery.
This application is designed to handle large amounts of media files while ensuring quick and efficient access.
Implemented queuing functionality through Redis offers efficient job management and load handling.
The media information is organized and easily searchable, ensuring users can always find what they are looking for quickly and easily.
 * OpenAPI spec version: 0.0.1
 */
import {
  useInfiniteQuery,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type { HorizonQueuesMetricsShow200 } from "../../models";

import { customInstance } from "../../../axios-instance";
import type { ErrorType } from "../../../axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all of the measured queues
 */
export const horizonQueuesMetricsIndex = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<unknown[]>(
    { url: `/-/horizon/api/metrics/queues`, method: "GET", signal },
    options
  );
};

export const getHorizonQueuesMetricsIndexQueryKey = () => {
  return [`/-/horizon/api/metrics/queues`] as const;
};

export const getHorizonQueuesMetricsIndexInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonQueuesMetricsIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>
  > = ({ signal }) => horizonQueuesMetricsIndex(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonQueuesMetricsIndexInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>
>;
export type HorizonQueuesMetricsIndexInfiniteQueryError = ErrorType<unknown>;

export function useHorizonQueuesMetricsIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the measured queues
 */

export function useHorizonQueuesMetricsIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getHorizonQueuesMetricsIndexInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonQueuesMetricsIndexQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonQueuesMetricsIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>
  > = ({ signal }) => horizonQueuesMetricsIndex(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonQueuesMetricsIndexQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>
>;
export type HorizonQueuesMetricsIndexQueryError = ErrorType<unknown>;

export function useHorizonQueuesMetricsIndex<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsIndex<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsIndex<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the measured queues
 */

export function useHorizonQueuesMetricsIndex<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonQueuesMetricsIndexQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonQueuesMetricsIndexSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonQueuesMetricsIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>
  > = ({ signal }) => horizonQueuesMetricsIndex(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonQueuesMetricsIndexSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>
>;
export type HorizonQueuesMetricsIndexSuspenseQueryError = ErrorType<unknown>;

export function useHorizonQueuesMetricsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the measured queues
 */

export function useHorizonQueuesMetricsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getHorizonQueuesMetricsIndexSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonQueuesMetricsIndexSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseSuspenseInfiniteQueryOptions<
      Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonQueuesMetricsIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>
  > = ({ signal }) => horizonQueuesMetricsIndex(requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonQueuesMetricsIndexSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>
>;
export type HorizonQueuesMetricsIndexSuspenseInfiniteQueryError =
  ErrorType<unknown>;

export function useHorizonQueuesMetricsIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the measured queues
 */

export function useHorizonQueuesMetricsIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getHorizonQueuesMetricsIndexSuspenseInfiniteQueryOptions(options);

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get metrics for a given queue
 */
export const horizonQueuesMetricsShow = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<HorizonQueuesMetricsShow200>(
    { url: `/-/horizon/api/metrics/queues/${id}`, method: "GET", signal },
    options
  );
};

export const getHorizonQueuesMetricsShowQueryKey = (id?: string) => {
  return [`/-/horizon/api/metrics/queues/${id}`] as const;
};

export const getHorizonQueuesMetricsShowInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonQueuesMetricsShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonQueuesMetricsShow>>
  > = ({ signal }) => horizonQueuesMetricsShow(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonQueuesMetricsShowInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonQueuesMetricsShow>>
>;
export type HorizonQueuesMetricsShowInfiniteQueryError = ErrorType<unknown>;

export function useHorizonQueuesMetricsShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
          TError,
          Awaited<ReturnType<typeof horizonQueuesMetricsShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
          TError,
          Awaited<ReturnType<typeof horizonQueuesMetricsShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get metrics for a given queue
 */

export function useHorizonQueuesMetricsShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonQueuesMetricsShowInfiniteQueryOptions(
    id,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonQueuesMetricsShowQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonQueuesMetricsShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonQueuesMetricsShow>>
  > = ({ signal }) => horizonQueuesMetricsShow(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonQueuesMetricsShowQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonQueuesMetricsShow>>
>;
export type HorizonQueuesMetricsShowQueryError = ErrorType<unknown>;

export function useHorizonQueuesMetricsShow<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
          TError,
          Awaited<ReturnType<typeof horizonQueuesMetricsShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsShow<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
          TError,
          Awaited<ReturnType<typeof horizonQueuesMetricsShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsShow<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get metrics for a given queue
 */

export function useHorizonQueuesMetricsShow<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonQueuesMetricsShowQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonQueuesMetricsShowSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonQueuesMetricsShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonQueuesMetricsShow>>
  > = ({ signal }) => horizonQueuesMetricsShow(id, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonQueuesMetricsShowSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonQueuesMetricsShow>>
>;
export type HorizonQueuesMetricsShowSuspenseQueryError = ErrorType<unknown>;

export function useHorizonQueuesMetricsShowSuspense<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsShowSuspense<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsShowSuspense<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get metrics for a given queue
 */

export function useHorizonQueuesMetricsShowSuspense<
  TData = Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonQueuesMetricsShowSuspenseQueryOptions(
    id,
    options
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonQueuesMetricsShowSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonQueuesMetricsShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonQueuesMetricsShow>>
  > = ({ signal }) => horizonQueuesMetricsShow(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonQueuesMetricsShowSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonQueuesMetricsShow>>
>;
export type HorizonQueuesMetricsShowSuspenseInfiniteQueryError =
  ErrorType<unknown>;

export function useHorizonQueuesMetricsShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonQueuesMetricsShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get metrics for a given queue
 */

export function useHorizonQueuesMetricsShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonQueuesMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonQueuesMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonQueuesMetricsShowSuspenseInfiniteQueryOptions(
    id,
    options
  );

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
