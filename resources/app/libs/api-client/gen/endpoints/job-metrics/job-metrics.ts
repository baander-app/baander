/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * B√•nder api docs
 * B√•nder.App is a sophisticated media server developed with the primary goal to deliver high performance and seamless experience for users.
Being built on top of Laravel framework and PostgreSQL for database, it leverages the power of robust backend technologies, providing high security, reliability, and scalability.

The main focus of B√•nder.App is efficient media management and delivery.
This application is designed to handle large amounts of media files while ensuring quick and efficient access.
Implemented queuing functionality through Redis offers efficient job management and load handling.
The media information is organized and easily searchable, ensuring users can always find what they are looking for quickly and easily.
 * OpenAPI spec version: 0.0.1
 */
import {
  useInfiniteQuery,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type { HorizonJobsMetricsShow200 } from "../../models";

import { customInstance } from "../../../axios-instance";
import type { ErrorType } from "../../../axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all of the measured jobs
 */
export const horizonJobsMetricsIndex = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<unknown[]>(
    { url: `/-/horizon/api/metrics/jobs`, method: "GET", signal },
    options
  );
};

export const getHorizonJobsMetricsIndexQueryKey = () => {
  return [`/-/horizon/api/metrics/jobs`] as const;
};

export const getHorizonJobsMetricsIndexInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsIndex>>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsMetricsIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsMetricsIndex>>
  > = ({ signal }) => horizonJobsMetricsIndex(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsMetricsIndexInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsMetricsIndex>>
>;
export type HorizonJobsMetricsIndexInfiniteQueryError = ErrorType<unknown>;

export function useHorizonJobsMetricsIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsMetricsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsMetricsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the measured jobs
 */

export function useHorizonJobsMetricsIndexInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonJobsMetricsIndexInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonJobsMetricsIndexQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsMetricsIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsMetricsIndex>>
  > = ({ signal }) => horizonJobsMetricsIndex(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsMetricsIndexQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsMetricsIndex>>
>;
export type HorizonJobsMetricsIndexQueryError = ErrorType<unknown>;

export function useHorizonJobsMetricsIndex<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsMetricsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsIndex<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsMetricsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsIndex<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the measured jobs
 */

export function useHorizonJobsMetricsIndex<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonJobsMetricsIndexQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonJobsMetricsIndexSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsMetricsIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsMetricsIndex>>
  > = ({ signal }) => horizonJobsMetricsIndex(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsMetricsIndexSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsMetricsIndex>>
>;
export type HorizonJobsMetricsIndexSuspenseQueryError = ErrorType<unknown>;

export function useHorizonJobsMetricsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the measured jobs
 */

export function useHorizonJobsMetricsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonJobsMetricsIndexSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonJobsMetricsIndexSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsIndex>>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseSuspenseInfiniteQueryOptions<
      Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsMetricsIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsMetricsIndex>>
  > = ({ signal }) => horizonJobsMetricsIndex(requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsMetricsIndexSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsMetricsIndex>>
>;
export type HorizonJobsMetricsIndexSuspenseInfiniteQueryError =
  ErrorType<unknown>;

export function useHorizonJobsMetricsIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the measured jobs
 */

export function useHorizonJobsMetricsIndexSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsIndex>>>,
  TError = ErrorType<unknown>
>(
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getHorizonJobsMetricsIndexSuspenseInfiniteQueryOptions(options);

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get metrics for a given job
 */
export const horizonJobsMetricsShow = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<HorizonJobsMetricsShow200>(
    { url: `/-/horizon/api/metrics/jobs/${id}`, method: "GET", signal },
    options
  );
};

export const getHorizonJobsMetricsShowQueryKey = (id?: string) => {
  return [`/-/horizon/api/metrics/jobs/${id}`] as const;
};

export const getHorizonJobsMetricsShowInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsMetricsShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsMetricsShow>>
  > = ({ signal }) => horizonJobsMetricsShow(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsMetricsShowInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsMetricsShow>>
>;
export type HorizonJobsMetricsShowInfiniteQueryError = ErrorType<unknown>;

export function useHorizonJobsMetricsShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsMetricsShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsMetricsShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get metrics for a given job
 */

export function useHorizonJobsMetricsShowInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonJobsMetricsShowInfiniteQueryOptions(
    id,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonJobsMetricsShowQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsMetricsShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsMetricsShow>>
  > = ({ signal }) => horizonJobsMetricsShow(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsMetricsShowQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsMetricsShow>>
>;
export type HorizonJobsMetricsShowQueryError = ErrorType<unknown>;

export function useHorizonJobsMetricsShow<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsMetricsShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsShow<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
          TError,
          Awaited<ReturnType<typeof horizonJobsMetricsShow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsShow<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get metrics for a given job
 */

export function useHorizonJobsMetricsShow<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonJobsMetricsShowQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonJobsMetricsShowSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsMetricsShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsMetricsShow>>
  > = ({ signal }) => horizonJobsMetricsShow(id, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsMetricsShowSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsMetricsShow>>
>;
export type HorizonJobsMetricsShowSuspenseQueryError = ErrorType<unknown>;

export function useHorizonJobsMetricsShowSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsShowSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsShowSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get metrics for a given job
 */

export function useHorizonJobsMetricsShowSuspense<
  TData = Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonJobsMetricsShowSuspenseQueryOptions(
    id,
    options
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonJobsMetricsShowSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonJobsMetricsShowQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonJobsMetricsShow>>
  > = ({ signal }) => horizonJobsMetricsShow(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonJobsMetricsShowSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonJobsMetricsShow>>
>;
export type HorizonJobsMetricsShowSuspenseInfiniteQueryError =
  ErrorType<unknown>;

export function useHorizonJobsMetricsShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonJobsMetricsShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get metrics for a given job
 */

export function useHorizonJobsMetricsShowSuspenseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof horizonJobsMetricsShow>>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonJobsMetricsShow>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonJobsMetricsShowSuspenseInfiniteQueryOptions(
    id,
    options
  );

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
