/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * B√•nder api docs
 * B√•nder.App is a sophisticated media server developed with the primary goal to deliver high performance and seamless experience for users.
Being built on top of Laravel framework and PostgreSQL for database, it leverages the power of robust backend technologies, providing high security, reliability, and scalability.

The main focus of B√•nder.App is efficient media management and delivery.
This application is designed to handle large amounts of media files while ensuring quick and efficient access.
Implemented queuing functionality through Redis offers efficient job management and load handling.
The media information is organized and easily searchable, ensuring users can always find what they are looking for quickly and easily.
 * OpenAPI spec version: 0.0.1
 */
import {
  useInfiniteQuery,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  HorizonCompletedJobsIndex200,
  HorizonCompletedJobsIndexParams,
} from "../../models";

import { customInstance } from "../../../axios-instance";
import type { ErrorType } from "../../../axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all of the completed jobs
 */
export const horizonCompletedJobsIndex = (
  params?: HorizonCompletedJobsIndexParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<HorizonCompletedJobsIndex200>(
    { url: `/-/horizon/api/jobs/completed`, method: "GET", params, signal },
    options
  );
};

export const getHorizonCompletedJobsIndexQueryKey = (
  params?: HorizonCompletedJobsIndexParams
) => {
  return [
    `/-/horizon/api/jobs/completed`,
    ...(params ? [params] : []),
  ] as const;
};

export const getHorizonCompletedJobsIndexInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    HorizonCompletedJobsIndexParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonCompletedJobsIndexParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonCompletedJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    QueryKey,
    HorizonCompletedJobsIndexParams["page"]
  > = ({ signal, pageParam }) =>
    horizonCompletedJobsIndex(
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    TError,
    TData,
    QueryKey,
    HorizonCompletedJobsIndexParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonCompletedJobsIndexInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonCompletedJobsIndex>>
>;
export type HorizonCompletedJobsIndexInfiniteQueryError = ErrorType<unknown>;

export function useHorizonCompletedJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    HorizonCompletedJobsIndexParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonCompletedJobsIndexParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonCompletedJobsIndexParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonCompletedJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    HorizonCompletedJobsIndexParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonCompletedJobsIndexParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonCompletedJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    HorizonCompletedJobsIndexParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonCompletedJobsIndexParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the completed jobs
 */

export function useHorizonCompletedJobsIndexInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    HorizonCompletedJobsIndexParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonCompletedJobsIndexParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonCompletedJobsIndexInfiniteQueryOptions(
    params,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonCompletedJobsIndexQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonCompletedJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>
  > = ({ signal }) => horizonCompletedJobsIndex(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonCompletedJobsIndexQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonCompletedJobsIndex>>
>;
export type HorizonCompletedJobsIndexQueryError = ErrorType<unknown>;

export function useHorizonCompletedJobsIndex<
  TData = Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonCompletedJobsIndexParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonCompletedJobsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonCompletedJobsIndex<
  TData = Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
          TError,
          Awaited<ReturnType<typeof horizonCompletedJobsIndex>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonCompletedJobsIndex<
  TData = Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the completed jobs
 */

export function useHorizonCompletedJobsIndex<
  TData = Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonCompletedJobsIndexQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonCompletedJobsIndexSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonCompletedJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>
  > = ({ signal }) => horizonCompletedJobsIndex(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonCompletedJobsIndexSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonCompletedJobsIndex>>
>;
export type HorizonCompletedJobsIndexSuspenseQueryError = ErrorType<unknown>;

export function useHorizonCompletedJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonCompletedJobsIndexParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonCompletedJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonCompletedJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the completed jobs
 */

export function useHorizonCompletedJobsIndexSuspense<
  TData = Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonCompletedJobsIndexSuspenseQueryOptions(
    params,
    options
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getHorizonCompletedJobsIndexSuspenseInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    HorizonCompletedJobsIndexParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonCompletedJobsIndexParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getHorizonCompletedJobsIndexQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    QueryKey,
    HorizonCompletedJobsIndexParams["page"]
  > = ({ signal, pageParam }) =>
    horizonCompletedJobsIndex(
      { ...params, page: pageParam || params?.["page"] },
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    ...queryOptions,
  } as UseSuspenseInfiniteQueryOptions<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    TError,
    TData,
    QueryKey,
    HorizonCompletedJobsIndexParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HorizonCompletedJobsIndexSuspenseInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof horizonCompletedJobsIndex>>
>;
export type HorizonCompletedJobsIndexSuspenseInfiniteQueryError =
  ErrorType<unknown>;

export function useHorizonCompletedJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    HorizonCompletedJobsIndexParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  params: undefined | HorizonCompletedJobsIndexParams,
  options: {
    query: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonCompletedJobsIndexParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonCompletedJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    HorizonCompletedJobsIndexParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonCompletedJobsIndexParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHorizonCompletedJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    HorizonCompletedJobsIndexParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonCompletedJobsIndexParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of the completed jobs
 */

export function useHorizonCompletedJobsIndexSuspenseInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
    HorizonCompletedJobsIndexParams["page"]
  >,
  TError = ErrorType<unknown>
>(
  params?: HorizonCompletedJobsIndexParams,
  options?: {
    query?: Partial<
      UseSuspenseInfiniteQueryOptions<
        Awaited<ReturnType<typeof horizonCompletedJobsIndex>>,
        TError,
        TData,
        QueryKey,
        HorizonCompletedJobsIndexParams["page"]
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseSuspenseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHorizonCompletedJobsIndexSuspenseInfiniteQueryOptions(
    params,
    options
  );

  const query = useSuspenseInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
