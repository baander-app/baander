map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

upstream upstream_backend_php {
  server app:8000;
}

server {
    listen 80;
    server_name baander.test;

    # Redirect HTTP to HTTPS
    location / {
        return 307 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    ssl_certificate     /etc/nginx/certificates/cert.pem;
    ssl_certificate_key /etc/nginx/certificates/key.pem;
    server_name baander.test;

    index index.php index.html index.htm;

    charset utf-8;
    server_tokens off;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    ############################
    # Reference: https://gist.github.com/Ellrion/4eb5df00173f0fb13a76
    ############################

    location ~* \.(jpg|jpeg|png|gif|svg|webp|html|txt|json|ico|css|js)$ {
        expires 1d;
        add_header Cache-Control public;
        access_log off;

        try_files $uri $uri/ @octane;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }

    location = /favicon.ico {
        log_not_found off;
        access_log off;
        try_files $uri $uri/ @octane;
    }

    # Don't log missing robots or show them in the nginx logs
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
        try_files $uri $uri/ @octane;
    }

    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~ /\. {
        deny all;
    }

    # Deny access to any files with a .php extension in the uploads directory
    # Works in sub-directory installs and also in multisite network
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~* /(?:uploads|files)/.*\.php$ {
        deny all;
    }

    location /index.php {
        try_files /not_exists @octane;
    }

    location / {
        if ($request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT|DELETE)$) {
            return 405;
        }

        try_files $uri $uri/ @octane;
    }

    location @octane {
        set $suffix "";

        if ($uri = /index.php) {
            set $suffix ?$query_string;
        }

        proxy_http_version 1.1;
        proxy_set_header Http_Host $http_host;
        proxy_set_header Host $host;
        proxy_set_header Scheme $scheme;
        proxy_set_header SERVER_PORT $server_port;
        proxy_set_header REMOTE_ADDR $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_set_header X-Real-IP $remote_addr;
        proxy_pass http://upstream_backend_php$suffix;
    }
}
